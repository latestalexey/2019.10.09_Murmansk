
#Область ИнформацияОСовместимости
Функция ВерсияИнтеграции() 
	Возврат "1.1.2.37 Int, 08.05.2019";
КонецФункции

Функция ВерсияAPI() 
	Возврат 1;
КонецФункции

Функция ПоддерживаемыеВерсииКонфигурации(ИмяТекущейКонфигурации) 
	
	ДиапазонВерсий = Новый Структура;
	Если ИмяТекущейКонфигурации = "управлениеторговлей" Тогда		// УТ 10.3
		ДиапазонВерсий.Вставить("НачальнаяВерсия", "10.3.17.4");
		ДиапазонВерсий.Вставить("КонечнаяВерсия", "10.3.52.1");
		
	ИначеЕсли ИмяТекущейКонфигурации = "управлениеторговлейбазовая" Тогда		// УТ 10.3
		ДиапазонВерсий.Вставить("НачальнаяВерсия", "10.3.17.4");
		ДиапазонВерсий.Вставить("КонечнаяВерсия", "10.3.52.1");
		
	ИначеЕсли ИмяТекущейКонфигурации = "управлениепроизводственнымпредприятием" Тогда// УПП 1.3		
		ДиапазонВерсий.Вставить("НачальнаяВерсия", "1.3.97.4");
		ДиапазонВерсий.Вставить("КонечнаяВерсия", "1.3.121.1");
		
	ИначеЕсли ИмяТекущейКонфигурации = "комплекснаяавтоматизация" Тогда// КА 1.1		
		ДиапазонВерсий.Вставить("НачальнаяВерсия", "1.1.92.4");
		ДиапазонВерсий.Вставить("КонечнаяВерсия", "1.1.115.1");
		
	ИначеЕсли ИмяТекущейКонфигурации = "управлениеторговлейдляказахстана" Тогда// УТКЗ 2.2		
		ДиапазонВерсий.Вставить("НачальнаяВерсия", "2.2.17.4");
		ДиапазонВерсий.Вставить("КонечнаяВерсия", "2.2.18.5");
		
		ИначеЕсли ИмяТекущейКонфигурации = "управлениеторговымпредприятиемдляказахстана" Тогда// УТПКЗ 2.2		
		ДиапазонВерсий.Вставить("НачальнаяВерсия", "2.0.13.10");
		ДиапазонВерсий.Вставить("КонечнаяВерсия", "2.0.16.1");
	                                             
	КонецЕсли;
	
	Возврат ДиапазонВерсий;
КонецФункции

Функция ПоддерживаемаяКонфигурация() 
	ПоддерживаемаяКонф = Новый Структура;
	МассивИменПоддерживаемыхКонфигураций = Новый Массив;
	МассивИменПоддерживаемыхКонфигураций.Добавить("управлениеторговлей");
	МассивИменПоддерживаемыхКонфигураций.Добавить("управлениепроизводственнымпредприятием");
	МассивИменПоддерживаемыхКонфигураций.Добавить("комплекснаяавтоматизация");
	МассивИменПоддерживаемыхКонфигураций.Добавить("управлениеторговлейбазовая");
	МассивИменПоддерживаемыхКонфигураций.Добавить("управлениеторговлейдляказахстана");
	МассивИменПоддерживаемыхКонфигураций.Добавить("управлениеторговымпредприятиемдляказахстана");

	
	ПоддерживаемаяКонф.Вставить("МассивИменКонфигураций", МассивИменПоддерживаемыхКонфигураций);
	ПоддерживаемаяКонф.Вставить("СинонимКонфигурации", "УТ 10.3, УПП 1.3, КА 1.1, УТКЗ 2.2, УТПКЗ 2.0");
	Возврат ПоддерживаемаяКонф;
КонецФункции

Функция ИнформацияСовместимости() Экспорт
	
	ИмяТекущейКонфигурации = НРег(СокрЛП(Метаданные.Имя));
	ВерсияТекущейКонфигурации = Метаданные.Версия;
	
	ПоддерживаемаяКонфигурация = ПоддерживаемаяКонфигурация();
	ПоддерживаемыеВерсии = ПоддерживаемыеВерсииКонфигурации(ИмяТекущейКонфигурации);
	
	флСоответствуетКонфигурации = Ложь;
	Для Каждого Строка Из ПоддерживаемаяКонфигурация.МассивИменКонфигураций Цикл
		Если Строка = ИмяТекущейКонфигурации Тогда
			флСоответствуетКонфигурации = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
		
	флСоответствуетВерсии = Ложь;
	Если флСоответствуетКонфигурации Тогда
		ВерсияТекущейКонфигурации_3знака = ПолучитьВерсиюКонфигурации(ВерсияТекущейКонфигурации);
		Если ВерсияТекущейКонфигурации_3знака >= ПолучитьВерсиюКонфигурации(ПоддерживаемыеВерсии.НачальнаяВерсия)
			И ВерсияТекущейКонфигурации_3знака <= ПолучитьВерсиюКонфигурации(ПоддерживаемыеВерсии.КонечнаяВерсия) Тогда
			флСоответствуетВерсии = Истина;
		КонецЕсли
	КонецЕсли;
	
	ИнформацияСовместимости = Новый Структура;
	ИнформацияСовместимости.Вставить("ВерсияИнтеграции",					ВерсияИнтеграции());
	ИнформацияСовместимости.Вставить("ВерсияAPI",							ВерсияAPI());
	ИнформацияСовместимости.Вставить("ПоддерживаемаяКонфигурацияМассивИмен",ПоддерживаемаяКонфигурация.МассивИменКонфигураций);
	ИнформацияСовместимости.Вставить("ПоддерживаемаяКонфигурацияСиноним",	ПоддерживаемаяКонфигурация.СинонимКонфигурации);
	ИнформацияСовместимости.Вставить("флСоответствуетКонфигурации",			флСоответствуетКонфигурации);
	ИнформацияСовместимости.Вставить("ПоддерживаемыеВерсииКонфигурации",	?(флСоответствуетКонфигурации,ПоддерживаемыеВерсии.НачальнаяВерсия+"-"+ПоддерживаемыеВерсии.КонечнаяВерсия,"Не соответствует конфигурации"));
	ИнформацияСовместимости.Вставить("флСоответствуетВерсии",				флСоответствуетВерсии); 
	
	Возврат ИнформацияСовместимости;
КонецФункции

Функция ПолучитьВерсиюКонфигурации_3_знака(ВерсияТекущейКонфигурации) 
	
	ВерсияВМассив =  РазложитьСтрокуВМассивПодстрок(ВерсияТекущейКонфигурации, ".");
	Версия = ВерсияВМассив[0]
	+?(СтрДлина(ВерсияВМассив[1])=1,"0"+ВерсияВМассив[1],ВерсияВМассив[1])
	+?(СтрДлина(ВерсияВМассив[2])=1,"0"+ВерсияВМассив[2],ВерсияВМассив[2])
	+?(СтрДлина(ВерсияВМассив[3])=1,"0"+ВерсияВМассив[3],ВерсияВМассив[3]);
	Возврат Число(СтрЗаменить(Версия,".",""));	
 
КонецФункции

Функция РазложитьСтрокуВМассивПодстрок(Знач Стр, Разделитель = ",")
	
	МассивСтрок = Новый Массив();
	Если Разделитель = " " Тогда
		Стр = СокрЛП(Стр);
		Пока 1 = 1 Цикл
			Поз = Найти(Стр, Разделитель);
			Если Поз = 0 Тогда
				МассивСтрок.Добавить(Стр);
				Возврат МассивСтрок;
			КонецЕсли;
			МассивСтрок.Добавить(Лев(Стр, Поз - 1));
			Стр = СокрЛ(Сред(Стр, Поз));
		КонецЦикла;
	Иначе
		ДлинаРазделителя = СтрДлина(Разделитель);
		Пока 1 = 1 Цикл
			Поз = Найти(Стр, Разделитель);
			Если Поз = 0 Тогда
				Если (СокрЛП(Стр) <> "") Тогда
					МассивСтрок.Добавить(Стр);
				КонецЕсли;
				Возврат МассивСтрок;
			КонецЕсли;
			МассивСтрок.Добавить(Лев(Стр,Поз - 1));
			Стр = Сред(Стр, Поз + ДлинаРазделителя);
		КонецЦикла;
	КонецЕсли;
	
КонецФункции

Функция ПолучитьВерсиюКонфигурации(ВерсияТекущейКонфигурации)
	
	ВерсияВМассив = РазложитьСтрокуВМассивПодстрок(ВерсияТекущейКонфигурации, ".");
	
	Версия = ВерсияВМассив[0]
	+ ДополнитьСтрокуЛидирующимиНулями(ВерсияВМассив[1], 3)
	+ ДополнитьСтрокуЛидирующимиНулями(ВерсияВМассив[2], 3)
	+ ДополнитьСтрокуЛидирующимиНулями(ВерсияВМассив[3], 3);

	Возврат Число(Версия);	
	
КонецФункции

Функция ДополнитьСтрокуЛидирующимиНулями(Строка, ДоДлины)
	
	ДлинаСтроки = СтрДлина(СокрЛП(Строка));
	
	Для Сч = ДлинаСтроки По ДоДлины - 1 Цикл
	    Строка = "0" + Строка;			
	КонецЦикла; 
	
	Возврат Строка;

КонецФункции

#КонецОбласти

#Область МетаданныеКонфигурации
Функция Конф_ПроверкаСоответствияИспользуемойКонфигурации() Экспорт
	// 
	//ИмяКонфигурации = НРег(СокрЛП(Метаданные.Имя));	
	//Возврат ИмяКонфигурации = "управлениеторговлей";
	Результат = Ложь;	
	ИнформацияСовместимости = ИнформацияСовместимости();
	Если ИнформацияСовместимости.флСоответствуетКонфигурации 
		И ИнформацияСовместимости.флСоответствуетВерсии Тогда
		Результат = Истина;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция Конф_ПрефиксКонфигурации() Экспорт
	Возврат "УТ_10_3";
КонецФункции

Функция Конф_ПолучитьМетаданныеНСИ() Экспорт
	// Номенклатура
	МетаданныеНоменклатура = Новый Структура;
	МетаданныеНоменклатура.Вставить("ИмяСправочника", "Номенклатура");
	МетаданныеНоменклатура.Вставить("БазоваяЕдиницаИзмерения", "ЕдиницаХраненияОстатков");
	
	// Характеристики
	МетаданныеХарактеристики = Новый Структура;
	МетаданныеХарактеристики.Вставить("Использование", Истина);
	МетаданныеХарактеристики.Вставить("ИмяСправочника", "ХарактеристикиНоменклатуры");
	МассивВладельцев = Новый Массив;
	МассивВладельцев.Добавить("Номенклатура");
	МетаданныеХарактеристики.Вставить("Владельцы", МассивВладельцев);
	
	// Серии
	МетаданныеСерии = Новый Структура;
	МетаданныеСерии.Вставить("Использование", Истина);
	МетаданныеСерии.Вставить("ИмяСправочника", "СерииНоменклатуры");
	МассивВладельцев = Новый Массив;
	МассивВладельцев.Добавить("Номенклатура");
	МетаданныеСерии.Вставить("Владельцы", МассивВладельцев);
	
	// Серийные номера
	МетаданныеСерийныеНомера = Новый Структура;
	МетаданныеСерийныеНомера.Вставить("Использование", Истина);
	МетаданныеСерийныеНомера.Вставить("ИмяСправочника", "СерийныеНомера");
	МассивВладельцев = Новый Массив;
	МассивВладельцев.Добавить("Номенклатура");
	МетаданныеСерийныеНомера.Вставить("Владельцы", МассивВладельцев);
	
	// Единицы измерения
	МетаданныеЕдиницыИзмерения = Новый Структура;
	МетаданныеЕдиницыИзмерения.Вставить("ИмяСправочника", "ЕдиницыИзмерения");
	
	// Контрагенты
	МетаданныеКонтрагенты = Новый Структура;
	МетаданныеКонтрагенты.Вставить("ИмяСправочника", "Контрагенты");
	
	// Склады
	МетаданныеСклады = Новый Структура;
	МетаданныеСклады.Вставить("ИмяСправочника", "Склады");
	
	// Типы цен
	МетаданныеТипыЦен = Новый Структура;
	МетаданныеТипыЦен.Вставить("ИмяСправочника", "ТипыЦенНоменклатуры");
	
	// Штрихкоды 
	МетаданныеШтрихкоды = Новый Структура;
	МетаданныеШтрихкоды.Вставить("Путь_ОбъектМетаданных", "РегистрСведений.Штрихкоды");
	РеквизитыШК = Новый Структура;
	РеквизитыШК.Вставить("Номенклатура",     "Владелец");
	РеквизитыШК.Вставить("Штрихкод",         "Штрихкод");
	РеквизитыШК.Вставить("Характеристика",   "ХарактеристикаНоменклатуры");
	РеквизитыШК.Вставить("ЕдиницаИзмерения", "ЕдиницаИзмерения");
	РеквизитыШК.Вставить("Серия",            "СерияНоменклатуры");
	МетаданныеШтрихкоды.Вставить("Реквизиты", РеквизитыШК);
	
	
	
	// Алкономенклатура
	МетаданныеАлкоНоменклатура = Новый Структура;	
	МетаданныеАлкоНоменклатура.Вставить("ИмяСправочника", "КлассификаторАлкогольнойПродукцииЕГАИС");
	МетаданныеАлкоНоменклатура.Вставить("Использование", (Метаданные.Справочники.Найти(МетаданныеАлкоНоменклатура.ИмяСправочника) <> Неопределено));
	РеквизитыАлко = Новый Структура;
	РеквизитыАлко.Вставить("АлкоКод",              "Код");
	РеквизитыАлко.Вставить("АлкоНаименование",     "Наименование");
	РеквизитыАлко.Вставить("АлкоОбъем",            "Объем");
	РеквизитыАлко.Вставить("АлкоКрепость",         "Крепость");
	РеквизитыАлко.Вставить("АлкоВидПродукции",     "ВидПродукции.Наименование");
	РеквизитыАлко.Вставить("АлкоКодВидаПродукции", "ВидПродукции.КодВидаПродукции");
	РеквизитыАлко.Вставить("АлкоТипПродукции",     "ТипПродукции");
	РеквизитыАлко.Вставить("АлкоПроизводитель",    "Производитель.Наименование");
	РеквизитыАлко.Вставить("АлкоИмпортер",         "Импортер.Наименование");
	МетаданныеАлкоНоменклатура.Вставить("Реквизиты", РеквизитыАлко);
	
	МетаданныеНСИ = Новый Структура();
	МетаданныеНСИ.Вставить("Номенклатура",     МетаданныеНоменклатура);
	МетаданныеНСИ.Вставить("Характеристики",   МетаданныеХарактеристики);
	МетаданныеНСИ.Вставить("Серии",            МетаданныеСерии);
	МетаданныеНСИ.Вставить("СерийныеНомера",   МетаданныеСерийныеНомера);
	МетаданныеНСИ.Вставить("ЕдиницыИзмерения", МетаданныеЕдиницыИзмерения);
	МетаданныеНСИ.Вставить("Контрагенты",      МетаданныеКонтрагенты);
	МетаданныеНСИ.Вставить("Склады",           МетаданныеСклады);
	МетаданныеНСИ.Вставить("ТипыЦен",          МетаданныеТипыЦен);
	МетаданныеНСИ.Вставить("Штрихкоды",        МетаданныеШтрихкоды);
	МетаданныеНСИ.Вставить("АлкоНоменклатура", МетаданныеАлкоНоменклатура);
	
	Возврат МетаданныеНСИ;
	
КонецФункции

Функция Конф_ИспользоватьХарактеристикиНоменклатуры() Экспорт
	Возврат Константы.ИспользоватьХарактеристикиНоменклатуры.Получить();
КонецФункции

Функция Конф_ПолучитьПустуюСсылкуСправочника(ТипСправочника) Экспорт
	ПустаяСсылка = Неопределено;
	Если ТипСправочника = "ОсновнаяЦена" Тогда
		ПустаяСсылка = Справочники.ТипыЦенНоменклатуры.ПустаяСсылка();	
	КонецЕсли;
	
	Возврат ПустаяСсылка;
КонецФункции

Функция Конф_ПолучитьСписокИспользуемыхСправочников() Экспорт
	
	СписокВыбора = Новый СписокЗначений;
	СписокВыбора.Добавить("Номенклатура",   "Номенклатура");	
	Если Константы.ИспользоватьХарактеристикиНоменклатуры.Получить() Тогда
		СписокВыбора.Добавить("Характеристики", "Характеристики номенклатуры");
	КонецЕсли;	
	СписокВыбора.Добавить("Контрагенты",    "Контрагенты");
	СписокВыбора.Добавить("Склады",         "Склады (места хранения)");	
	СписокВыбора.Добавить("Остатки",        "Остатки номенклатуры на складах");
	СписокВыбора.Добавить("Цены",           "Цены номенклатуры");
	Если Константы.ИспользоватьСерииНоменклатуры.Получить() Тогда
		СписокВыбора.Добавить("Серии",          "Серии номенклатуры");
	КонецЕсли;
	СписокВыбора.Добавить("ДопРеквизиты",           "Дополнительные реквизиты");
	
	Возврат СписокВыбора;
	
КонецФункции

Функция ПолучитьДопРеквизитыПредставленияДокумента(ИмяДокумента1С = Неопределено) Экспорт
	
	СписокРеквизитов = Новый СписокЗначений;
		
	Если ИмяДокумента1С = Неопределено Тогда	// если не указано имя документа, то значит запрос пришел от формы обмена	
		СписокРеквизитов.Добавить("Контрагент","Контрагент");
		СписокРеквизитов.Добавить("Склад","Склад");
		СписокРеквизитов.Добавить("Сумма","Сумма");

	ИначеЕсли ИмяДокумента1С = "ПоступлениеТоваровУслуг" Тогда
		СписокРеквизитов.Добавить("Контрагент","Контрагент");
		СписокРеквизитов.Добавить("СкладОрдер","Склад");
		СписокРеквизитов.Добавить("СуммаДокумента","Сумма");

	ИначеЕсли  ИмяДокумента1С = "ЗаказПоставщику" Тогда
		СписокРеквизитов.Добавить("Контрагент","Контрагент");
		СписокРеквизитов.Добавить("Склад","Склад");
		
	ИначеЕсли ИмяДокумента1С = "ИнвентаризацияТоваровНаСкладе" Тогда		
		СписокРеквизитов.Добавить("Склад","Склад");
		
	ИначеЕсли  ИмяДокумента1С = "ВозвратТоваровПоставщику" Тогда
		СписокРеквизитов.Добавить("Контрагент","Контрагент");
		СписокРеквизитов.Добавить("Склад","Склад");
		СписокРеквизитов.Добавить("СуммаДокумента","Сумма");
	КонецЕсли;
	
	Возврат СписокРеквизитов;
	
КонецФункции

#КонецОбласти

#Область МакетыСКД

Функция ПолучитьМакетСКД(ИмяТаблицы) Экспорт
	
	ИмяТекущейКонфигурации = НРег(СокрЛП(Метаданные.Имя));
	
	Если (ИмяТекущейКонфигурации = "управлениепроизводственнымпредприятием" // УПП 1.3
		ИЛИ ИмяТекущейКонфигурации = "комплекснаяавтоматизация") // КА 1.1
		И ИмяТаблицы = "Номенклатура" Тогда		
		Макет = ПолучитьМакет("УПП13_"+ИмяТаблицы);
		
	ИначеЕсли (ИмяТекущейКонфигурации = "управлениеторговлей"
		ИЛИ ИмяТекущейКонфигурации = "управлениеторговлейбазовая")
		И ИмяТаблицы = "Номенклатура"
		И (ПолучитьВерсиюКонфигурации(Метаданные.Версия) >= 10003017004
		И ПолучитьВерсиюКонфигурации(Метаданные.Версия) <= 10003034001 
		ИЛИ (Метаданные.ФункциональныеОпции.Найти("ВестиСведенияДляДекларацийПоАлкогольнойПродукции") <> Неопределено И НЕ ПолучитьФункциональнуюОпцию("ВестиСведенияДляДекларацийПоАлкогольнойПродукции"))) Тогда
		Макет = ПолучитьМакет(ИмяТаблицы+"_БезАлко");
	ИначеЕсли (ИмяТекущейКонфигурации = "управлениеторговлейдляказахстана" ИЛИ ИмяТекущейКонфигурации = "управлениеторговымпредприятиемдляказахстана")
		И ИмяТаблицы = "Номенклатура" Тогда
		Макет = ПолучитьМакет(ИмяТаблицы+"_БезАлко");
	ИначеЕсли (ИмяТекущейКонфигурации = "управлениеторговлейдляказахстана" ИЛИ ИмяТекущейКонфигурации = "управлениеторговымпредприятиемдляказахстана")
		И ИмяТаблицы = "Контрагенты" Тогда
		Макет = ПолучитьМакет("УТКЗ_"+ИмяТаблицы);
	Иначе
		
		Макет = ПолучитьМакет(ИмяТаблицы);
	КонецЕсли;
	
	Возврат Макет;
	
КонецФункции

#КонецОбласти

#Область Из_ядра
Процедура ГлЯдро_ПодобратьКоличествоСуммированием(СтруктураДанных)
	
	Строка1С = СтруктураДанных.Таблица1С.Получить(СтруктураДанных.ИндексСтроки1С);
	СтрокаMS = СтруктураДанных.ТаблицаMS.Получить(СтруктураДанных.ИндексСтрокиMS);
	
	Строка1С[СтруктураДанных.ПодборКоличества_Колонка1С] = Строка1С[СтруктураДанных.ПодборКоличества_Колонка1С] + СтрокаMS[СтруктураДанных.ПодборКоличества_КолонкаMS];
	
	СтруктураДанных.Вставить("СтрокаMSРазнесена", Истина);
	
КонецПроцедуры

Процедура ГлЯдро_ПодобратьКоличествоСКонтролемПлана(СтруктураДанных)
	
	Если СтруктураДанных.Таблица1С.Колонки.Найти(СтруктураДанных.ПодборКоличества_Колонка1С_План) = Неопределено Тогда
		// Добавляем колонку для плана, переносим в нее факт, и очищаем факт.
		// Срабатывает только при первом обращении по первой строке, данные теряться не должны
		СтруктураДанных.Таблица1С.Колонки.Добавить(СтруктураДанных.ПодборКоличества_Колонка1С_План, Новый ОписаниеТипов("Число"));
		Для Каждого Строка1С Из СтруктураДанных.Таблица1С Цикл
			//Трошин И.В. 26.12.2017 (
			КолонкаИсходныйПлан = "";
			Если НЕ СтруктураДанных.Свойство("ПодборКоличества_Колонка1С_ИсходныйПлан",КолонкаИсходныйПлан) Тогда
				КолонкаИсходныйПлан = СтруктураДанных.ПодборКоличества_Колонка1С;
			КонецЕсли;
			//Трошин И.В. 26.12.2017 )
			Строка1С[СтруктураДанных.ПодборКоличества_Колонка1С_План] = Строка1С[КолонкаИсходныйПлан];
			Строка1С[СтруктураДанных.ПодборКоличества_Колонка1С] = 0;
		КонецЦикла;
	КонецЕсли;
	
	Если СтруктураДанных.ТаблицаMS.Колонки.Найти(СтруктураДанных.ПодборКоличества_КолонкаMS + "_Остаток") = Неопределено Тогда
		// Добавляем колонку для остатка распределения, переносим в нее весь факт ТСД.
		// Срабатывает только при первом обращении по первой строке, данные теряться не должны
		СтруктураДанных.ТаблицаMS.Колонки.Добавить(СтруктураДанных.ПодборКоличества_КолонкаMS + "_Остаток", Новый ОписаниеТипов("Число"));
		Для Каждого СтрокаMS Из СтруктураДанных.ТаблицаMS Цикл
			СтрокаMS[СтруктураДанных.ПодборКоличества_КолонкаMS + "_Остаток"] = СтрокаMS[СтруктураДанных.ПодборКоличества_КолонкаMS];
		КонецЦикла;
	КонецЕсли;
	
	Строка1С = СтруктураДанных.СтрокаДокумента1С;
	СтрокаMS = СтруктураДанных.ТаблицаMS.Получить(СтруктураДанных.ИндексСтрокиMS);
	
	ТекущееФактическоеКоличество_ТСД = СтрокаMS[СтруктураДанных.ПодборКоличества_КолонкаMS];
	КоличествоДляРаспределения_ТСД  = СтрокаMS[СтруктураДанных.ПодборКоличества_КолонкаMS + "_Остаток"];
	ТекущееПлановоеКоличество_1С    = Строка1С[СтруктураДанных.ПодборКоличества_Колонка1С_План];
	ТекущееФактическоеКоличество_1С = Строка1С[СтруктураДанных.ПодборКоличества_Колонка1С];
	СвободноеКоличество_1С = ?(ТекущееПлановоеКоличество_1С = 0, КоличествоДляРаспределения_ТСД, ТекущееПлановоеКоличество_1С - ТекущееФактическоеКоличество_1С);
	
	КоличествоРаспределено_1C   = Мин(СвободноеКоличество_1С, КоличествоДляРаспределения_ТСД);
	КоличествоНеРаспределено_ТСД = КоличествоДляРаспределения_ТСД - КоличествоРаспределено_1C;
	
	ТекущееФактическоеКоличество_1С = ТекущееФактическоеКоличество_1С + КоличествоРаспределено_1C;
	
	СтрокаMS[СтруктураДанных.ПодборКоличества_КолонкаMS + "_Остаток"] = КоличествоНеРаспределено_ТСД;
	Строка1С[СтруктураДанных.ПодборКоличества_Колонка1С] = ТекущееФактическоеКоличество_1С;
	
	СтруктураДанных.Вставить("СтрокаMSРазнесена", КоличествоНеРаспределено_ТСД = 0);
	
КонецПроцедуры
			
Функция ГлЯдро_ШтрихКодЕстьВБазе1С(Штрихкод, СтруктураХраненияШК, Номенклатура = Неопределено, ЕдиницаИзмерения = Неопределено) Экспорт
			
	Запрос = Новый Запрос("ВЫБРАТЬ
							|    Штрихкоды." + СтруктураХраненияШК.ШК_ИзмерениеШтрихкода + " КАК Штрихкод,
							|    Штрихкоды." + СтруктураХраненияШК.ШК_ИзмерениеНоменклатуры + " КАК Номенклатура,
							|    Штрихкоды." + СтруктураХраненияШК.ШК_ИзмерениеУпаковки + " КАК ЕдиницаИзмерения
							|ИЗ
							|    " + СтруктураХраненияШК.ШК_ОбъектМетаданных + " КАК Штрихкоды
							|ГДЕ
							|	Штрихкоды." + СтруктураХраненияШК.ШК_ИзмерениеШтрихкода + " = &Штрихкод");   
	
	Запрос.УстановитьПараметр("ШтрихКод", Штрихкод);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Номенклатура = Выборка.Номенклатура;	
		ЕдиницаИзмерения = ?(ЗначениеЗаполнено(Выборка.ЕдиницаИзмерения), Выборка.ЕдиницаИзмерения, Номенклатура.ЕдиницаХраненияОстатков);
	КонецЕсли;	
	
	Возврат (Выборка.Количество() <> 0);	
	
КонецФункции

Функция ГлЯдро_ПолучитьДанныеШтрихКода(Штрихкод) Экспорт
	
	ДанныеШК = Неопределено;
	
	Запрос = Новый Запрос;
	Запрос.Параметры.Вставить("Штрихкод", Штрихкод); 
	
	Запрос.Текст = "ВЫБРАТЬ
	|	Штрихкоды.Владелец,
	|	Штрихкоды.ТипШтрихкода,
	|	Штрихкоды.ЕдиницаИзмерения,
	|	Штрихкоды.ХарактеристикаНоменклатуры,
	|	Штрихкоды.СерияНоменклатуры,
	|	Штрихкоды.Качество
	|ИЗ
	|	РегистрСведений.Штрихкоды КАК Штрихкоды
	|ГДЕ
	|	Штрихкоды.Штрихкод = &Штрихкод";
		   
	ВыборкаЗапроса = Запрос.Выполнить().Выбрать();

	Если ВыборкаЗапроса.Следующий() Тогда
		ДанныеШК = Новый Структура;
		ДанныеШК.Вставить("Владелец", 					ВыборкаЗапроса.Владелец);
		ДанныеШК.Вставить("ТипШтрихкода", 				ВыборкаЗапроса.ТипШтрихкода);
		ДанныеШК.Вставить("ЕдиницаИзмерения", 			ВыборкаЗапроса.ЕдиницаИзмерения);
		ДанныеШК.Вставить("ХарактеристикаНоменклатуры", 	ВыборкаЗапроса.ХарактеристикаНоменклатуры);
		ДанныеШК.Вставить("СерияНоменклатуры", 			ВыборкаЗапроса.СерияНоменклатуры);
		ДанныеШК.Вставить("Качество", 					ВыборкаЗапроса.Качество);			
	КонецЕсли;
	
	Возврат ДанныеШК;
	
КонецФункции

Функция ГлЯдро_ПолучитьЕдиницуИзмеренияПоУмолчанию(ТоварСсылка) Экспорт
	
	ДанныеШК = Неопределено;

	Запрос = Новый Запрос("ВЫБРАТЬ
	|	ЕдиницыИзмерения.Ссылка
	|ИЗ
	|	Справочник.ЕдиницыИзмерения КАК ЕдиницыИзмерения
	|ГДЕ
	|	ЕдиницыИзмерения.Владелец = &Владелец
	|	И ЕдиницыИзмерения.ЕдиницаПоКлассификатору = &ЕдиницаПоКлассификатору
	|
	|УПОРЯДОЧИТЬ ПО
	|	ЕдиницыИзмерения.Коэффициент");
							  
	Запрос.Параметры.Вставить("Владелец", ТоварСсылка); 							  
	Запрос.Параметры.Вставить("ЕдиницаПоКлассификатору", ТоварСсылка.БазоваяЕдиницаИзмерения);

	ВыборкаЗапроса = Запрос.Выполнить().Выбрать();

	Если ВыборкаЗапроса.Следующий() Тогда
		ДанныеШК = Новый Структура;
		ДанныеШК.Вставить("ЕдиницаИзмерения", ВыборкаЗапроса.Ссылка);
	КонецЕсли;
	
	Возврат ДанныеШК;
	
КонецФункции

#КонецОбласти

#Область ОбработчикиДокументов

#Область УТ_10_3_Общие_Обработчики

Процедура УТ_10_3_Общий_ПередЗаполнениемДокумента	(СтруктураПараметров) Экспорт
КонецПроцедуры

Процедура УТ_10_3_Общий_ПослеЗаполненияДокумента	(СтруктураПараметров) Экспорт
КонецПроцедуры

Процедура УТ_10_3_Общий_ПередЗаполнениемТЧ			(СтруктураПараметров) Экспорт
КонецПроцедуры

Процедура УТ_10_3_Общий_ПередЗаполненемСтрокиТЧ		(СтруктураПараметров) Экспорт
	
	//Общий_ПередЗаполнениемСтрокиТЧ(СтруктураПараметров);
	
	// ищем или создаем новую алкономенклатуру по алкокоду
	УТ_10_3_ДобавлениеНовойАлкоНоменклатуры(СтруктураПараметров);
	
	// создаем новую номенклатуру, если приняли на ТСД неизвестный товар
	УТ_10_3_СоздатьНовуюНоменклатуру(СтруктураПараметров);		
	
	УТ_10_3_ЗаписатьШтрихкодНоменклатуры(СтруктураПараметров);
	
КонецПроцедуры

Процедура УТ_10_3_Общий_ПослеЗаполненияСтрокиТЧ		(СтруктураПараметров) Экспорт
	
	СтрокаДокумента = СтруктураПараметров.СтрокаДокумента;
	Док1СРезультат	= СтруктураПараметров.Док1СРезультат;
	ИмяТЧ 			= СтруктураПараметров.СтрокаНастройки.НастройкаТЧСтрокой;
	КолонкиТЧ = Док1СРезультат[ИмяТЧ].ВыгрузитьКолонки().Колонки;
	СтруктураДанных = СтруктураПараметров.СтруктураПоискаКлючаСвязи;
	ТекущаяСтрокаMS = СтруктураДанных.ТаблицаMS[СтруктураДанных.ИндексСтрокиMS];
	
	Если СтруктураДанных.СтрокаНастройкиТЧ.ОсновнаяТабличнаяЧасть И 
		 СтруктураДанных.ЭтоНоваяСтрока1С Тогда
		// Расчитать новый ключ
		Если СтруктураДанных.Таблица1С.Количество() = 1 Тогда
			СтруктураДанных.СтрокаДокумента1С.КлючСвязи = 0;	
		Иначе
			
			Запрос = Новый Запрос;
			Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
			Запрос.Текст = "ВЫБРАТЬ
							|	Товары.КлючСвязи КАК КлючСвязи
							|ПОМЕСТИТЬ ТаблИсточника
							|ИЗ
							|	&мТаблица КАК Товары;
							|
							|ВЫБРАТЬ 
							|	МАКСИМУМ(ТаблИсточника.КлючСвязи) КАК КлючСвязи 
							|ИЗ
							|	ТаблИсточника;";
			
			Запрос.УстановитьПараметр("мТаблица", СтруктураДанных.Таблица1С);		
			Выборка = Запрос.Выполнить().Выбрать();
			
			Если Выборка.Следующий() Тогда
				СтруктураДанных.СтрокаДокумента1С.КлючСвязи = Выборка.КлючСвязи + 1;
			Иначе
				СтруктураДанных.СтрокаДокумента1С.КлючСвязи = 0;
			КонецЕсли;
		
		КонецЕсли;

	КонецЕсли;
	
	
	Если СтруктураДанных.СтрокаНастройкиТЧ.СопоставлятьСОсновнойТЧ Тогда
		
		Если СтруктураДанных.ЭтоНоваяСтрока1С Тогда
			
			Отбор = Новый Структура();
			Отбор.Вставить("Таблица1СПриемник", СтруктураДанных.МетаданныеПриемника.Имя);
			Отбор.Вставить("ИндексСтрокиMS", СтруктураДанных.ИндексСтрокиMS);
			
			СтрокиТЧ = СтруктураДанных.ДанныеДляЗагрузкиПоКлючам.НайтиСтроки(Отбор);
			Если СтрокиТЧ.Количество() > 0 Тогда
				СтрокаТЧ = СтрокиТЧ[0];
				СтрокаОсновнойТЧ = СтруктураДанных.ДокументДляЗаписи.Товары.Получить(СтрокаТЧ.ИндексСтроки1С);
				СтруктураДанных.СтрокаДокумента1С.КлючСвязи = СтрокаОсновнойТЧ.КлючСвязи;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	ВидДокумента 	= ВРег(Док1СРезультат.Метаданные().Имя);
	Если Найти(ВидДокумента, "ЕГАИС") > 0 
		И ТекущаяСтрокаMS.Владелец().Колонки.Найти("АлкоМарк") <> Неопределено И ТекущаяСтрокаMS.АлкоМарк Тогда
		УТ_10_3_ЗаполнитьСопоставлениеНоменклатурыЕГАИС(СтруктураПараметров);
	КонецЕсли;

КонецПроцедуры

Процедура УТ_10_3_Общий_ПослеЗаполненияТЧ			(СтруктураПараметров) Экспорт
КонецПроцедуры

#КонецОбласти

#Область ПоступлениеТоваровУслуг

Функция УТ_10_3_ПоступлениеТоваровУслуг_ПодборКоличества						(СтруктураДанных, ЭтоПроверка = Ложь) Экспорт
	
	Если ЭтоПроверка Тогда
		СтруктураПроверки = Новый Структура("Статус,Сообщение", Истина, СтруктураДанных.ПодборКоличества_Колонка1С);
		Возврат СтруктураПроверки;
	КонецЕсли;
		
	Если СтруктураДанных.КонтрольКоличества Тогда
		СтруктураДанных.Вставить("ПодборКоличества_Колонка1С_План", "CLV_ПланДля_" + СтруктураДанных.ПодборКоличества_Колонка1С);
		ГлЯдро_ПодобратьКоличествоСКонтролемПлана(СтруктураДанных);
	Иначе
		ГлЯдро_ПодобратьКоличествоСуммированием(СтруктураДанных);
	КонецЕсли;
	
	Возврат СтруктураДанных;
	
КонецФункции
// Документ
Процедура УТ_10_3_ПоступлениеТоваровУслуг_ПередЗаполнениемДокумента				(СтруктураПараметров) Экспорт
	УТ_10_3_Общий_ПередЗаполнениемДокумента(СтруктураПараметров);
	
КонецПроцедуры

Процедура УТ_10_3_ПоступлениеТоваровУслуг_ПослеЗаполненияДокумента				(СтруктураПараметров) Экспорт
	
	УТ_10_3_Общий_ПослеЗаполненияДокумента(СтруктураПараметров);		
	
	Док1СРезультат = СтруктураПараметров.Док1СРезультат;
	Док1СОснование = СтруктураПараметров.Док1СОснование;
	
	ИмяТекущейКонфигурации = НРег(СокрЛП(Метаданные.Имя));
		
	
	Если Док1СРезультат.ЭтоНовый() Тогда			

		Если Док1СОснование <> Неопределено И Док1СОснование <> Док1СРезультат Тогда
			Док1СРезультат.Сделка = Док1СОснование.Ссылка;			
			Док1СРезультат.СкладОрдер = Док1СОснование.Склад;
		КонецЕсли;		
		
		// Заполнить реквизиты значениями по умолчанию.
		Если ИмяТекущейКонфигурации = "управлениепроизводственнымпредприятием"
			ИЛИ ИмяТекущейКонфигурации = "комплекснаяавтоматизация" Тогда
			Выполнить("ЗаполнениеДокументов.ЗаполнитьШапкуДокумента(Док1СРезультат, ""Покупка"")");
		Иначе
			Выполнить("ЗаполнениеДокументов.ЗаполнитьШапкуДокумента(Док1СРезультат, глЗначениеПеременной(""глТекущийПользователь""), Константы.ВалютаРегламентированногоУчета.Получить(), ""Покупка"", Неопределено, Неопределено)");
		КонецЕсли;
		
		Выполнить("РегистрироватьЦеныПоставщика = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной(""глТекущийПользователь""), ""РегистрироватьЦеныПоставщика"")");
		
		Если Док1СОснование <> Неопределено И Док1СОснование <> Док1СРезультат 
		   И ТипЗнч(Док1СОснование) = Тип("ДокументОбъект.ПриходныйОрдерНаТовары") Тогда
			Док1СРезультат.ОтражатьВУправленческомУчете = Истина;
		КонецЕсли;

		Если ЗначениеЗаполнено(Док1СРезультат.ДоговорКонтрагента)
		   И Док1СРезультат.ДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомитентом Тогда
			ОтражатьВНалоговомУчете = Ложь;
		КонецЕсли;		
		
	КонецЕсли;		

	ТЧТовары = Док1СРезультат.Товары;
	
	Для каждого СтрокаТабличнойЧасти Из ТЧТовары Цикл
		
		// Заполняем реквизиты табличной части.
		Выполнить("ОбработкаТабличныхЧастей.ЗаполнитьСтавкуНДСТабЧасти(СтрокаТабличнойЧасти, Док1СРезультат, ""Приобретение"")"); 
		
		Если НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.Цена) Тогда
			СтруктураШапкиДокумента = Новый Структура("Контрагент, ТипЦен, ДоговорКонтрагента, ДатаДокумента, ВалютаДокумента, УчитыватьНДС, СуммаВключаетНДС",
			Док1СРезультат.Контрагент, Док1СРезультат.ТипЦен, Док1СРезультат.ДоговорКонтрагента, Док1СРезультат.Дата, Док1СРезультат.ВалютаДокумента, Док1СРезультат.УчитыватьНДС, Док1СРезультат.СуммаВключаетНДС);
			Выполнить("ОбработкаТабличныхЧастей.ЗаполнитьЕдиницуЦенуПокупкиТабЧасти(СтрокаТабличнойЧасти, Док1СРезультат, СтруктураШапкиДокумента, Константы.ВалютаРегламентированногоУчета.Получить())"); 
		КонецЕсли;	
		
		// Рассчитываем реквизиты табличной части.
		Выполнить("ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, Док1СРезультат)");
		Выполнить("ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, Док1СРезультат)");
		
		Выполнить("УчетСерийныхНомеров.ПроверитьСерийныеНомера(СтрокаТабличнойЧасти, Док1СРезультат)");											
		
		// +++ Денвик		
		Если НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.Склад) 
			И ЗначениеЗаполнено(Док1СРезультат.СкладОрдер) Тогда
			СтрокаТабличнойЧасти.Склад = Док1СРезультат.СкладОрдер;
		КонецЕсли;		
		// --- Денвик

	КонецЦикла; 
	
	/// { Александр Лаптев; Старт-ПРО. 03.11.2019 18:35:00 (+)
	Если НЕ Метаданные.Перечисления._СтатусСбораЗаказа.ЗначенияПеречисления.Найти(СтруктураПараметров.ДанныеДокументаMS.ШапкаДокумента.lvСтатусОбработки) = Неопределено Тогда
		Док1СРезультат._СтатусСбораЗаказа = Перечисления._СтатусСбораЗаказа[СтруктураПараметров.ДанныеДокументаMS.ШапкаДокумента.lvСтатусОбработки];
	КонецЕсли;	
	
	Если ОбщегоНазначения.ЕстьРеквизитДокумента("_Сборщик", Док1СРезультат.Метаданные()) Тогда
		Док1СРезультат._Сборщик = СтруктураПараметров.ДанныеДокументаMS.ШапкаДокумента.ИдПользователя;
	КонецЕсли;	
	
	/// { Александр Лаптев; Старт-ПРО. 03.11.2019 18:35:00 (+)
	
	
КонецПроцедуры
//  ТЧ_Товары
Процедура УТ_10_3_ПоступлениеТоваровУслуг_ПередЗаполнениемТЧ_Товары				(СтруктураПараметров) Экспорт
	УТ_10_3_Общий_ПередЗаполнениемТЧ(СтруктураПараметров);	

КонецПроцедуры

Процедура УТ_10_3_ПоступлениеТоваровУслуг_ПередЗаполненемСтрокиТЧ_Товары		(СтруктураПараметров) Экспорт
	УТ_10_3_Общий_ПередЗаполненемСтрокиТЧ(СтруктураПараметров);
	
КонецПроцедуры

Процедура УТ_10_3_ПоступлениеТоваровУслуг_ПослеЗаполненияСтрокиТЧ_Товары		(СтруктураПараметров) Экспорт
	
	УТ_10_3_Общий_ПослеЗаполненияСтрокиТЧ(СтруктураПараметров);
	
	СтрокаТабличнойЧасти = СтруктураПараметров.СтрокаДокумента;
	Док1СРезультат = СтруктураПараметров.Док1СРезультат;		
	Док1СОснование = СтруктураПараметров.Док1СОснование;
		
	СтрокаТабличнойЧасти.Коэффициент = СтрокаТабличнойЧасти.ЕдиницаИзмерения.Коэффициент;
	Если СтрокаТабличнойЧасти.Номенклатура.Весовой = Ложь 
		И Не Найти(СтрокаТабличнойЧасти.ЕдиницаИзмерения.Наименование, "кг") Тогда
		СтрокаТабличнойЧасти.ЕдиницаИзмеренияМест = СтрокаТабличнойЧасти.ЕдиницаИзмерения;
		СтрокаТабличнойЧасти.КоличествоМест = СтрокаТабличнойЧасти.Количество;
	КонецЕсли;

	УТ_10_3_ЗаполнитьСериюНоменклатурыВСтроке(СтруктураПараметров);
	УТ_10_3_ЗаполнитьСерийныйНомерВСтроке(СтруктураПараметров);
	
	Если НЕ Док1СОснование = Неопределено
		И ТипЗнч(Док1СОснование) = Тип("ДокументСсылка.ЗаказПоставщику") Тогда
		СтрокаТабличнойЧасти.ЗаказПоставщику = Док1СОснование;		
	КонецЕсли;
	
КонецПроцедуры

Процедура УТ_10_3_ПоступлениеТоваровУслуг_ПослеЗаполненияТЧ_Товары				(СтруктураПараметров) Экспорт
	
	УТ_10_3_Общий_ПослеЗаполненияТЧ(СтруктураПараметров);
		
КонецПроцедуры
// ТЧ_СерийныеНомера
Процедура УТ_10_3_ПоступлениеТоваровУслуг_ПередЗаполнениемТЧ_СерийныеНомера		(СтруктураПараметров) Экспорт
	УТ_10_3_Общий_ПередЗаполнениемТЧ(СтруктураПараметров);
	
КонецПроцедуры

Процедура УТ_10_3_ПоступлениеТоваровУслуг_ПередЗаполненемСтрокиТЧ_СерийныеНомера(СтруктураПараметров) Экспорт
	УТ_10_3_Общий_ПередЗаполненемСтрокиТЧ(СтруктураПараметров);
	
КонецПроцедуры

Процедура УТ_10_3_ПоступлениеТоваровУслуг_ПослеЗаполненияСтрокиТЧ_СерийныеНомера(СтруктураПараметров) Экспорт
	УТ_10_3_Общий_ПослеЗаполненияСтрокиТЧ(СтруктураПараметров);
	
КонецПроцедуры

Процедура УТ_10_3_ПоступлениеТоваровУслуг_ПослеЗаполненияТЧ_СерийныеНомера		(СтруктураПараметров) Экспорт
	УТ_10_3_Общий_ПослеЗаполненияТЧ(СтруктураПараметров);
	
КонецПроцедуры

#КонецОбласти

#Область ПеремещениеТоваров

Функция УТ_10_3_ПеремещениеТоваров_ПодборКоличества					(СтруктураДанных, ЭтоПроверка = Ложь) Экспорт
	
	Если ЭтоПроверка Тогда
		СтруктураПроверки = Новый Структура("Статус,Сообщение", Истина, СтруктураДанных.ПодборКоличества_Колонка1С);
		Возврат СтруктураПроверки;
	КонецЕсли;
		
	Если СтруктураДанных.КонтрольКоличества Тогда
		СтруктураДанных.Вставить("ПодборКоличества_Колонка1С_План", "CLV_ПланДля_" + СтруктураДанных.ПодборКоличества_Колонка1С);
		ГлЯдро_ПодобратьКоличествоСКонтролемПлана(СтруктураДанных);
	Иначе
		ГлЯдро_ПодобратьКоличествоСуммированием(СтруктураДанных);
	КонецЕсли;
	
	Возврат СтруктураДанных;
	
КонецФункции
// Документ
Процедура УТ_10_3_ПеремещениеТоваров_ПередЗаполнениемДокумента		(СтруктураПараметров) Экспорт
	УТ_10_3_Общий_ПередЗаполнениемДокумента(СтруктураПараметров);
	
КонецПроцедуры

Процедура УТ_10_3_ПеремещениеТоваров_ПослеЗаполненияДокумента		(СтруктураПараметров) Экспорт
	
	УТ_10_3_Общий_ПослеЗаполненияДокумента(СтруктураПараметров);
	
	УТ_10_3_ПеремещениеТоваров_ПослеЗаполненияТЧ_Товары(СтруктураПараметров);	
	
	Док1СРезультат = СтруктураПараметров.Док1СРезультат;
	Док1СОснование = СтруктураПараметров.Док1СОснование;
	
	Если Док1СРезультат.ЭтоНовый() Тогда
		Выполнить("ЗаполнениеДокументов.ЗаполнитьШапкуДокумента(Док1СРезультат, глЗначениеПеременной(""глТекущийПользователь""))");
		
		//Если НЕ ЗначениеЗаполнено(СкладОтправитель) Тогда
		//	СкладОтправитель = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ОсновнойСклад");
		//КонецЕсли;
		//
		//Если НЕ ЗначениеЗаполнено(СкладПолучатель) Тогда
		//	СкладПолучатель  = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ОсновнойСклад");
		//КонецЕсли;		
		
		Если НЕ ЗначениеЗаполнено(Док1СРезультат.ВидОперации) Тогда
			Док1СРезультат.ВидОперации      = ПредопределенноеЗначение("Перечисление.ВидыОперацийПеремещениеТоваров.ТоварыПродукция");
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(Док1СРезультат.НДСвСтоимостиТоваров) Тогда
			Док1СРезультат.НДСвСтоимостиТоваров = ПредопределенноеЗначение("Перечисление.ДействиеНДСВСтоимостиТоваров.НеИзменять");
		КонецЕсли;	
	КонецЕсли;	
	
	ТЧТовары = Док1СРезультат.Товары;
	
	Для каждого СтрокаТабличнойЧасти Из ТЧТовары Цикл
		
		Выполнить("ОбработкаТабличныхЧастей.ЗаполнитьЕдиницуМестТабЧасти(СтрокаТабличнойЧасти, Док1СРезультат);");
		
		УТ_10_3_УстановитьЦенуНоменклатуры(СтрокаТабличнойЧасти, Док1СРезультат);	
		
		СтрокаТабличнойЧасти.Качество = ПредопределенноеЗначение("Справочник.Качество.Новый");		
		
	КонецЦикла;	
	
КонецПроцедуры
// ТЧ_Товары
Процедура УТ_10_3_ПеремещениеТоваров_ПередЗаполнениемТЧ_Товары		(СтруктураПараметров) Экспорт
	УТ_10_3_Общий_ПередЗаполнениемТЧ(СтруктураПараметров);
	
КонецПроцедуры

Процедура УТ_10_3_ПеремещениеТоваров_ПередЗаполненемСтрокиТЧ_Товары	(СтруктураПараметров) Экспорт
	УТ_10_3_Общий_ПередЗаполненемСтрокиТЧ(СтруктураПараметров);
	
КонецПроцедуры

Процедура УТ_10_3_ПеремещениеТоваров_ПослеЗаполненияСтрокиТЧ_Товары	(СтруктураПараметров) Экспорт
	
	УТ_10_3_Общий_ПослеЗаполненияСтрокиТЧ(СтруктураПараметров);
	
	СтрокаТабличнойЧасти = СтруктураПараметров.СтрокаДокумента;
	Док1СРезультат = СтруктураПараметров.Док1СРезультат;	
	
	СтрокаТабличнойЧасти.ЕдиницаИзмеренияМест = СтрокаТабличнойЧасти.ЕдиницаИзмерения;	
	СтрокаТабличнойЧасти.Коэффициент = СтрокаТабличнойЧасти.ЕдиницаИзмерения.Коэффициент;	                                                                            				
	СтрокаТабличнойЧасти.КоличествоМест = СтрокаТабличнойЧасти.Количество;
	
	УТ_10_3_ЗаполнитьСериюНоменклатурыВСтроке(СтруктураПараметров);
				
КонецПроцедуры

Процедура УТ_10_3_ПеремещениеТоваров_ПослеЗаполненияТЧ_Товары		(СтруктураПараметров) Экспорт
	
	УТ_10_3_Общий_ПослеЗаполненияТЧ(СтруктураПараметров);	
	
КонецПроцедуры

#КонецОбласти

#Область ВозвратТоваровПоставщику

Функция УТ_10_3_ВозвратТоваровПоставщику_ПодборКоличества					(СтруктураДанных, ЭтоПроверка = Ложь) Экспорт
	
	Если ЭтоПроверка Тогда
		СтруктураПроверки = Новый Структура("Статус,Сообщение", Истина, СтруктураДанных.ПодборКоличества_Колонка1С);
		Возврат СтруктураПроверки;
	КонецЕсли;
		
	Если СтруктураДанных.КонтрольКоличества Тогда
		СтруктураДанных.Вставить("ПодборКоличества_Колонка1С_План", "CLV_ПланДля_" + СтруктураДанных.ПодборКоличества_Колонка1С);
		ГлЯдро_ПодобратьКоличествоСКонтролемПлана(СтруктураДанных);
	Иначе
		ГлЯдро_ПодобратьКоличествоСуммированием(СтруктураДанных);
	КонецЕсли;
	
	Возврат СтруктураДанных;
	
КонецФункции
// Документ
Процедура УТ_10_3_ВозвратТоваровПоставщику_ПередЗаполнениемДокумента		(СтруктураПараметров) Экспорт
	УТ_10_3_Общий_ПередЗаполнениемДокумента(СтруктураПараметров);	
	
КонецПроцедуры

Процедура УТ_10_3_ВозвратТоваровПоставщику_ПослеЗаполненияДокумента			(СтруктураПараметров) Экспорт
	
	УТ_10_3_Общий_ПослеЗаполненияДокумента(СтруктураПараметров);
	
	УТ_10_3_ВозвратТоваровПоставщику_ПослеЗаполненияТЧ_Товары(СтруктураПараметров);	
	
	Док1СРезультат = СтруктураПараметров.Док1СРезультат;
	Если Док1СРезультат.ЭтоНовый() Тогда 
		ВЫполнить("ЗаполнениеДокументов.ЗаполнитьШапкуДокумента(Док1СРезультат, ПараметрыСеанса.ТекущийПользователь, Константы.ВалютаРегламентированногоУчета.Получить(), ""Покупка"");");		
		
		Если Док1СРезультат.Дата >= '20060101'
			И Не Док1СРезультат.ДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомитентом 
			И Не Док1СРезультат.ДоговорКонтрагента.УчетАгентскогоНДС Тогда
			Док1СРезультат.ПоставщикуВыставляетсяСчетФактураНаВозврат = Истина;
		КонецЕсли;
	КонецЕсли;	
	
	ТЧТовары = Док1СРезультат.Товары;
	
	Для каждого СтрокаТабличнойЧасти Из ТЧТовары Цикл
		
		// Заполняем реквизиты табличной части.
		Выполнить("ОбработкаТабличныхЧастей.ЗаполнитьСтавкуНДСТабЧасти(СтрокаТабличнойЧасти, Док1СРезультат, ""Приобретение"")"); 
		
		Если НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.Цена) Тогда
			СтруктураШапкиДокумента = Новый Структура("Контрагент, ТипЦен, ДоговорКонтрагента, ДатаДокумента, ВалютаДокумента, УчитыватьНДС, СуммаВключаетНДС",
			Док1СРезультат.Контрагент, Док1СРезультат.ТипЦен, Док1СРезультат.ДоговорКонтрагента, Док1СРезультат.Дата, Док1СРезультат.ВалютаДокумента, Док1СРезультат.УчитыватьНДС, Док1СРезультат.СуммаВключаетНДС);
			Выполнить("ОбработкаТабличныхЧастей.ЗаполнитьЕдиницуЦенуПокупкиТабЧасти(СтрокаТабличнойЧасти, Док1СРезультат, СтруктураШапкиДокумента, Константы.ВалютаРегламентированногоУчета.Получить())"); 
		КонецЕсли;	
		
		// Рассчитываем реквизиты табличной части.
		Выполнить("ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, Док1СРезультат)");
		Выполнить("ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, Док1СРезультат)");
		
		Выполнить("УчетСерийныхНомеров.ПроверитьСерийныеНомера(СтрокаТабличнойЧасти, Док1СРезультат)");							
		
		СтрокаТабличнойЧасти.Качество = ПредопределенноеЗначение("Справочник.Качество.Новый");
		// +++ Денвик		
		Если НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.Склад) 
			И ЗначениеЗаполнено(Док1СРезультат.Склад) Тогда
			СтрокаТабличнойЧасти.Склад = Док1СРезультат.Склад;
		КонецЕсли;		
		// --- Денвик
		
	КонецЦикла;
	
КонецПроцедуры
// ТЧ_Товары
Процедура УТ_10_3_ВозвратТоваровПоставщику_ПередЗаполнениемТЧ_Товары		(СтруктураПараметров) Экспорт
	УТ_10_3_Общий_ПередЗаполнениемТЧ(СтруктураПараметров);
	
КонецПроцедуры

Процедура УТ_10_3_ВозвратТоваровПоставщику_ПередЗаполненемСтрокиТЧ_Товары	(СтруктураПараметров) Экспорт
	УТ_10_3_Общий_ПередЗаполненемСтрокиТЧ(СтруктураПараметров);
	
КонецПроцедуры

Процедура УТ_10_3_ВозвратТоваровПоставщику_ПослеЗаполненияСтрокиТЧ_Товары	(СтруктураПараметров) Экспорт
	
	УТ_10_3_Общий_ПослеЗаполненияСтрокиТЧ(СтруктураПараметров);
	
	СтрокаТабличнойЧасти = СтруктураПараметров.СтрокаДокумента;
	Док1СРезультат = СтруктураПараметров.Док1СРезультат;	
	
	СтрокаТабличнойЧасти.ЕдиницаИзмеренияМест = СтрокаТабличнойЧасти.ЕдиницаИзмерения;	
	СтрокаТабличнойЧасти.Коэффициент = СтрокаТабличнойЧасти.ЕдиницаИзмерения.Коэффициент;	                                                                            			
	СтрокаТабличнойЧасти.КоличествоМест = СтрокаТабличнойЧасти.Количество;

	УТ_10_3_ЗаполнитьСериюНоменклатурыВСтроке(СтруктураПараметров);
	УТ_10_3_ЗаполнитьСерийныйНомерВСтроке(СтруктураПараметров);	
	
КонецПроцедуры

Процедура УТ_10_3_ВозвратТоваровПоставщику_ПослеЗаполненияТЧ_Товары			(СтруктураПараметров) Экспорт
	
	УТ_10_3_Общий_ПослеЗаполненияТЧ(СтруктураПараметров);	
	
КонецПроцедуры

#КонецОбласти

#Область УстановкаЦенНоменклатуры
// Документ
Процедура УТ_10_3_УстановкаЦенНоменклатуры_ПередЗаполнениемДокумента		(СтруктураПараметров) Экспорт
	УТ_10_3_Общий_ПередЗаполнениемДокумента(СтруктураПараметров);	
	
КонецПроцедуры

Процедура УТ_10_3_УстановкаЦенНоменклатуры_ПослеЗаполненияДокумента			(СтруктураПараметров) Экспорт
	УТ_10_3_Общий_ПослеЗаполненияДокумента(СтруктураПараметров);
	// +++ Денвик
	Док1СРезультат = СтруктураПараметров.Док1СРезультат;	
	Если Док1СРезультат.ТипыЦен.Количество() > 0 Тогда
		ТипЦен = Док1СРезультат.ТипыЦен[0].ТипЦен;
		Для Каждого Строка Из Док1СРезультат.Товары Цикл
			Если Не ЗначениеЗаполнено(Строка.ТипЦен) Тогда
				Строка.ТипЦен = ТипЦен;
				Строка.Валюта = ТипЦен.ВалютаЦены;
				Строка.ПроцентСкидкиНаценки = ТипЦен.ПроцентСкидкиНаценки;
				Строка.СпособРасчетаЦены = ТипЦен.СпособРасчетаЦены;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	// --- Денвик
КонецПроцедуры
// ТЧ_Товары
Процедура УТ_10_3_УстановкаЦенНоменклатуры_ПередЗаполнениемТЧ_Товары		(СтруктураПараметров) Экспорт
	УТ_10_3_Общий_ПередЗаполнениемТЧ(СтруктураПараметров);
	// +++ Денвик
	Док1СРезультат = СтруктураПараметров.Док1СРезультат;
	Если Док1СРезультат.ТипыЦен.Количество() = 0 Тогда
		ТипЦен = Неопределено;
		Выполнить("ТипЦен = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(ПараметрыСеанса.ТекущийПользователь, ""ОсновнойТипЦенПродажи"")");
		НС = Док1СРезультат.ТипыЦен.Добавить();
		НС.ТипЦен = ТипЦен;
	КонецЕсли;
		
	// --- Денвик
	
КонецПроцедуры

Процедура УТ_10_3_УстановкаЦенНоменклатуры_ПередЗаполненемСтрокиТЧ_Товары	(СтруктураПараметров) Экспорт
	УТ_10_3_Общий_ПередЗаполненемСтрокиТЧ(СтруктураПараметров);
	
КонецПроцедуры

Процедура УТ_10_3_УстановкаЦенНоменклатуры_ПослеЗаполненияСтрокиТЧ_Товары	(СтруктураПараметров) Экспорт
	
	УТ_10_3_Общий_ПослеЗаполненияСтрокиТЧ(СтруктураПараметров);	
	
КонецПроцедуры

Процедура УТ_10_3_УстановкаЦенНоменклатуры_ПослеЗаполненияТЧ_Товары			(СтруктураПараметров) Экспорт
	
	УТ_10_3_Общий_ПослеЗаполненияТЧ(СтруктураПараметров);
	
КонецПроцедуры

#КонецОбласти

#Область Инвентаризация

Функция УТ_10_3_ИнвентаризацияТоваровНаСкладе_ПодборКоличества			(СтруктураДанных, ЭтоПроверка = Ложь) Экспорт
	
	Если ЭтоПроверка Тогда
		СтруктураПроверки = Новый Структура("Статус,Сообщение", Истина, СтруктураДанных.ПодборКоличества_Колонка1С);
		Если СтруктураДанных.ПодборКоличества_Колонка1С = "Количество" Тогда
			// используем реальную плановую колонку
			СтруктураПроверки.Вставить("Сообщение", "КоличествоУчет");
		КонецЕсли;
		Возврат СтруктураПроверки;
	КонецЕсли;
	
	Если СтруктураДанных.КонтрольКоличества Тогда
		// план-факт
		Если СтруктураДанных.ПодборКоличества_Колонка1С = "Количество" Тогда
			// используем реальную плановую колонку
			СтруктураДанных.Вставить("ПодборКоличества_Колонка1С_План", "КоличествоУчет");
		Иначе
			СтруктураДанных.Вставить("ПодборКоличества_Колонка1С_План", "CLV_ПланДля_" + СтруктураДанных.ПодборКоличества_Колонка1С);
		КонецЕсли;
		ГлЯдро_ПодобратьКоличествоСКонтролемПлана(СтруктураДанных);
	Иначе
		ГлЯдро_ПодобратьКоличествоСуммированием(СтруктураДанных);
	КонецЕсли;
	
	Возврат СтруктураДанных;
	
КонецФункции
// Документ
Процедура УТ_10_3_ИнвентаризацияТоваров_ПередЗаполнениемДокумента		(СтруктураПараметров) Экспорт
	
	УТ_10_3_Общий_ПередЗаполнениемДокумента(СтруктураПараметров);
	
	Док1СРезультат = СтруктураПараметров.Док1СРезультат;
	Док1СРезультат.УчитыватьСерии = Истина;
	
КонецПроцедуры

Процедура УТ_10_3_ИнвентаризацияТоваров_ПослеЗаполненияДокумента		(СтруктураПараметров) Экспорт
	
	Перем мВалютаРегламентированногоУчета;

	// Валюта курс и кратность для пересчета регламентированных сумм
	Перем мВалютаУпрУчета;
	Перем мКурсУпрУчета;
	Перем мКратностьУпрУчета;
	Перем СтруктураКурса;
	
	УТ_10_3_Общий_ПослеЗаполненияДокумента(СтруктураПараметров);
	
	УТ_10_3_ИнвентаризацияТоваров_ПослеЗаполненияТЧ_Товары(СтруктураПараметров);	
	
	Док1СРезультат = СтруктураПараметров.Док1СРезультат;
	Если Док1СРезультат.ЭтоНовый() Тогда 
		Выполнить("ЗаполнениеДокументов.ЗаполнитьШапкуДокумента(Док1СРезультат, ПараметрыСеанса.ТекущийПользователь, Константы.ВалютаРегламентированногоУчета.Получить());");
	КонецЕсли;	
	
	ТЧТовары = Док1СРезультат.Товары;
	
	Выполнить("мВалютаРегламентированногоУчета = глЗначениеПеременной(""ВалютаРегламентированногоУчета"");");
	Выполнить("мВалютаУпрУчета                 = глЗначениеПеременной(""ВалютаУправленческогоУчета"");");
	
	Выполнить("СтруктураКурса = МодульВалютногоУчета.ПолучитьКурсВалюты(мВалютаУпрУчета, Док1СРезультат.Дата);");
	мКурсУпрУчета             = СтруктураКурса.Курс;
	мКратностьУпрУчета        = СтруктураКурса.Кратность;		
	
	Для каждого СтрокаТабличнойЧасти Из ТЧТовары Цикл		
		
		УТ_10_3_ЗаполнитьПоОстаткамНаСкладе(СтрокаТабличнойЧасти, Док1СРезультат);
		
		// Рассчитываем реквизиты табличной части.
		Выполнить("ОбработкаТабличныхЧастей.ЗаполнитьЕдиницуМестТабЧасти(СтрокаТабличнойЧасти, Док1СРезультат, Ложь)");
		Выполнить("ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, Док1СРезультат)");
		Выполнить("СтрокаТабличнойЧасти.СуммаРегл = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаТабличнойЧасти.Сумма, мВалютаУпрУчета, 
		|мВалютаРегламентированногоУчета, мКурсУпрУчета, 1, мКратностьУпрУчета, 1)");
		
		Выполнить("СтрокаТабличнойЧасти.Качество = Справочники.Качество.Новый;");						
			
	КонецЦикла; 
		
КонецПроцедуры
// ТЧ_Товары
Процедура УТ_10_3_ИнвентаризацияТоваров_ПередЗаполнениемТЧ_Товары		(СтруктураПараметров) Экспорт
	УТ_10_3_Общий_ПередЗаполнениемТЧ(СтруктураПараметров);
	
КонецПроцедуры

Процедура УТ_10_3_ИнвентаризацияТоваров_ПередЗаполненемСтрокиТЧ_Товары	(СтруктураПараметров) Экспорт
	УТ_10_3_Общий_ПередЗаполненемСтрокиТЧ(СтруктураПараметров);
	
КонецПроцедуры

Процедура УТ_10_3_ИнвентаризацияТоваров_ПослеЗаполненияСтрокиТЧ_Товары	(СтруктураПараметров) Экспорт
	УТ_10_3_Общий_ПослеЗаполненияСтрокиТЧ(СтруктураПараметров);
	
	СтрокаТабличнойЧасти = СтруктураПараметров.СтрокаДокумента;
	Док1СРезультат = СтруктураПараметров.Док1СРезультат;	
	
	СтрокаТабличнойЧасти.ЕдиницаИзмеренияМест = СтрокаТабличнойЧасти.ЕдиницаИзмерения;	
	СтрокаТабличнойЧасти.Коэффициент = СтрокаТабличнойЧасти.ЕдиницаИзмерения.Коэффициент;	                                                                            			
	СтрокаТабличнойЧасти.КоличествоМест = СтрокаТабличнойЧасти.Количество;
	
	УТ_10_3_ЗаполнитьСериюНоменклатурыВСтроке(СтруктураПараметров);							
	
КонецПроцедуры

Процедура УТ_10_3_ИнвентаризацияТоваров_ПослеЗаполненияТЧ_Товары		(СтруктураПараметров) Экспорт
	УТ_10_3_Общий_ПослеЗаполненияТЧ(СтруктураПараметров);
	
КонецПроцедуры

#КонецОбласти

#Область ЕГАИС_АктПостановкиНаБаланс

Функция УТ_10_3_АктПостановкиНаБалансЕГАИС_ПодборКоличества							(СтруктураДанных, ЭтоПроверка = Ложь) Экспорт
	
	Если ЭтоПроверка Тогда
		СтруктураПроверки = Новый Структура("Статус,Сообщение", Истина, СтруктураДанных.ПодборКоличества_Колонка1С);
		Возврат СтруктураПроверки;
	КонецЕсли;
		
	Если СтруктураДанных.КонтрольКоличества Тогда
		СтруктураДанных.Вставить("ПодборКоличества_Колонка1С_План", "CLV_ПланДля_" + СтруктураДанных.ПодборКоличества_Колонка1С);
		ГлЯдро_ПодобратьКоличествоСКонтролемПлана(СтруктураДанных);
	Иначе
		ГлЯдро_ПодобратьКоличествоСуммированием(СтруктураДанных);
	КонецЕсли;
	
	Возврат СтруктураДанных;
	
КонецФункции
// Документ
Процедура УТ_10_3_АктПостановкиНаБалансЕГАИС_ПередЗаполнениемДокумента				(СтруктураПараметров) Экспорт
	
	УТ_10_3_Общий_ПередЗаполнениемДокумента(СтруктураПараметров);
	
	Док1СРезультат = СтруктураПараметров.Док1СРезультат;
	
	Док1СРезультат.СтатусОбработки = ПредопределенноеЗначение("Перечисление.СтатусыОбработкиАктаПостановкиНаБалансЕГАИС.Новый");
	
	Док1СРезультат.ИдентификаторЕГАИС = "";
	Док1СРезультат.ДатаРегистрацииДвижений = '00010101';
	Док1СРезультат.ВидДокумента = ПредопределенноеЗначение("Перечисление.ВидыДокументовЕГАИС.АктПостановкиНаБаланс");
	
КонецПроцедуры

Процедура УТ_10_3_АктПостановкиНаБалансЕГАИС_ПослеЗаполненияДокумента				(СтруктураПараметров) Экспорт
	УТ_10_3_Общий_ПослеЗаполненияДокумента(СтруктураПараметров);	
	
КонецПроцедуры

// ТЧ_Товары
Процедура УТ_10_3_АктПостановкиНаБалансЕГАИС_ПередЗаполнениемТЧ_Товары				(СтруктураПараметров) Экспорт
	
	УТ_10_3_Общий_ПередЗаполнениемТЧ(СтруктураПараметров);
	
КонецПроцедуры

Процедура УТ_10_3_АктПостановкиНаБалансЕГАИС_ПередЗаполненемСтрокиТЧ_Товары			(СтруктураПараметров) Экспорт
	УТ_10_3_Общий_ПередЗаполненемСтрокиТЧ(СтруктураПараметров);
КонецПроцедуры

Процедура УТ_10_3_АктПостановкиНаБалансЕГАИС_ПослеЗаполненияСтрокиТЧ_Товары			(СтруктураПараметров) Экспорт
	
	УТ_10_3_Общий_ПослеЗаполненияСтрокиТЧ(СтруктураПараметров);			
	
	ЗаполнитьСтрокуТабличнойЧастиТоварыДокументаЕГАИС(СтруктураПараметров);

КонецПроцедуры

Процедура УТ_10_3_АктПостановкиНаБалансЕГАИС_ПослеЗаполненияТЧ_Товары				(СтруктураПараметров) Экспорт
	
	УТ_10_3_Общий_ПослеЗаполненияТЧ(СтруктураПараметров);
	
	Док1СРезультат = СтруктураПараметров.Док1СРезультат;
	
	ЗаполнитьСправки2ТЧТовары(СтруктураПараметров);     
	
	ТЧ = Док1СРезультат.Товары;
	
	КлючСвязи = 0;
	Для каждого Стр из ТЧ Цикл
		Стр.КлючСвязи = КлючСвязи;
		КлючСвязи = КлючСвязи + 1;
	КонецЦикла;	
	  
	КонецПроцедуры
	
// ТЧ_АкцизныеМарки
Процедура УТ_10_3_АктПостановкиНаБалансЕГАИС_ПередЗаполнениемТЧ_АкцизныеМарки		(СтруктураПараметров) Экспорт
	
	УТ_10_3_Общий_ПередЗаполнениемТЧ(СтруктураПараметров);
	
КонецПроцедуры

Процедура УТ_10_3_АктПостановкиНаБалансЕГАИС_ПередЗаполненемСтрокиТЧ_АкцизныеМарки	(СтруктураПараметров) Экспорт
	УТ_10_3_Общий_ПередЗаполненемСтрокиТЧ(СтруктураПараметров);
	
КонецПроцедуры

Процедура УТ_10_3_АктПостановкиНаБалансЕГАИС_ПослеЗаполненияСтрокиТЧ_АкцизныеМарки	(СтруктураПараметров) Экспорт
	
	ЗаполнитьТЧАкцизныеМарки(СтруктураПараметров);
	
	УТ_10_3_Общий_ПослеЗаполненияСтрокиТЧ(СтруктураПараметров);
	
	ЗаполнитьИдентификаторСтрокиТЧ_АкцизныеМарки(СтруктураПараметров);
	
КонецПроцедуры

Процедура УТ_10_3_АктПостановкиНаБалансЕГАИС_ПослеЗаполненияТЧ_АкцизныеМарки		(СтруктураПараметров) Экспорт
	
	УТ_10_3_Общий_ПослеЗаполненияТЧ(СтруктураПараметров);
		
	ЗаполнитьИдентификаторСтрокиТЧ_АкцизныеМарки_БезКлючаСвязи(СтруктураПараметров);    
	
	ЗаполнитьТЧАкцизныеМарки(СтруктураПараметров);

	
КонецПроцедуры

#КонецОбласти

#Область ТТНВходящаяЕГАИС

Функция УТ_10_3_ТТНВходящаяЕГАИС_ПодборКоличества					(СтруктураДанных, ЭтоПроверка = Ложь) Экспорт
	
	Если ЭтоПроверка Тогда
		СтруктураПроверки = Новый Структура("Статус,Сообщение", Истина, СтруктураДанных.ПодборКоличества_Колонка1С);
		Возврат СтруктураПроверки;
	КонецЕсли;
		
	Если СтруктураДанных.КонтрольКоличества Тогда
		СтруктураДанных.Вставить("ПодборКоличества_Колонка1С_План", "CLV_ПланДля_" + СтруктураДанных.ПодборКоличества_Колонка1С);
		ГлЯдро_ПодобратьКоличествоСКонтролемПлана(СтруктураДанных);
	Иначе
		ГлЯдро_ПодобратьКоличествоСуммированием(СтруктураДанных);
	КонецЕсли;
	
	Возврат СтруктураДанных;
	
КонецФункции
// Документ
Процедура УТ_10_3_ТТНВходящаяЕГАИС_ПередЗаполнениемДокумента		(СтруктураПараметров) Экспорт
	
	УТ_10_3_Общий_ПередЗаполнениемДокумента(СтруктураПараметров);
	
КонецПроцедуры

Процедура УТ_10_3_ТТНВходящаяЕГАИС_ПослеЗаполненияДокумента			(СтруктураПараметров) Экспорт
	УТ_10_3_Общий_ПослеЗаполненияДокумента(СтруктураПараметров);	
	Док1СРезультат	= СтруктураПараметров.Док1СРезультат;
	
	ТТНВходящаяЕГАИС_УстановитьСтатусПринято(Док1СРезультат);
	ТТНВходящаяЕГАИС_ТЧ_АкцизныеМарки_ЗаполнитьСправки2(Док1СРезультат);	
	ТТНВходящаяЕГАИС_ТЧ_Товары_ЗаполнитьКоличествоФакт(СтруктураПараметров);					
	ТТНВходящаяЕГАИС_ПроверитьАкцизныеМарки(СтруктураПараметров);	
	
	// Нужно обязательно записать, потому что если не записать чуда не произойдет
	Док1СРезультат.Записать(РежимЗаписиДокумента.Запись);
	
КонецПроцедуры 
// ТЧ_Товары

Процедура УТ_10_3_ТТНВходящаяЕГАИС_ПередЗаполнениемТЧ_Товары		(СтруктураПараметров) Экспорт
	
	УТ_10_3_Общий_ПередЗаполнениемТЧ(СтруктураПараметров);
	
КонецПроцедуры

Процедура УТ_10_3_ТТНВходящаяЕГАИС_ПередЗаполненемСтрокиТЧ_Товары	(СтруктураПараметров) Экспорт
	
	УТ_10_3_Общий_ПередЗаполненемСтрокиТЧ(СтруктураПараметров);
	
КонецПроцедуры

Процедура УТ_10_3_ТТНВходящаяЕГАИС_ПослеЗаполненияСтрокиТЧ_Товары	(СтруктураПараметров) Экспорт
	
	УТ_10_3_Общий_ПослеЗаполненияСтрокиТЧ(СтруктураПараметров);		
	
	ЗаполнитьСтрокуТабличнойЧастиТоварыДокументаЕГАИС(СтруктураПараметров);
	
КонецПроцедуры

Процедура УТ_10_3_ТТНВходящаяЕГАИС_ПослеЗаполненияТЧ_Товары			(СтруктураПараметров) Экспорт

	УТ_10_3_Общий_ПослеЗаполненияТЧ(СтруктураПараметров);	
	
	ЗаполнитьСправки2ТЧТовары(СтруктураПараметров);

КонецПроцедуры

Процедура УТ_10_3_ТТНВходящаяЕГАИС_ПередЗаполнениемСтрокиТЧ_Товары	(СтруктураПараметров) Экспорт

	УТ_10_3_Общий_ПередЗаполненемСтрокиТЧ(СтруктураПараметров);	

КонецПроцедуры

// ТЧ АкцизныеМарки
Процедура УТ_10_3_ТТНВходящаяЕГАИС_ПередЗаполнениемТЧ_АкцизныеМарки			(СтруктураПараметров) Экспорт

	УТ_10_3_Общий_ПередЗаполнениемТЧ(СтруктураПараметров);
	
КонецПроцедуры

Процедура УТ_10_3_ТТНВходящаяЕГАИС_ПередЗаполнениемСтрокиТЧ_АкцизныеМарки	(СтруктураПараметров) Экспорт

 	УТ_10_3_Общий_ПередЗаполненемСтрокиТЧ(СтруктураПараметров);	
		
КонецПроцедуры

Процедура УТ_10_3_ТТНВходящаяЕГАИС_ПослеЗаполненияСтрокиТЧ_АкцизныеМарки	(СтруктураПараметров) Экспорт

	ЗаполнитьТЧАкцизныеМарки(СтруктураПараметров);
	
	УТ_10_3_Общий_ПослеЗаполненияСтрокиТЧ(СтруктураПараметров);
	
	ЗаполнитьИдентификаторСтрокиТЧ_АкцизныеМарки(СтруктураПараметров);	
	
	КонецПроцедуры

Процедура УТ_10_3_ТТНВходящаяЕГАИС_ПослеЗаполненияТЧ_АкцизныеМарки			(СтруктураПараметров) Экспорт

	УТ_10_3_Общий_ПослеЗаполненияТЧ(СтруктураПараметров);
		
КонецПроцедуры

#КонецОбласти

#Область ТТНИсходящаяЕГАИС

Функция УТ_10_3_ТТНИсходящаяЕГАИС_ПодборКоличества					(СтруктураДанных, ЭтоПроверка = Ложь) Экспорт
	
	Если ЭтоПроверка Тогда
		СтруктураПроверки = Новый Структура("Статус,Сообщение", Истина, СтруктураДанных.ПодборКоличества_Колонка1С);
		Возврат СтруктураПроверки;
	КонецЕсли;
		
	Если СтруктураДанных.КонтрольКоличества Тогда
		СтруктураДанных.Вставить("ПодборКоличества_Колонка1С_План", "CLV_ПланДля_" + СтруктураДанных.ПодборКоличества_Колонка1С);
		ГлЯдро_ПодобратьКоличествоСКонтролемПлана(СтруктураДанных);
	Иначе
		ГлЯдро_ПодобратьКоличествоСуммированием(СтруктураДанных);
	КонецЕсли;
	
	Возврат СтруктураДанных;
	
КонецФункции
// Документ
Процедура УТ_10_3_ТТНИсходящаяЕГАИС_ПередЗаполнениемДокумента		(СтруктураПараметров) Экспорт
	УТ_10_3_Общий_ПередЗаполнениемДокумента(СтруктураПараметров);
	
КонецПроцедуры

Процедура УТ_10_3_ТТНИсходящаяЕГАИС_ПослеЗаполненияДокумента		(СтруктураПараметров) Экспорт
	
	УТ_10_3_Общий_ПослеЗаполненияДокумента(СтруктураПараметров);	
	
	ТТНВходящаяЕГАИС_ТЧ_Товары_ЗаполнитьКоличествоФакт(СтруктураПараметров);
	ТТНИсходящаяЕГАИС_ПроверитьАкцизныеМарки(СтруктураПараметров);	
	
КонецПроцедуры
// ТЧ_Товары
Процедура УТ_10_3_ТТНИсходящаяЕГАИС_ПередЗаполнениемТЧ_Товары		(СтруктураПараметров) Экспорт
	УТ_10_3_Общий_ПослеЗаполненияДокумента(СтруктураПараметров);
	
КонецПроцедуры

Процедура УТ_10_3_ТТНИсходящаяЕГАИС_ПередЗаполненемСтрокиТЧ_Товары	(СтруктураПараметров) Экспорт
	УТ_10_3_Общий_ПередЗаполненемСтрокиТЧ(СтруктураПараметров);
	
КонецПроцедуры

Процедура УТ_10_3_ТТНИсходящаяЕГАИС_ПослеЗаполненияСтрокиТЧ_Товары	(СтруктураПараметров) Экспорт
	
	ЗаполнитьСтрокуТабличнойЧастиТоварыДокументаЕГАИС(СтруктураПараметров);
	
	УТ_10_3_Общий_ПослеЗаполненияСтрокиТЧ(СтруктураПараметров);
		
КонецПроцедуры

Процедура УТ_10_3_ТТНИсходящаяЕГАИС_ПослеЗаполненияТЧ_Товары		(СтруктураПараметров) Экспорт

	УТ_10_3_Общий_ПослеЗаполненияТЧ(СтруктураПараметров);

	ЗаполнитьСправки2ТЧТовары(СтруктураПараметров);
	
КонецПроцедуры

// ТЧ АкцизныеМарки
Процедура УТ_10_3_ТТНИсходящаяЕГАИС_ПередЗаполнениемТЧ_АкцизныеМарки			(СтруктураПараметров) Экспорт

	УТ_10_3_Общий_ПередЗаполнениемТЧ(СтруктураПараметров);
	
КонецПроцедуры

Процедура УТ_10_3_ТТНИсходящаяЕГАИС_ПередЗаполнениемСтрокиТЧ_АкцизныеМарки	(СтруктураПараметров) Экспорт

 	УТ_10_3_Общий_ПередЗаполненемСтрокиТЧ(СтруктураПараметров);	
		
КонецПроцедуры

Процедура УТ_10_3_ТТНИсходящаяЕГАИС_ПослеЗаполненияСтрокиТЧ_АкцизныеМарки	(СтруктураПараметров) Экспорт

	ЗаполнитьТЧАкцизныеМарки(СтруктураПараметров);
	
	УТ_10_3_Общий_ПослеЗаполненияСтрокиТЧ(СтруктураПараметров);
			
	КонецПроцедуры

Процедура УТ_10_3_ТТНИсходящаяЕГАИС_ПослеЗаполненияТЧ_АкцизныеМарки			(СтруктураПараметров) Экспорт

	УТ_10_3_Общий_ПослеЗаполненияТЧ(СтруктураПараметров);
	
	ЗаполнитьИдентификаторСтрокиТЧ_АкцизныеМарки_БезКлючаСвязи(СтруктураПараметров);
	
КонецПроцедуры

#КонецОбласти

#Область ЕГАИС_АктСписания

Функция УТ_10_3_АктСписанияЕГАИС_ПодборКоличества						(СтруктураДанных, ЭтоПроверка = Ложь) Экспорт
	
	Если ЭтоПроверка Тогда
		СтруктураПроверки = Новый Структура("Статус,Сообщение", Истина, СтруктураДанных.ПодборКоличества_Колонка1С);
		Возврат СтруктураПроверки;
	КонецЕсли;
		
	Если СтруктураДанных.КонтрольКоличества Тогда
		СтруктураДанных.Вставить("ПодборКоличества_Колонка1С_План", "CLV_ПланДля_" + СтруктураДанных.ПодборКоличества_Колонка1С);
		ГлЯдро_ПодобратьКоличествоСКонтролемПлана(СтруктураДанных);
	Иначе
		ГлЯдро_ПодобратьКоличествоСуммированием(СтруктураДанных);
	КонецЕсли;
	
	Возврат СтруктураДанных;
	
КонецФункции
// Документ
Процедура УТ_10_3_АктСписанияЕГАИС_ПередЗаполнениемДокумента			(СтруктураПараметров) Экспорт
	УТ_10_3_Общий_ПередЗаполнениемДокумента(СтруктураПараметров);
	// +++ Денвик
	Док1СРезультат = СтруктураПараметров.Док1СРезультат;
	Если Док1СРезультат.ЭтоНовый() Тогда 
		Док1СРезультат.ИдентификаторЕГАИС 		= "";
		Док1СРезультат.ВидДокумента				= Перечисления.ВидыДокументовЕГАИС.АктСписания;
		Док1СРезультат.СтатусОбработки         	= Перечисления.СтатусыОбработкиАктаСписанияЕГАИС.Новый;
		Док1СРезультат.ДатаРегистрацииДвижений 	= '00010101';
	КонецЕсли;
	// --- Денвик
КонецПроцедуры

Процедура УТ_10_3_АктСписанияЕГАИС_ПослеЗаполненияДокумента				(СтруктураПараметров) Экспорт
	
	УТ_10_3_Общий_ПослеЗаполненияДокумента(СтруктураПараметров);
	
КонецПроцедуры
// ТЧ_Товары
Процедура УТ_10_3_АктСписанияЕГАИС_ПередЗаполнениемТЧ_Товары			(СтруктураПараметров) Экспорт
	УТ_10_3_Общий_ПередЗаполнениемТЧ(СтруктураПараметров);
	
КонецПроцедуры

Процедура УТ_10_3_АктСписанияЕГАИС_ПередЗаполненемСтрокиТЧ_Товары		(СтруктураПараметров) Экспорт
	УТ_10_3_Общий_ПередЗаполненемСтрокиТЧ(СтруктураПараметров);
	
КонецПроцедуры

Процедура УТ_10_3_АктСписанияЕГАИС_ПослеЗаполненияСтрокиТЧ_Товары		(СтруктураПараметров) Экспорт
	
	УТ_10_3_Общий_ПослеЗаполненияСтрокиТЧ(СтруктураПараметров);
	
	ЗаполнитьСтрокуТабличнойЧастиТоварыДокументаЕГАИС(СтруктураПараметров);

КонецПроцедуры

Процедура УТ_10_3_АктСписанияЕГАИС_ПослеЗаполненияТЧ_Товары				(СтруктураПараметров) Экспорт
	
	УТ_10_3_Общий_ПослеЗаполненияТЧ(СтруктураПараметров);
	
	ЗаполнитьСправки2ТЧТовары(СтруктураПараметров);
	
КонецПроцедуры
// ТЧ_АкцизныеМарки
Процедура УТ_10_3_АктСписанияЕГАИС_ПередЗаполнениемТЧ_АкцизныеМарки		(СтруктураПараметров) Экспорт
	
	УТ_10_3_Общий_ПередЗаполнениемТЧ(СтруктураПараметров);
	
КонецПроцедуры

Процедура УТ_10_3_АктСписанияЕГАИС_ПередЗаполненемСтрокиТЧ_АкцизныеМарки(СтруктураПараметров) Экспорт
	УТ_10_3_Общий_ПередЗаполненемСтрокиТЧ(СтруктураПараметров);
	
КонецПроцедуры

Процедура УТ_10_3_АктСписанияЕГАИС_ПослеЗаполненияСтрокиТЧ_АкцизныеМарки(СтруктураПараметров) Экспорт
			
	УТ_10_3_Общий_ПослеЗаполненияСтрокиТЧ(СтруктураПараметров);
	
КонецПроцедуры

Процедура УТ_10_3_АктСписанияЕГАИС_ПослеЗаполненияТЧ_АкцизныеМарки		(СтруктураПараметров) Экспорт
	
	УТ_10_3_Общий_ПослеЗаполненияТЧ(СтруктураПараметров);
	
	ЗаполнитьИдентификаторСтрокиТЧ_АкцизныеМарки_БезКлючаСвязи(СтруктураПараметров);    
	
	ЗаполнитьТЧАкцизныеМарки(СтруктураПараметров);
	
КонецПроцедуры

#КонецОбласти

// +++ Денвик
#Область РеализацияТоваровУслуг

Функция УТ_10_3_РеализацияТоваровУслуг_ПодборКоличества							(СтруктураДанных, ЭтоПроверка = Ложь) Экспорт
	
	Если ЭтоПроверка Тогда
		СтруктураПроверки = Новый Структура("Статус,Сообщение", Истина, СтруктураДанных.ПодборКоличества_Колонка1С);
		Возврат СтруктураПроверки;
	КонецЕсли;
		
	Если СтруктураДанных.КонтрольКоличества Тогда
		СтруктураДанных.Вставить("ПодборКоличества_Колонка1С_План", "CLV_ПланДля_" + СтруктураДанных.ПодборКоличества_Колонка1С);
		ГлЯдро_ПодобратьКоличествоСКонтролемПлана(СтруктураДанных);
	Иначе
		ГлЯдро_ПодобратьКоличествоСуммированием(СтруктураДанных);
	КонецЕсли;
	
	Возврат СтруктураДанных;
	
КонецФункции
// Документ
Процедура УТ_10_3_РеализацияТоваровУслуг_ПередЗаполнениемДокумента				(СтруктураПараметров) Экспорт
	УТ_10_3_Общий_ПередЗаполнениемДокумента(СтруктураПараметров);
	
КонецПроцедуры

Процедура УТ_10_3_РеализацияТоваровУслуг_ПослеЗаполненияДокумента				(СтруктураПараметров) Экспорт
	
	УТ_10_3_Общий_ПослеЗаполненияДокумента(СтруктураПараметров);
	
	УТ_10_3_РеализацияТоваровУслуг_ПослеЗаполненияТЧ_Товары(СтруктураПараметров);	
	
	Док1СРезультат = СтруктураПараметров.Док1СРезультат;
	Док1СОснование = СтруктураПараметров.Док1СОснование;
	Если Док1СРезультат.ЭтоНовый() Тогда			

		Если Док1СОснование <> Неопределено И Док1СОснование <> Док1СРезультат Тогда
			Док1СРезультат.Сделка = Док1СОснование.Ссылка;			
			Док1СРезультат.Склад = Док1СОснование.СкладГруппа;
		КонецЕсли;		
		
		// Заполнить реквизиты значениями по умолчанию.
		Выполнить("ЗаполнениеДокументов.ЗаполнитьШапкуДокумента(Док1СРезультат, глЗначениеПеременной(""глТекущийПользователь""), Константы.ВалютаРегламентированногоУчета.Получить(), ""Продажа"", Неопределено, Неопределено)");

		Если Док1СОснование <> Неопределено И Док1СОснование <> Док1СРезультат 
		   И ТипЗнч(Док1СОснование) = Тип("ДокументОбъект.ПриходныйОрдерНаТовары") Тогда
			Док1СРезультат.ОтражатьВУправленческомУчете = Истина;
		КонецЕсли;

		Если ЗначениеЗаполнено(Док1СРезультат.ДоговорКонтрагента)
		   И Док1СРезультат.ДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомитентом Тогда
			ОтражатьВНалоговомУчете = Ложь;
		КонецЕсли;		
		
	КонецЕсли;		

	ТЧТовары = Док1СРезультат.Товары;
	
	Для каждого СтрокаТабличнойЧасти Из ТЧТовары Цикл
		
		// Заполняем реквизиты табличной части.
		Выполнить("ОбработкаТабличныхЧастей.ЗаполнитьСтавкуНДСТабЧасти(СтрокаТабличнойЧасти, Док1СРезультат, ""Приобретение"")"); 
		
		Если НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.Цена) Тогда
			СтруктураШапкиДокумента = Новый Структура("Контрагент, ТипЦен, ДоговорКонтрагента, ДатаДокумента, ВалютаДокумента, УчитыватьНДС, СуммаВключаетНДС",
			Док1СРезультат.Контрагент, Док1СРезультат.ТипЦен, Док1СРезультат.ДоговорКонтрагента, Док1СРезультат.Дата, Док1СРезультат.ВалютаДокумента, Док1СРезультат.УчитыватьНДС, Док1СРезультат.СуммаВключаетНДС);
			Выполнить("ОбработкаТабличныхЧастей.ЗаполнитьЕдиницуЦенуПродажиТабЧасти(СтрокаТабличнойЧасти, Док1СРезультат, СтруктураШапкиДокумента, Константы.ВалютаРегламентированногоУчета.Получить())"); 
		КонецЕсли;	
		
		// Рассчитываем реквизиты табличной части.
		Выполнить("ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, Док1СРезультат)");
		Выполнить("ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, Док1СРезультат)");
		
		Выполнить("УчетСерийныхНомеров.ПроверитьСерийныеНомера(СтрокаТабличнойЧасти, Док1СРезультат)");											
				
		Если НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.Склад) 
			И ЗначениеЗаполнено(Док1СРезультат.Склад) Тогда
			СтрокаТабличнойЧасти.Склад = Док1СРезультат.Склад;
			СтрокаТабличнойЧасти.СпособСписанияОстаткаТоваров = Перечисления.СпособыСписанияОстаткаТоваров.СоСклада;
		КонецЕсли;		
		Если ЗначениеЗаполнено(Док1СРезультат.Сделка) Тогда
			СтрокаТабличнойЧасти.ЗаказПокупателя = Док1СРезультат.Сделка;
		КонецЕсли;

	КонецЦикла; 
	
КонецПроцедуры
//  ТЧ_Товары
Процедура УТ_10_3_РеализацияТоваровУслуг_ПередЗаполнениемТЧ_Товары				(СтруктураПараметров) Экспорт
	УТ_10_3_Общий_ПередЗаполнениемТЧ(СтруктураПараметров);	

КонецПроцедуры

Процедура УТ_10_3_РеализацияТоваровУслуг_ПередЗаполненемСтрокиТЧ_Товары			(СтруктураПараметров) Экспорт
	УТ_10_3_Общий_ПередЗаполненемСтрокиТЧ(СтруктураПараметров);
	
КонецПроцедуры

Процедура УТ_10_3_РеализацияТоваровУслуг_ПослеЗаполненияСтрокиТЧ_Товары			(СтруктураПараметров) Экспорт
	
	УТ_10_3_Общий_ПослеЗаполненияСтрокиТЧ(СтруктураПараметров);
	
	СтрокаТабличнойЧасти = СтруктураПараметров.СтрокаДокумента;
	Док1СРезультат = СтруктураПараметров.Док1СРезультат;		
	
	СтрокаТабличнойЧасти.ЕдиницаИзмеренияМест = СтрокаТабличнойЧасти.ЕдиницаИзмерения;	
	СтрокаТабличнойЧасти.Коэффициент = СтрокаТабличнойЧасти.ЕдиницаИзмерения.Коэффициент;	                                                                            			
	СтрокаТабличнойЧасти.КоличествоМест = СтрокаТабличнойЧасти.Количество;

	УТ_10_3_ЗаполнитьСериюНоменклатурыВСтроке(СтруктураПараметров);
	УТ_10_3_ЗаполнитьСерийныйНомерВСтроке(СтруктураПараметров);	
	
КонецПроцедуры

Процедура УТ_10_3_РеализацияТоваровУслуг_ПослеЗаполненияТЧ_Товары				(СтруктураПараметров) Экспорт
	
	УТ_10_3_Общий_ПослеЗаполненияТЧ(СтруктураПараметров);
	
КонецПроцедуры
// ТЧ_СерийныеНомера
Процедура УТ_10_3_РеализацияТоваровУслуг_ПередЗаполнениемТЧ_СерийныеНомера		(СтруктураПараметров) Экспорт
	УТ_10_3_Общий_ПередЗаполнениемТЧ(СтруктураПараметров);
	
КонецПроцедуры

Процедура УТ_10_3_РеализацияТоваровУслуг_ПередЗаполненемСтрокиТЧ_СерийныеНомера	(СтруктураПараметров) Экспорт
	УТ_10_3_Общий_ПередЗаполненемСтрокиТЧ(СтруктураПараметров);
	
КонецПроцедуры

Процедура УТ_10_3_РеализацияТоваровУслуг_ПослеЗаполненияСтрокиТЧ_СерийныеНомера	(СтруктураПараметров) Экспорт
	УТ_10_3_Общий_ПослеЗаполненияСтрокиТЧ(СтруктураПараметров);
	
КонецПроцедуры

Процедура УТ_10_3_РеализацияТоваровУслуг_ПослеЗаполненияТЧ_СерийныеНомера		(СтруктураПараметров) Экспорт
	УТ_10_3_Общий_ПослеЗаполненияТЧ(СтруктураПараметров);	
КонецПроцедуры

#КонецОбласти
// --- Денвик

#КонецОбласти

#Область УТ_10_3_СлужебныеПроцедурыИФункции

Процедура УТ_10_3_ЗаполнитьСериюНоменклатурыВСтроке			(СтруктураПараметров)
	
	СтрокаТабличнойЧасти 		= СтруктураПараметров.СтрокаДокумента;	
	СтруктураПоискаКлючаСвязи 	= СтруктураПараметров.СтруктураПоискаКлючаСвязи;		
	ТекущаяСтрокаMS 			= СтруктураПоискаКлючаСвязи.ТаблицаMS[СтруктураПоискаКлючаСвязи.ИндексСтрокиMS];
	ИдСерии 					= СокрЛП(ТекущаяСтрокаMS.ИдСерии);				
	
	//********************************* Работа с сериями номенклатуры. НАЧАЛО ******************************************				
	
    Если СтруктураПоискаКлючаСвязи.ДанныеДокументаMS.Серии.Найти(ИдСерии) <> Неопределено Тогда
        
        СтрокаТабличнойЧастиСерии = СтруктураПараметров.СтруктураПоискаКлючаСвязи.ДанныеДокументаMS.Серии.Найти(ИдСерии);
        
        Если СтрокаТабличнойЧастиСерии <> Неопределено Тогда
        
            Номер       = СокрЛП(СтрокаТабличнойЧастиСерии.Номер);	
            ИмяСерии    = СокрЛП(СтрокаТабличнойЧастиСерии.ИмяСерии);				
            ГоденДо		= СтрокаТабличнойЧастиСерии.ДатаСерии;	        
            
        КонецЕсли;            
        
    Иначе
        
        СтрокаТабличнойЧастиСерии = Неопределено;
        
    КонецЕсли;        		
	
	ПустаяСерия = ПредопределенноеЗначение("Справочник.СерииНоменклатуры.ПустаяСсылка");
	
	// Если прошлый век, например 01.01.66 => 01.01.1966, прибавляем сто лет => 2066
	Если ЗначениеЗаполнено(ГоденДо) И Год(ГоденДо) < 2000 Тогда				
		ГоденДо = ДобавитьМесяц(ГоденДо, 12*100);
	КонецЕсли;	
	
	Если ЗначениеЗаполнено(ИдСерии) Тогда
		
		Попытка
			Серия = Вычислить("Справочники.СерииНоменклатуры.ПолучитьСсылку(Новый УникальныйИдентификатор(ИдСерии))");	
		Исключение
			Серия = ПустаяСерия;
		КонецПопытки; 		
		
		Если (Серия.Пустая() ИЛИ Серия.ПолучитьОбъект() = Неопределено) И СтрокаТабличнойЧастиСерии <> Неопределено Тогда                        
			
			Запрос = Новый Запрос("ВЫБРАТЬ
			|	СерииНоменклатуры.Ссылка
			|ИЗ
			|	Справочник.СерииНоменклатуры КАК СерииНоменклатуры
			|ГДЕ
			|	СерииНоменклатуры.СерийныйНомер = &СерийныйНомер
			|	И СерииНоменклатуры.СрокГодности = &СрокГодности
			|	И СерииНоменклатуры.Владелец = &Владелец
			|	И НЕ СерииНоменклатуры.ПометкаУдаления");
			
			Запрос.УстановитьПараметр("СерийныйНомер", 	Номер);								  
			Запрос.УстановитьПараметр("СрокГодности", 	ГоденДо);								  
			Запрос.УстановитьПараметр("Владелец", 		СтрокаТабличнойЧасти.Номенклатура);								  
			
			Выборка = Запрос.Выполнить().Выбрать();
			
			Если Выборка.Следующий() Тогда				
				
				Серия = Выборка.Ссылка;
				
			Иначе	
				
				СерияОбъект 						= Вычислить("Справочники.СерииНоменклатуры.СоздатьЭлемент()");
				СерияОбъект.Владелец 				= СтрокаТабличнойЧасти.Номенклатура;
				СерияОбъект.СерийныйНомер 			= Номер;
				СерияОбъект.СрокГодности 			= ГоденДо;
				СерияОбъект.Наименование 			= СерияОбъект.СформироватьНаименование();
				СерияОбъект.ОбменДанными.Загрузка 	= Истина;
				СерияОбъект.Записать();
				
				Серия = СерияОбъект.Ссылка;
						
			КонецЕсли;					
			
		КонецЕсли;
		
	Иначе
		
		Серия = ПустаяСерия;
		
	КонецЕсли;
	
	СтрокаТабличнойЧасти.СерияНоменклатуры = Серия;
	
	//********************************* Работа с сериями номенклатуры. КОНЕЦ ******************************************
	
КонецПроцедуры	

Процедура УТ_10_3_ЗаполнитьСерийныйНомерВСтроке				(СтруктураПараметров)
	
	СтрокаТабличнойЧасти 		= СтруктураПараметров.СтрокаДокумента;
	Док1СРезультат 				= СтруктураПараметров.Док1СРезультат;	
	ТЧСерийныеНомера 			= Док1СРезультат.СерийныеНомера;	
	
	СтруктураПоискаКлючаСвязи 	= СтруктураПараметров.СтруктураПоискаКлючаСвязи;		
	ТекущаяСтрокаMS 			= СтруктураПоискаКлючаСвязи.ТаблицаMS[СтруктураПоискаКлючаСвязи.ИндексСтрокиMS];		
	
	Если НЕ СтруктураПоискаКлючаСвязи.Свойство("ПараметрыСвязиСтрокТЧ") Тогда
		
		мПараметрыСвязиСтрокТЧ = Новый Соответствие;
		мПараметрыСвязиСтрокТЧ.Вставить("Товары", Новый Структура("СвободныйКлюч, ФлагМодификации", Неопределено, Ложь));
		
		СтруктураПоискаКлючаСвязи.Вставить("ПараметрыСвязиСтрокТЧ", мПараметрыСвязиСтрокТЧ);
		
	КонецЕсли;	
	
	//********************************* Работа с серийными номерами. НАЧАЛО ******************************************
	
	Если ЗначениеЗаполнено(ТекущаяСтрокаMS.СН) Тогда
		
		КодСерийногоНомера = СокрЛП(ТекущаяСтрокаMS.СН);			
		
		// 1. Находим такой серийник в базе или создаём его		
		СерийныйНомер = Вычислить("Справочники.СерийныеНомера.НайтиПоКоду(КодСерийногоНомера, , , СтрокаТабличнойЧасти.Номенклатура)");
		
		Если НЕ ЗначениеЗаполнено(СерийныйНомер) Тогда
			
			СерийныйНомерОбъект 				= Вычислить("Справочники.СерийныеНомера.СоздатьЭлемент()");
			СерийныйНомерОбъект.Код 			= КодСерийногоНомера;
			СерийныйНомерОбъект.Владелец 		= СтрокаТабличнойЧасти.Номенклатура;
			СерийныйНомерОбъект.ОбменДанными 	= Истина;
			СерийныйНомерОбъект.Записать();
			
			СерийныйНомер = СерийныйНомерОбъект.Ссылка;
			
		КонецЕсли;	
		
		// 2. Ключ связи в ТЧ Товары не может быть равен нулю, поэтому присваиваем ему новый ключ связи
		Если СтрокаТабличнойЧасти.КлючСвязи = 0 Тогда			
			
			СтрокаТабличнойЧасти.КлючСвязи = УчетСерийныхНомеров.ПолучитьНовыйКлючСвязи(СтруктураПоискаКлючаСвязи.ПараметрыСвязиСтрокТЧ, Док1СРезультат, "Товары", Истина);
			
		КонецЕсли; 		
		
		// 3. Есть ли такой серийник в ТЧ СерийныеНомера		
		СтрокаТЧСерийныеНомера = ТЧСерийныеНомера.Найти(СерийныйНомер, "СерийныйНомер");		
		
		// 4. Если нет, то добавляем его туда и присваиваем ключ связи из текущей строки ТЧ Товары
		Если СтрокаТЧСерийныеНомера = Неопределено Тогда
			
			СтрокаТЧСерийныеНомера 					= ТЧСерийныеНомера.Добавить();
			СтрокаТЧСерийныеНомера.СерийныйНомер 	= СерийныйНомер;
			СтрокаТЧСерийныеНомера.КлючСвязи 		= СтрокаТабличнойЧасти.КлючСвязи;									
			
		КонецЕсли; 		
					
	КонецЕсли;	
	
	//********************************* Работа с серийными номерами. КОНЕЦ ******************************************
	
КонецПроцедуры	

Процедура УТ_10_3_УстановитьЦенуНоменклатуры				(СтрокаТабличнойЧасти, Документ)

	Если Не (Документ.СкладОтправитель.ВидСклада = ПредопределенноеЗначение("Перечисление.ВидыСкладов.НТТ")
		     или Документ.СкладПолучатель.ВидСклада = ПредопределенноеЗначение("Перечисление.ВидыСкладов.НТТ")) Тогда
		СтрокаТабличнойЧасти.Цена = 0;
	ИначеЕсли (Не Документ.СкладОтправитель.ВидСклада = ПредопределенноеЗначение("Перечисление.ВидыСкладов.НТТ")) 
		    И (Документ.СкладПолучатель.ВидСклада = ПредопределенноеЗначение("Перечисление.ВидыСкладов.НТТ")) Тогда
		Документ.ВалютаДокумента    = Константы.ВалютаРегламентированногоУчета.Получить();
		Документ.КурсДокумента      = 1;
		Документ.КратностьДокумента = 1;

		// Тип цен устанавливает склад получатель.
		Выполнить("СтрокаТабличнойЧасти.Цена = Ценообразование.ПолучитьЦенуНоменклатуры(СтрокаТабличнойЧасти.Номенклатура, СтрокаТабличнойЧасти.ХарактеристикаНоменклатуры,
					|Документ.СкладПолучатель.ТипЦенРозничнойТорговли, Документ.Дата, СтрокаТабличнойЧасти.ЕдиницаИзмерения,
					|Документ.ВалютаДокумента, Документ.КурсДокумента, Документ.КратностьДокумента);");
	ИначеЕсли Документ.СкладОтправитель.ВидСклада = ПредопределенноеЗначение("Перечисление.ВидыСкладов.НТТ") Тогда
		Документ.ВалютаДокумента    = Константы.ВалютаРегламентированногоУчета.Получить();
		Документ.КурсДокумента      = 1;
		Документ.КратностьДокумента = 1;

		Выполнить("СтрокаТабличнойЧасти.Цена = УправлениеРозничнойТорговлей.ПолучитьРозничнуюЦену(СтрокаТабличнойЧасти.Номенклатура,, Документ.СкладОтправитель,
				  |Константы.ВалютаРегламентированногоУчета.Получить(), Документ.Дата,
				  |СтрокаТабличнойЧасти.ЕдиницаИзмерения,
				  |Документ.ВалютаДокумента, Документ.КурсДокумента, Документ.КратностьДокумента);");
	КонецЕсли;

КонецПроцедуры

Процедура УТ_10_3_ЗаполнитьСопоставлениеНоменклатурыЕГАИС	(СтруктураПараметров)
	Если Не СтруктураПараметров.СтруктураПоискаКлючаСвязи.ДанныеДляЗагрузки_Строка.Свойство("Номенклатура") Тогда
		Возврат;
	КонецЕслИ;
	Номенклатура = СтруктураПараметров.СтруктураПоискаКлючаСвязи.ДанныеДляЗагрузки_Строка.Номенклатура;
	Если ЗначениеЗаполнено(Номенклатура) И Не Найти(Строка(Номенклатура), "бъект не найден") Тогда
		АлкогольнаяПродукция = СтруктураПараметров.СтруктураПоискаКлючаСвязи.ДанныеДляЗагрузки_Строка.АлкогольнаяПродукция;
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	СоответствиеНоменклатурыЕГАИС.Номенклатура
		|ИЗ
		|	РегистрСведений.СоответствиеНоменклатурыЕГАИС КАК СоответствиеНоменклатурыЕГАИС
		|ГДЕ
		|	СоответствиеНоменклатурыЕГАИС.АлкогольнаяПродукция = &АлкогольнаяПродукция";
		Запрос.УстановитьПараметр("АлкогольнаяПродукция", АлкогольнаяПродукция);
		Результат = Запрос.Выполнить().Выгрузить();
		Если Результат.Количество() = 0 Тогда 			
			ЗаписьВРегистре 						= РегистрыСведений.СоответствиеНоменклатурыЕГАИС.СоздатьМенеджерЗаписи();
			ЗаписьВРегистре.АлкогольнаяПродукция 	= АлкогольнаяПродукция;
			ЗаписьВРегистре.Номенклатура 			= Номенклатура;
			ЗаписьВРегистре.ИдентификаторУпаковки 	= Номенклатура.ЕдиницаХраненияОстатков;
			ЗаписьВРегистре.ЕдиницаИзмерения 		= Номенклатура.ЕдиницаХраненияОстатков;
			ЗаписьВРегистре.Записать();
			Сообщить("Добавлена связь между товаром """ + Номенклатура.Наименование + """ и номенклатурой ЕГАИС """ + АлкогольнаяПродукция.Наименование + """");
		КонецЕсли;
	КонецЕсли;	
КонецПроцедуры

Процедура УТ_10_3_ДобавлениеНовойАлкоНоменклатуры			(СтруктураПараметров) Экспорт
	
	СтруктураПоискаКлючаСвязи = СтруктураПараметров.СтруктураПоискаКлючаСвязи;
	Если СтруктураПоискаКлючаСвязи.МетаданныеПриемника.Имя = "Товары" И 
		СтруктураПоискаКлючаСвязи.ТаблицаMS.Колонки.Найти("АлкоКод") <> Неопределено Тогда
		ТекущаяСтрокаMS = СтруктураПоискаКлючаСвязи.ТаблицаMS[СтруктураПоискаКлючаСвязи.ИндексСтрокиMS];	
		АлкоКод = СокрЛП(ТекущаяСтрокаMS.АлкоКод);				
		СпрНомЕгаисНовая = Справочники.КлассификаторАлкогольнойПродукцииЕГАИС.ПустаяСсылка();
		Если АлкоКод <> "" Тогда
			ЕГАИС_Номенклатура = Справочники.КлассификаторАлкогольнойПродукцииЕГАИС.НайтиПоКоду(АлкоКод);
		Иначе
			ЕГАИС_Номенклатура = СпрНомЕгаисНовая;
		КонецЕсли;
		
		Если ЕГАИС_Номенклатура = СпрНомЕгаисНовая и АлкоКод <> "" Тогда	
			
			СпрНомЕгаисНовая = Справочники.КлассификаторАлкогольнойПродукцииЕГАИС.СоздатьЭлемент();
			СпрНомЕгаисНовая.Код = АлкоКод;
			СпрНомЕгаисНовая.Наименование = "Новая продукция ЕГАИС " + СокрЛП(ТекущаяСтрокаMS.ИмяНеизвестного) + " " + АлкоКод;
			СпрНомЕгаисНовая.ОбменДанными.Загрузка = Истина;
			СпрНомЕгаисНовая.Записать();
			СтруктураПоискаКлючаСвязи.ДанныеДляЗагрузки_Строка.АлкогольнаяПродукция = СпрНомЕгаисНовая.Ссылка;
			Сообщить("Добавлена отсутствующая в справочнике номенклатура ЕГАИС: """ + СпрНомЕгаисНовая.Наименование + """");
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура УТ_10_3_СоздатьНовуюНоменклатуру					(СтруктураПараметров)
	
	СтруктураПоискаКлючаСвязи = СтруктураПараметров.СтруктураПоискаКлючаСвязи;		
	НоменклатураСсылка = Неопределено;	
	Если СтруктураПоискаКлючаСвязи.ДанныеДляЗагрузки_Строка.Свойство("Номенклатура", НоменклатураСсылка) И НЕ ЗначениеЗаполнено(НоменклатураСсылка) Тогда		
		
		ТекущаяСтрокаMS = СтруктураПоискаКлючаСвязи.ТаблицаMS[СтруктураПоискаКлючаСвязи.ИндексСтрокиMS];	
		
		Штрихкод = ?(ЗначениеЗаполнено(ТекущаяСтрокаMS.ОснШК), ТекущаяСтрокаMS.ОснШК, ТекущаяСтрокаMS.ШК);
		
		МетаданныеНСИ = Конф_ПолучитьМетаданныеНСИ();				
	
		СтруктураХраненияШК = Новый Структура;
		СтруктураХраненияШК.Вставить("ШК_ОбъектМетаданных", 		МетаданныеНСИ.Штрихкоды.Путь_ОбъектМетаданных);
		СтруктураХраненияШК.Вставить("ШК_ИзмерениеНоменклатуры", 	МетаданныеНСИ.Штрихкоды.Реквизиты.Номенклатура);
		СтруктураХраненияШК.Вставить("ШК_ИзмерениеУпаковки", 		МетаданныеНСИ.Штрихкоды.Реквизиты.ЕдиницаИзмерения);
		СтруктураХраненияШК.Вставить("ШК_ИзмерениеШтрихкода", 		МетаданныеНСИ.Штрихкоды.Реквизиты.Штрихкод);	
		
		ЕдиницаИзмеренияСсылка = Неопределено;
		Если ГлЯдро_ШтрихКодЕстьВБазе1С(Штрихкод, СтруктураХраненияШК, НоменклатураСсылка, ЕдиницаИзмеренияСсылка) Тогда
			СтруктураПоискаКлючаСвязи.ДанныеДляЗагрузки_Строка.Вставить("ЕдиницаИзмерения", ЕдиницаИзмеренияСсылка);
			СтруктураПоискаКлючаСвязи.ДанныеДляЗагрузки_Строка.Вставить("Номенклатура", 	НоменклатураСсылка);
			Возврат;
		КонецЕсли;					
		
		ГруппаТоваровИзТСД 	= УТ_10_3_НайтиСоздатьГруппуТоваровИзТСД();
		ГруппаАлкоголяИзТСД = УТ_10_3_НайтиСоздатьГруппуАлкоголяИзТСД();
		
		НоменклатураОбъект = Справочники[МетаданныеНСИ.Номенклатура.ИмяСправочника].СоздатьЭлемент();
		
		ЭтоАлкоголь 		= (ТекущаяСтрокаMS.Владелец().Колонки.Найти("Алко") <> Неопределено И ТекущаяСтрокаMS.Алко);
		ЭтоАкцизныйАлкоголь = (ТекущаяСтрокаMS.Владелец().Колонки.Найти("АлкоМарк") <> Неопределено И ТекущаяСтрокаMS.АлкоМарк);	
		
		Если ЭтоАлкоголь Тогда
			
			НоменклатураОбъект.АлкогольнаяПродукция	= ТекущаяСтрокаMS.Алко;			
												
			Если СтруктураПоискаКлючаСвязи.ДанныеДляЗагрузки_Строка.Свойство("АлкогольнаяПродукция") 
				И ЗначениеЗаполнено(СтруктураПоискаКлючаСвязи.ДанныеДляЗагрузки_Строка.АлкогольнаяПродукция) Тогда			
				

				АлкогольнаяПродукция = СтруктураПоискаКлючаСвязи.ДанныеДляЗагрузки_Строка.АлкогольнаяПродукция;						
				
				ПроизводительИмпортерАлкогольнойПродукции = ?(ЗначениеЗаполнено(АлкогольнаяПродукция.Производитель), АлкогольнаяПродукция.Производитель, АлкогольнаяПродукция.Импортер);
				Если ЗначениеЗаполнено(ПроизводительИмпортерАлкогольнойПродукции) Тогда
					НоменклатураОбъект.ПроизводительИмпортерАлкогольнойПродукции = РегистрыСведений.СоответствиеОрганизацийЕГАИС.Получить(Новый Структура("ОрганизацияЕГАИС", ПроизводительИмпортерАлкогольнойПродукции)).Контрагент; 
				КонецЕсли;					
				
				Если ЭтоАкцизныйАлкоголь Тогда
					НоменклатураОбъект.ОбъемДАЛ 					= ?(ЗначениеЗаполнено(АлкогольнаяПродукция.Объем), 			АлкогольнаяПродукция.Объем / 10, 0.5);			
					НоменклатураОбъект.ВидАлкогольнойПродукцииЕГАИС = ?(ЗначениеЗаполнено(АлкогольнаяПродукция.ВидПродукции), 	АлкогольнаяПродукция.ВидПродукции, Справочники.ВидыАлкогольнойПродукции.НайтиПоРеквизиту("КодВидаПродукции", "200"));			
					НоменклатураОбъект.Крепость 					= ?(ЗначениеЗаполнено(АлкогольнаяПродукция.Крепость), 		АлкогольнаяПродукция.Крепость, 40); 
				Иначе
					НоменклатураОбъект.ОбъемДАЛ 					= ?(ЗначениеЗаполнено(АлкогольнаяПродукция.Объем), 			АлкогольнаяПродукция.Объем / 10, 0.5);			
					НоменклатураОбъект.ВидАлкогольнойПродукцииЕГАИС = ?(ЗначениеЗаполнено(АлкогольнаяПродукция.ВидПродукции), 	АлкогольнаяПродукция.ВидПродукции, Справочники.ВидыАлкогольнойПродукции.НайтиПоРеквизиту("КодВидаПродукции", "500"));			
					НоменклатураОбъект.Крепость 					= ?(ЗначениеЗаполнено(АлкогольнаяПродукция.Крепость), 		АлкогольнаяПродукция.Крепость, 5); 
				КонецЕсли;								
				
				НоменклатураОбъект.Наименование	= АлкогольнаяПродукция.Наименование;						
				
			Иначе	
				
				НоменклатураОбъект.ОбъемДАЛ 					= 0.5;			
				НоменклатураОбъект.ВидАлкогольнойПродукцииЕГАИС = ?(ЭтоАкцизныйАлкоголь, Справочники.ВидыАлкогольнойПродукции.НайтиПоРеквизиту("КодВидаПродукции", "200"), Справочники.ВидыАлкогольнойПродукции.НайтиПоРеквизиту("КодВидаПродукции", "500"));			
				НоменклатураОбъект.Крепость 					= ?(ЭтоАкцизныйАлкоголь, 40, 5); 
				
				НоменклатураОбъект.Наименование	= "Новый алкоголь из ТСД " + ТекущаяСтрокаMS.ИмяНеизвестного + " " + Штрихкод;						
				
			КонецЕсли;							
						
			НоменклатураОбъект.Родитель = ГруппаАлкоголяИзТСД;			
			
		Иначе	
			
			НоменклатураОбъект.Наименование	= "Новый товар из ТСД " + ТекущаяСтрокаMS.ИмяНеизвестного + " " + Штрихкод;	
			НоменклатураОбъект.Родитель 	= ГруппаТоваровИзТСД;
			
		КонецЕсли;				
		НоменклатураОбъект.НаименованиеПолное 		= НоменклатураОбъект.Наименование;
		НоменклатураОбъект.БазоваяЕдиницаИзмерения 	= УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ОсновнаяЕдиницаПоКлассификатору");
		
		Если НЕ ЗначениеЗаполнено(НоменклатураОбъект.БазоваяЕдиницаИзмерения) Тогда
			НоменклатураОбъект.БазоваяЕдиницаИзмерения = Справочники.КлассификаторЕдиницИзмерения.НайтиПоНаименованию("шт", Истина);
		КонецЕсли;	
		
		НоменклатураОбъект.СтавкаНДС 		= УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ОсновнаяСтавкаНДС");
		НоменклатураОбъект.ВидНоменклатуры 	= УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ОсновнойВидНоменклатуры");
		
		Если НЕ ЗначениеЗаполнено(НоменклатураОбъект.ВидНоменклатуры) Тогда
			НоменклатураОбъект.ВидНоменклатуры = Справочники.ВидыНоменклатуры.НайтиПоРеквизиту("ТипНоменклатуры", ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Товар"));				
		КонецЕсли;		
		
		Попытка						
			НоменклатураОбъект.ОбменДанными.Загрузка = Истина;
			НоменклатураОбъект.Записать();
			НоменклатураСсылка = НоменклатураОбъект.Ссылка;
		Исключение
			Сообщить(ОписаниеОшибки());
			Возврат;
		КонецПопытки; 						
		
		НайденнаяЕдиницаОбъект = Справочники.ЕдиницыИзмерения.СоздатьЭлемент();
		НайденнаяЕдиницаОбъект.Наименование            = СокрЛП(НоменклатураОбъект.БазоваяЕдиницаИзмерения);
		НайденнаяЕдиницаОбъект.ЕдиницаПоКлассификатору = НоменклатураОбъект.БазоваяЕдиницаИзмерения;
		НайденнаяЕдиницаОбъект.Коэффициент             = 1;
		НайденнаяЕдиницаОбъект.Владелец                = НоменклатураСсылка;
		НайденнаяЕдиницаОбъект.ОбменДанными.Загрузка   = Истина;
		
		Попытка
			НайденнаяЕдиницаОбъект.Записать();
			ЕдиницаИзмеренияСсылка = НайденнаяЕдиницаОбъект.Ссылка;			
		Исключение
			Сообщить(ОписаниеОшибки());			
			Возврат;
		КонецПопытки;			
		
		НоменклатураОбъект.ЕдиницаДляОтчетов 		= ЕдиницаИзмеренияСсылка;
		НоменклатураОбъект.ЕдиницаХраненияОстатков 	= ЕдиницаИзмеренияСсылка;
		НоменклатураОбъект.ЕдиницаИзмеренияМест 	= ЕдиницаИзмеренияСсылка;
		
		Попытка									
			НоменклатураОбъект.ОбменДанными.Загрузка = Ложь;
			НоменклатураОбъект.Записать();			
			Сообщить("В базу была добавлена номенклатура: """ + НоменклатураОбъект.Наименование + """");
		Исключение
			Сообщить(ОписаниеОшибки());
			Возврат;
		КонецПопытки; 						
		
		СтруктураПоискаКлючаСвязи.ДанныеДляЗагрузки_Строка.Вставить("ЕдиницаИзмерения", ЕдиницаИзмеренияСсылка);
		СтруктураПоискаКлючаСвязи.ДанныеДляЗагрузки_Строка.Вставить("Номенклатура", 	НоменклатураСсылка);
		
		Если ТекущаяСтрокаMS.Владелец().Колонки.Найти("АлкоМарк") <> Неопределено И ТекущаяСтрокаMS.АлкоМарк Тогда			
			УТ_10_3_ЗаполнитьСопоставлениеНоменклатурыЕГАИС(СтруктураПараметров);
		КонецЕсли;					
		
	КонецЕсли;	
	
КонецПроцедуры
 
Процедура УТ_10_3_ЗаписатьШтрихкодНоменклатуры				(СтруктураПараметров)
	
	СтруктураПоискаКлючаСвязи 	= СтруктураПараметров.СтруктураПоискаКлючаСвязи;
	ТекущаяСтрокаMS 			= СтруктураПоискаКлючаСвязи.ТаблицаMS[СтруктураПоискаКлючаСвязи.ИндексСтрокиMS];		
	ТекущиеНастройкиMS 			= СтруктураПараметров.ТекущиеНастройкиMS;	
	
	Номенклатура 	= СтруктураПоискаКлючаСвязи.ДанныеДляЗагрузки_Строка.Номенклатура;	
	МетаданныеНСИ 	= Конф_ПолучитьМетаданныеНСИ();		
	Штрихкод 		= ?(ЗначениеЗаполнено(ТекущаяСтрокаMS.ОснШК), ТекущаяСтрокаMS.ОснШК, ТекущаяСтрокаMS.ШК);
	
	СтруктураХраненияШК = Новый Структура;
	СтруктураХраненияШК.Вставить("ШК_ОбъектМетаданных", 		МетаданныеНСИ.Штрихкоды.Путь_ОбъектМетаданных);
	СтруктураХраненияШК.Вставить("ШК_ИзмерениеНоменклатуры", 	МетаданныеНСИ.Штрихкоды.Реквизиты.Номенклатура);
	СтруктураХраненияШК.Вставить("ШК_ИзмерениеУпаковки", 		МетаданныеНСИ.Штрихкоды.Реквизиты.ЕдиницаИзмерения);
	СтруктураХраненияШК.Вставить("ШК_ИзмерениеШтрихкода", 		МетаданныеНСИ.Штрихкоды.Реквизиты.Штрихкод);	
	
	Если НЕ ЗначениеЗаполнено(СокрЛП(Штрихкод)) Тогда
		Возврат;
	КонецЕсли;				
		
	Если ТекущаяСтрокаMS.Владелец().Колонки.Найти("АлкоКод") <> Неопределено И ВРег(СокрЛП(ТекущаяСтрокаMS.АлкоКод)) = ВРег(СокрЛП(Штрихкод)) Тогда
		Возврат;
	КонецЕсли;	
	
	Если ТекущиеНастройкиMS.Свойство("ИспользоватьШаблоныВесовогоТовара") 
		И ТекущиеНастройкиMS.ИспользоватьШаблоныВесовогоТовара 
		И ТекущиеНастройкиMS.Свойство("ПрефиксКодаВесовогоТовара")
		И ЗначениеЗаполнено(ТекущиеНастройкиMS.ПрефиксКодаВесовогоТовара) Тогда
		
		МассивПрефиксов = РазложитьСтрокуВМассивПодстрок(ТекущиеНастройкиMS.ПрефиксКодаВесовогоТовара);
		
		Для каждого Префикс Из МассивПрефиксов Цикл
			Если Лев(Штрихкод, СтрДлина(СокрЛП(Префикс))) = СокрЛП(Префикс) Тогда
				Возврат;
			КонецЕсли;		
		КонецЦикла; 
		
	КонецЕсли;	
	
	Если СтрЗаменить(ВРег(СокрЛП(Номенклатура.Код)), Символы.НПП, "") = ВРег(СокрЛП(Штрихкод)) Тогда
		Возврат;
	КонецЕсли;
	
	Если ГлЯдро_ШтрихКодЕстьВБазе1С(Штрихкод, СтруктураХраненияШК) Тогда
		Возврат;
	КонецЕсли;	
	
	Запись = "";
	
	РегистрСведенийМенеджер = СтруктураХраненияШК.ШК_ОбъектМетаданных;
	РегистрСведенийМенеджер = СтрЗаменить(РегистрСведенийМенеджер,"РегистрСведений.","РегистрыСведений.");
	РегистрСведенийМенеджер = СтрЗаменить(РегистрСведенийМенеджер,"Справочник.","Справочники.");
	
	Выполнить("Запись = "+РегистрСведенийМенеджер+"."
	+?(Найти(РегистрСведенийМенеджер,"Справочник")>0,"СоздатьЭлемент()","СоздатьМенеджерЗаписи()"));
	
	Запись.Штрихкод						= Штрихкод;
	Запись.Владелец						= Номенклатура;
	Запись.ТипШтрихкода 				= ПредопределенноеЗначение("ПланВидовХарактеристик.ТипыШтрихкодов.EAN13");
	Запись.ЕдиницаИзмерения 			= ?(ЗначениеЗаполнено(ТекущаяСтрокаMS.ЕдиницаИзмерения), ТекущаяСтрокаMS.ЕдиницаИзмерения, Номенклатура.ЕдиницаХраненияОстатков);
	Запись.ХарактеристикаНоменклатуры 	= ТекущаяСтрокаMS.Характеристика;
	Запись.СерияНоменклатуры 			= ТекущаяСтрокаMS.Серия;
	Запись.Качество     				= ПредопределенноеЗначение("Справочник.Качество.Новый");			
	
	Попытка
		Запись.Записать();
		Сообщить("Для номенклатуры """ + Номенклатура.Наименование + """ был добавлен штрихкод """ + Штрихкод + """");
	Исключение
	    Сообщить(ОписаниеОшибки());
	КонецПопытки; 	
				
КонецПроцедуры	

Процедура УТ_10_3_ЗаполнитьПоОстаткамНаСкладе				(СтрокаТабличнойЧасти, Док1СРезультат, ТолькоУчетные = Истина) Экспорт

	Перем ВремСклад;
	УчитыватьСерии = Истина;
		
	Выполнить("Если РегистрыСведений.УчетнаяПолитика.ПолучитьПоследнее(Док1СРезультат.Дата).ВестиПартионныйУчетПоСкладам Тогда
			|	ВремСклад = Док1СРезультат.Склад;
			|Иначе
			|	ВремСклад = Справочники.Склады.ПустаяСсылка();
			|КонецЕсли;");

	Запрос = Новый Запрос;
	
	Если Док1СРезультат.Склад.ВидСклада = ПредопределенноеЗначение("Перечисление.ВидыСкладов.НТТ") Тогда

		Запрос.Текст =
		"ВЫБРАТЬ
		|	ОстаткиТоваров.Номенклатура,
		|	ОстаткиТоваров.ХарактеристикаНоменклатуры,"
		+?(УчитыватьСерии, "
		|	ОстаткиТоваров.СерияНоменклатуры,", "") + "
		|	ОстаткиТоваров.Номенклатура.ЕдиницаХраненияОстатков КАК ЕдиницаХранения,
		|	ОстаткиТоваров.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент КАК КоэффициентЕдиницыХранения,
		|	ОстаткиТоваров.ЦенаВРознице,
		|	ВЫБОР
		|		КОГДА (СУММА(ОстаткиПартий.КоличествоОстаток) = 0)
		|		  ИЛИ (СУММА(ОстаткиПартий.КоличествоОстаток) ЕСТЬ NULL) ТОГДА
		|			0 
		|		ИНАЧЕ
		|			СУММА(ОстаткиПартий.СтоимостьОстаток)*СУММА(ОстаткиТоваров.КоличествоОстаток)
		|			/ СУММА(ОстаткиПартий.КоличествоОстаток)
		|	КОНЕЦ                                   КАК Сумма,
		|	СУММА(ОстаткиТоваров.КоличествоОстаток) КАК Количество
		|ИЗ
		|	РегистрНакопления.ТоварыВНТТ.Остатки(&МоментДокумента,
		|	                                                   Склад = &Склад И Номенклатура = &Номенклатура И ХарактеристикаНоменклатуры = &ХарактеристикаНоменклатуры И СерияНоменклатуры = &СерияНоменклатуры
		|//	                                                 И ЦенаВРознице > 0
		|) КАК ОстаткиТоваров
		|ЛЕВОЕ СОЕДИНЕНИЕ
		|	РегистрНакопления.ПартииТоваровНаСкладах.Остатки(&МоментДокумента, 
		|	                                                  Склад = &ПартионныйСклад И Номенклатура = &Номенклатура И ХарактеристикаНоменклатуры = &ХарактеристикаНоменклатуры И СерияНоменклатуры = &СерияНоменклатуры) КАК ОстаткиПартий
		|ПО
		|	ОстаткиТоваров.Номенклатура = ОстаткиПартий.Номенклатура
		|	И ОстаткиТоваров.ХарактеристикаНоменклатуры = ОстаткиПартий.ХарактеристикаНоменклатуры"
		+?(УчитыватьСерии, "
		|	И (ОстаткиТоваров.СерияНоменклатуры          = ОстаткиПартий.СерияНоменклатуры
		|		ИЛИ НЕ ОстаткиТоваров.Номенклатура.ВестиПартионныйУчетПоСериям)", "") + "
		|
		|{ГДЕ ОстаткиТоваров.Номенклатура КАК Номенклатура, 
		|     ОстаткиТоваров.Номенклатура.НоменклатурнаяГруппа КАК НоменклатурнаяГруппа}
		|
		|СГРУППИРОВАТЬ ПО
		|	ОстаткиТоваров.Номенклатура,
		|	ОстаткиТоваров.ХарактеристикаНоменклатуры,"
		+?(УчитыватьСерии, "
		|	ОстаткиТоваров.СерияНоменклатуры,", "") + "
		|	ОстаткиТоваров.ЦенаВРознице";
	Иначе
		Если Док1СРезультат.Склад.ВидСклада = ПредопределенноеЗначение("Перечисление.ВидыСкладов.Оптовый") Тогда
			РегОстатки = "ТоварыНаСкладах";
		Иначе
			РегОстатки = "ТоварыВРознице";
		КонецЕсли;

		Запрос.Текст =
		"ВЫБРАТЬ
		|	ОстаткиТоваров.Номенклатура,
		|	ОстаткиТоваров.ХарактеристикаНоменклатуры,"
		+?(УчитыватьСерии, "
		|	ОстаткиТоваров.СерияНоменклатуры,", "") + "
		|	ОстаткиТоваров.Номенклатура.ЕдиницаХраненияОстатков КАК ЕдиницаХранения,
		|	ОстаткиТоваров.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент КАК КоэффициентЕдиницыХранения,
		|	ОстаткиТоваров.Качество,
		|	СУММА(ОстаткиТоваров.КоличествоОстаток) КАК Количество,
		|	ВЫБОР
		|		КОГДА (СУММА(ОстаткиПартий.КоличествоОстаток) = 0)
		|		  ИЛИ (СУММА(ОстаткиПартий.КоличествоОстаток) ЕСТЬ NULL) ТОГДА
		|			0 
		|		ИНАЧЕ
		|			СУММА(ОстаткиПартий.СтоимостьОстаток)*СУММА(ОстаткиТоваров.КоличествоОстаток)
		|			/ СУММА(ОстаткиПартий.КоличествоОстаток)
		|	КОНЕЦ                                  КАК Сумма
		|ИЗ
		|	РегистрНакопления." + РегОстатки + ".Остатки(&МоментДокумента, Склад = &Склад И Номенклатура = &Номенклатура И ХарактеристикаНоменклатуры = &ХарактеристикаНоменклатуры И СерияНоменклатуры = &СерияНоменклатуры)
		|КАК ОстаткиТоваров
		|
		|ЛЕВОЕ СОЕДИНЕНИЕ
		|	РегистрНакопления.ПартииТоваровНаСкладах.Остатки(&МоментДокумента, 
		|	                                                  Склад = &ПартионныйСклад И Номенклатура = &Номенклатура И ХарактеристикаНоменклатуры = &ХарактеристикаНоменклатуры И СерияНоменклатуры = &СерияНоменклатуры) КАК ОстаткиПартий
		|ПО
		|	ОстаткиТоваров.Номенклатура = ОстаткиПартий.Номенклатура
		|	И ОстаткиТоваров.ХарактеристикаНоменклатуры = ОстаткиПартий.ХарактеристикаНоменклатуры"
		+?(УчитыватьСерии, "
		|	И (ОстаткиТоваров.СерияНоменклатуры          = ОстаткиПартий.СерияНоменклатуры
		|		ИЛИ НЕ ОстаткиТоваров.Номенклатура.ВестиПартионныйУчетПоСериям)", "") + "
		|	И ОстаткиТоваров.Качество                   = ОстаткиПартий.Качество
		|
		|{ГДЕ ОстаткиТоваров.Номенклатура КАК Номенклатура, 
		|     ОстаткиТоваров.Номенклатура.НоменклатурнаяГруппа КАК НоменклатурнаяГруппа}
		|
		|СГРУППИРОВАТЬ ПО
		|	ОстаткиТоваров.Номенклатура,
		|	ОстаткиТоваров.ХарактеристикаНоменклатуры,"
		+?(УчитыватьСерии, "
		|	ОстаткиТоваров.СерияНоменклатуры,", "") + "
		|	ОстаткиТоваров.Качество";

	КонецЕсли;

	Запрос.УстановитьПараметр("Номенклатура", СтрокаТабличнойЧасти.Номенклатура);
	Запрос.УстановитьПараметр("ХарактеристикаНоменклатуры", СтрокаТабличнойЧасти.ХарактеристикаНоменклатуры);
	Запрос.УстановитьПараметр("СерияНоменклатуры", СтрокаТабличнойЧасти.СерияНоменклатуры);
	Запрос.УстановитьПараметр("Склад",           Док1СРезультат.Склад);
	Запрос.УстановитьПараметр("ПартионныйСклад", ВремСклад);
	Если Док1СРезультат.ЭтоНовый() Тогда
		Запрос.УстановитьПараметр("МоментДокумента", КонецДня(Док1СРезультат.Дата));
	Иначе
		Запрос.УстановитьПараметр("МоментДокумента", Док1СРезультат.МоментВремени());
	КонецЕсли;

	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		
		СтрокаТабличнойЧасти.КоличествоУчет   = Выборка.Количество;		
		СтрокаТабличнойЧасти.СуммаУчет        = Выборка.Сумма;		
		СтрокаТабличнойЧасти.Цена             = СтрокаТабличнойЧасти.СуммаУчет / СтрокаТабличнойЧасти.КоличествоУчет;
		СтрокаТабличнойЧасти.Сумма        	  = СтрокаТабличнойЧасти.КоличествоУчет * СтрокаТабличнойЧасти.Цена;				

	КонецЕсли;;

КонецПроцедуры

Функция УТ_10_3_НайтиСоздатьГруппуТоваровИзТСД()

	МетаданныеНСИ 		= Конф_ПолучитьМетаданныеНСИ();
	НаименованиеГруппы 	= "Новые товары с ТСД";
	
	ГруппаТоваровИзТСД = Справочники[МетаданныеНСИ.Номенклатура.ИмяСправочника].НайтиПоНаименованию(НаименованиеГруппы, Истина);
	
	Если ЗначениеЗаполнено(ГруппаТоваровИзТСД) Тогда
		
		Возврат ГруппаТоваровИзТСД;
		
	Иначе	
		
		ГруппаТоваровИзТСДОбъект = Справочники[МетаданныеНСИ.Номенклатура.ИмяСправочника].СоздатьГруппу();
		
		ГруппаТоваровИзТСДОбъект.ВидНоменклатуры 	= Справочники.ВидыНоменклатуры.НайтиПоРеквизиту("ТипНоменклатуры", ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Товар"));				
		ГруппаТоваровИзТСДОбъект.Наименование 		= НаименованиеГруппы;
		
		Попытка
			ГруппаТоваровИзТСДОбъект.ОбменДанными.Загрузка = Истина;
			ГруппаТоваровИзТСДОбъект.Записать();
			Возврат ГруппаТоваровИзТСДОбъект.Ссылка; 									
		Исключение
			Сообщить(ОписаниеОшибки());
			Возврат Неопределено;
		КонецПопытки; 
				
	КонецЕсли; 
	
КонецФункции

Функция УТ_10_3_НайтиСоздатьГруппуАлкоголяИзТСД()

	МетаданныеНСИ 		= Конф_ПолучитьМетаданныеНСИ();
	НаименованиеГруппы 	= "Алкоголь";
	
	ГруппаТоваровИзТСД = УТ_10_3_НайтиСоздатьГруппуТоваровИзТСД();
	
	ГруппаАлкоголяИзТСД = Справочники[МетаданныеНСИ.Номенклатура.ИмяСправочника].НайтиПоНаименованию(НаименованиеГруппы, Истина, ГруппаТоваровИзТСД);
	
	Если ЗначениеЗаполнено(ГруппаАлкоголяИзТСД) Тогда
		
		Возврат ГруппаАлкоголяИзТСД;
		
	Иначе	
		
		ГруппаАлкоголяИзТСДОбъект = Справочники[МетаданныеНСИ.Номенклатура.ИмяСправочника].СоздатьГруппу();
		
		ГруппаАлкоголяИзТСДОбъект.Родитель			= ГруппаТоваровИзТСД;
		ГруппаАлкоголяИзТСДОбъект.ВидНоменклатуры 	= Справочники.ВидыНоменклатуры.НайтиПоРеквизиту("ТипНоменклатуры", ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Товар"));				
		ГруппаАлкоголяИзТСДОбъект.Наименование 		= НаименованиеГруппы;
		
		Попытка
			ГруппаАлкоголяИзТСДОбъект.ОбменДанными.Загрузка = Истина;
			ГруппаАлкоголяИзТСДОбъект.Записать();
			Возврат ГруппаАлкоголяИзТСДОбъект.Ссылка; 									
		Исключение
			Сообщить(ОписаниеОшибки());
			Возврат Неопределено;
		КонецПопытки; 
				
	КонецЕсли; 
	
КонецФункции

Процедура ТТНВходящаяЕГАИС_УстановитьСтатусПринято(ДокументОбъект)
	
	ДокументОбъект.СтатусПроверкиИПодбора = ПредопределенноеЗначение("Перечисление.СтатусыПроверкиИПодбораЕГАИС.Завершено");

	ПараметрыОбновленияСтатуса 						= Вычислить("ИнтеграцияЕГАИС.ПараметрыОбновленияСтатуса()");
	ПараметрыОбновленияСтатуса.ОбновлятьДвижения 	= Ложь;
	ПараметрыОбновленияСтатуса.СтатусОбработки   	= ПредопределенноеЗначение("Перечисление.СтатусыОбработкиСообщенийЕГАИС.ПринятИзЕГАИС");
	ПараметрыОбновленияСтатуса.ДокументОбъект    	= ДокументОбъект;
	
	Выполнить("Документы.ТТНВходящаяЕГАИС.ОбновитьСтатусПослеПолученияДанных(ДокументОбъект.Ссылка, Перечисления.ВидыДокументовЕГАИС.ТТН, ПараметрыОбновленияСтатуса);");
	
КонецПроцедуры

Процедура ТТНВходящаяЕГАИС_ТЧ_АкцизныеМарки_ЗаполнитьСправки2(ДокументОбъект)
	
	Попытка 
		АкцизныеМарки = Вычислить("Документы.ТТНВходящаяЕГАИС.ВходящиеАкцизныеМарки(ДокументОбъект.Ссылка)");
	Исключение
		Сообщить("Ошибка при заполнении таблицы акцизных марок: " + ОписаниеОшибки());
		Возврат;
	КонецПопытки;
	
	ТаблицаДокумента = ДокументОбъект.АкцизныеМарки;
	ТаблицаДокументаТовары = ДокументОбъект.Товары;
	
	Для Каждого СтрокаДокумента Из ТаблицаДокумента Цикл
		ПараметрыОтбора = Новый Структура;
		ПараметрыОтбора.Вставить("ЗначениеШтрихкода", СтрокаДокумента.АкцизнаяМарка.ЗначениеШтрихкода);
		СтрокиАкцизныхМарок = АкцизныеМарки.НайтиСтроки(ПараметрыОтбора);
		Если СтрокиАкцизныхМарок.Количество() > 0 Тогда 
			СтрокаТаблицы = СтрокиАкцизныхМарок[0];
			СтрокаДокумента.Справка2 = СтрокаТаблицы.Справка2; 
			ПараметрыОтбора = Новый Структура;
			ПараметрыОтбора.Вставить("Справка2", СтрокаДокумента.Справка2);
			СтрокиТоваров = ТаблицаДокументаТовары.НайтиСтроки(ПараметрыОтбора);
			Если СтрокиТоваров.Количество() > 0 Тогда
				ТоварыСтрока = СтрокиТоваров[0];	
				СтрокаДокумента.ИдентификаторСтроки = ТоварыСтрока.ИдентификаторСтроки;
			КонецЕсли;
		Конецесли;
	КонецЦикла;
		
КонецПроцедуры

Процедура ТТНВходящаяЕГАИС_ТЧ_Товары_ЗаполнитьКоличествоФакт(СтруктураПараметров)

	Док1СРезультат 	= СтруктураПараметров.Док1СРезультат;	
	СтрокаНастройки = СтруктураПараметров.СтрокаНастройки;
	Товары		 	= Док1СРезультат.Товары;	
	АкцизныеМарки 	= Док1СРезультат.АкцизныеМарки;		
	
			
	Для каждого Строка Из Товары Цикл	
		Если Строка.Количество <> Строка.КоличествоФакт Тогда
			Док1СРезультат.ЕстьРасхождения = Истина;
			Прервать;
		КонецЕсли;                                                                                       
	КонецЦикла;	

КонецПроцедуры

Процедура ТТНВходящаяЕГАИС_ПроверитьАкцизныеМарки(СтруктураПараметров)

	Док1СРезультат 	= СтруктураПараметров.Док1СРезультат;	
	СтрокаНастройки = СтруктураПараметров.СтрокаНастройки;
	Товары		 	= Док1СРезультат.Товары;	
	АкцизныеМарки 	= Док1СРезультат.АкцизныеМарки;
	ДокументТСД		= СтруктураПараметров.ДанныеДокументаMS;	
	
	ТипЧисло10 		= Новый ОписаниеТипов("Число", , , Новый КвалификаторыЧисла(10, 0, ДопустимыйЗнак.Любой));
	ТипЧисло15 		= Новый ОписаниеТипов("Число", , , Новый КвалификаторыЧисла(15, 0, ДопустимыйЗнак.Любой));
	ТипЧисло15_3 	= Новый ОписаниеТипов("Число", , , Новый КвалификаторыЧисла(15, 3, ДопустимыйЗнак.Любой));
	ТипБулево 		= Новый ОписаниеТипов("Булево");
	
	ТипСерияНоменклатуры = Новый ОписаниеТипов("СправочникСсылка.СерииНоменклатуры");	
						
	ОписаниеТиповТипУпаковки = Новый ОписаниеТипов;
	ОписаниеТиповТипУпаковки.Типы().Добавить(Тип("ПеречислениеСсылка.ТипыУпаковок"));
	ОписаниеТиповТипУпаковки.Типы().Добавить(Тип("ПеречислениеСсылка.ПрочиеЗоныПересчетаАлкогольнойПродукции"));	
	
	ВозвращаемоеДерево = Новый ДеревоЗначений;
	ВозвращаемоеДерево.Колонки.Добавить("ЗначениеШтрихкода",       	Новый ОписаниеТипов("Строка", , , , Новый КвалификаторыСтроки(200, ДопустимаяДлина.Переменная)));
	ВозвращаемоеДерево.Колонки.Добавить("ТипУпаковки",             	ОписаниеТиповТипУпаковки);
	ВозвращаемоеДерево.Колонки.Добавить("АлкогольнаяПродукция",		Новый ОписаниеТипов("СправочникСсылка.КлассификаторАлкогольнойПродукцииЕГАИС"));
	ВозвращаемоеДерево.Колонки.Добавить("Номенклатура",				Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	ВозвращаемоеДерево.Колонки.Добавить("Характеристика",			Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
	ВозвращаемоеДерево.Колонки.Добавить("Серия",					ТипСерияНоменклатуры);
	ВозвращаемоеДерево.Колонки.Добавить("Справка2",					Новый ОписаниеТипов("СправочникСсылка.Справки2ЕГАИС"));
	ВозвращаемоеДерево.Колонки.Добавить("ВсеСправки2Указаны",		ТипБулево);
	ВозвращаемоеДерево.Колонки.Добавить("СтатусПроверки",          	Новый ОписаниеТипов("ПеречислениеСсылка.СтатусыПроверкиНаличияАлкогольнойПродукции"));
	ВозвращаемоеДерево.Колонки.Добавить("КоличествоАкцизныхМарок", 	ТипЧисло10);
	ВозвращаемоеДерево.Колонки.Добавить("ИдентификаторСтроки",		Новый ОписаниеТипов("Строка", , , , Новый КвалификаторыСтроки(36, ДопустимаяДлина.Переменная)));	
	ВозвращаемоеДерево.Колонки.Добавить("ШтрихкодУпаковки", 		Новый ОписаниеТипов("СправочникСсылка.ШтрихкодыУпаковокТоваров"));
	
	// колонки из реквизита формы "ДеревоМаркированнойПродукции", обработка "ПроверкаИПодборАлкогольнойПродукцииЕГАИС"
	// необходимы для корректной загрузки данных подбора из документа в форму обработки
		
	ВозвращаемоеДерево.Колонки.Добавить("ВУпаковкеРазнаяАлкогольнаяПродукция",	ТипБулево);
	ВозвращаемоеДерево.Колонки.Добавить("ВУпаковкеРазнаяНоменклатура",			ТипБулево);
	ВозвращаемоеДерево.Колонки.Добавить("ВУпаковкеРазныеСерии",					ТипБулево);
	ВозвращаемоеДерево.Колонки.Добавить("ВУпаковкеРазныеСправки2",				ТипБулево);
	ВозвращаемоеДерево.Колонки.Добавить("ВУпаковкеРазныеХарактеристики",		ТипБулево);
	ВозвращаемоеДерево.Колонки.Добавить("ВсяУпаковкаПроверена",					ТипБулево);
	ВозвращаемоеДерево.Колонки.Добавить("ИдетПроверкаДаннойУпаковки",			ТипБулево);
	ВозвращаемоеДерево.Колонки.Добавить("ИндексКартинкиСтатусПроверки",			ТипЧисло10);
	ВозвращаемоеДерево.Колонки.Добавить("ИндексКартинкиШтрихкод",				ТипЧисло10);
	ВозвращаемоеДерево.Колонки.Добавить("КоличествоПодчиненныхБутылок",			ТипЧисло10);
	ВозвращаемоеДерево.Колонки.Добавить("КоличествоПодчиненныхВНаличии",		ТипЧисло10);
	ВозвращаемоеДерево.Колонки.Добавить("КоличествоПодчиненныхВсего",			ТипЧисло10);
	ВозвращаемоеДерево.Колонки.Добавить("КоличествоПодчиненныхНеПроверялось",	ТипЧисло10);
	ВозвращаемоеДерево.Колонки.Добавить("КоличествоПодчиненныхНеЧислилось",		ТипЧисло10);
	ВозвращаемоеДерево.Колонки.Добавить("КоличествоПодчиненныхОтложено",		ТипЧисло15);
	ВозвращаемоеДерево.Колонки.Добавить("КоличествоПодчиненныхОтсутствует",		ТипЧисло10);
	ВозвращаемоеДерево.Колонки.Добавить("КоличествоПодчиненныхУпаковок",		ТипЧисло10);
	ВозвращаемоеДерево.Колонки.Добавить("НеСодержитсяВДанныхДокумента",			ТипБулево);
	ВозвращаемоеДерево.Колонки.Добавить("НеСоответствуетОтбору",				ТипБулево);
	ВозвращаемоеДерево.Колонки.Добавить("НомерСтикераОтложено",					Новый ОписаниеТипов("Строка", , , , Новый КвалификаторыСтроки(30, ДопустимаяДлина.Переменная)));	
	ВозвращаемоеДерево.Колонки.Добавить("Представление",						Новый ОписаниеТипов("Строка", , , , Новый КвалификаторыСтроки(250, ДопустимаяДлина.Переменная)));	
	ВозвращаемоеДерево.Колонки.Добавить("ПредставлениеПроверкиПодчиненных",		Новый ОписаниеТипов("Строка", , , , Новый КвалификаторыСтроки(250, ДопустимаяДлина.Переменная)));	
	ВозвращаемоеДерево.Колонки.Добавить("ПредставлениеСодержимоеУпаковки",		Новый ОписаниеТипов("Строка", , , , Новый КвалификаторыСтроки(60, ДопустимаяДлина.Переменная)));	
	ВозвращаемоеДерево.Колонки.Добавить("ТребуетсяПеремаркировка",				ТипБулево);
	ВозвращаемоеДерево.Колонки.Добавить("ХешСумма",								Новый ОписаниеТипов("Строка", , , , Новый КвалификаторыСтроки(50, ДопустимаяДлина.Переменная)));	
	ВозвращаемоеДерево.Колонки.Добавить("ШтрихкодУпаковкиПоДаннымДокумента",	Новый ОписаниеТипов("Строка", , , , Новый КвалификаторыСтроки(200, ДопустимаяДлина.Переменная)));	

	ТаблицаНеМаркируемойПродукции = Новый ТаблицаЗначений;
	ТаблицаНеМаркируемойПродукции.Колонки.Добавить("АлкогольнаяПродукция",	Новый ОписаниеТипов("СправочникСсылка.КлассификаторАлкогольнойПродукцииЕГАИС"));	
	ТаблицаНеМаркируемойПродукции.Колонки.Добавить("КоличествоПоДокументу",	ТипЧисло15_3);
	ТаблицаНеМаркируемойПродукции.Колонки.Добавить("КоличествоФактическое",	ТипЧисло15_3);
	ТаблицаНеМаркируемойПродукции.Колонки.Добавить("Справка2",				Новый ОписаниеТипов("СправочникСсылка.Справки2ЕГАИС"));	
	
	ДанныеПроверяемогоДокумента = Вычислить("Документы.ТТНВходящаяЕГАИС.ВходящееДеревоУпаковок(Док1СРезультат.Ссылка)"); 	
	
	СкопироватьДеревоЗначений(ДанныеПроверяемогоДокумента.ДеревоУпаковок.Строки, ВозвращаемоеДерево.Строки);		
	
	УпаковкиДокумента = Новый СписокЗначений;
	
	ЗаполнитьДанныеАкцизныхМарок(ВозвращаемоеДерево.Строки, ДокументТСД.СтрокиФакт,УпаковкиДокумента);	
	
	ЗаполнитьТаблицуПартионнойПродукции(ДанныеПроверяемогоДокумента.ТоварыБезАкцизныхМарок, ТаблицаНеМаркируемойПродукции, Товары);	
	
	АлкогольнаяПродукцияКОпределениюСправок2 = Новый ДеревоЗначений;	
	АлкогольнаяПродукцияКОпределениюСправок2.Колонки.Добавить("Номенклатура",			Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	АлкогольнаяПродукцияКОпределениюСправок2.Колонки.Добавить("Характеристика",			Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
	АлкогольнаяПродукцияКОпределениюСправок2.Колонки.Добавить("Серия",					ТипСерияНоменклатуры);
	АлкогольнаяПродукцияКОпределениюСправок2.Колонки.Добавить("АлкогольнаяПродукция",	Новый ОписаниеТипов("СправочникСсылка.КлассификаторАлкогольнойПродукцииЕГАИС"));
	АлкогольнаяПродукцияКОпределениюСправок2.Колонки.Добавить("Справка2",				Новый ОписаниеТипов("СправочникСсылка.Справки2ЕГАИС"));
	АлкогольнаяПродукцияКОпределениюСправок2.Колонки.Добавить("Количество",				ТипЧисло15);
	АлкогольнаяПродукцияКОпределениюСправок2.Колонки.Добавить("КоличествоРаспределено",	ТипЧисло15);
	АлкогольнаяПродукцияКОпределениюСправок2.Колонки.Добавить("Маркируемая",			ТипБулево);
	АлкогольнаяПродукцияКОпределениюСправок2.Колонки.Добавить("ИндексАкцизнойМарки",    ТипЧисло10);	
	
	ДанныеХранилища = Новый Структура;
	ДанныеХранилища.Вставить("АлкогольнаяПродукцияКОпределениюСправок2",	АлкогольнаяПродукцияКОпределениюСправок2);
	ДанныеХранилища.Вставить("ДанныеРанееСгенерированныхШтрихкодов");
	ДанныеХранилища.Вставить("ДеревоМаркированнойПродукции", 				ВозвращаемоеДерево);
	ДанныеХранилища.Вставить("ДобавленныеУпаковки",							Новый СписокЗначений);
	ДанныеХранилища.Вставить("ДоступныеДляПроверкиУпаковки",				Новый СписокЗначений);
	ДанныеХранилища.Вставить("ПулНеизвестныхАкцизныхМарок", 				Новый ТаблицаЗначений);
	ДанныеХранилища.Вставить("СледующийСтикерОтложено",						0);
	ДанныеХранилища.Вставить("ТаблицаНеМаркируемойПродукции",				ТаблицаНеМаркируемойПродукции);
	ДанныеХранилища.Вставить("УпаковкиДокумента",							УпаковкиДокумента);
	ДанныеХранилища.Вставить("ШтрихкодТекущейПроверяемойУпаковки",			"");			
	
	ШтрихкодыУпаковок = Вычислить("ИнтеграцияЕГАИС.ШтрихкодыУпаковок(ИнтеграцияЕГАИС.ЗначенияШтрихкодовИзДереваУпаковок(ВозвращаемоеДерево))");		
		
	Выполнить("Справочники.ШтрихкодыУпаковокТоваров.СоздатьШтрихкодыУпаковок(ВозвращаемоеДерево, ШтрихкодыУпаковок, Ложь, Док1СРезультат.Грузополучатель);");		
	
	Док1СРезультат.ДанныеПроверкиИПодбора = Новый ХранилищеЗначения(ДанныеХранилища);		
		
КонецПроцедуры

Процедура СформироватьПредставлениеДляСтрокиДереваМаркированнойПродукции(СтрокаДерева)

	Если СтрокаДерева.ТипУпаковки = ПредопределенноеЗначение("Перечисление.ПрочиеЗоныПересчетаАлкогольнойПродукции.БутылкиБезКоробки") Тогда
		СтрокаДерева.Представление = НСтр("ru = 'Бутылки без упаковки'");
	ИначеЕсли ПустаяСтрока(СтрокаДерева.ЗначениеШтрихкода) 
		И (СтрокаДерева.ТипУпаковки = ПредопределенноеЗначение("Перечисление.ТипыУпаковок.МонотоварнаяУпаковка")
		Или СтрокаДерева.ТипУпаковки = ПредопределенноеЗначение("Перечисление.ТипыУпаковок.МультитоварнаяУпаковка")) Тогда
		
		СтрокаДерева.Представление = НСтр("ru = '<не маркирована>'");
		
	Иначе
		СтрокаДерева.Представление = СтрокаДерева.ЗначениеШтрихкода;
	КонецЕсли;

КонецПроцедуры

Процедура ТТНИсходящаяЕГАИС_ПроверитьАкцизныеМарки(СтруктураПараметров)
	
	//Формируем структуру для хранилища значений, которое используется в обработке "проверка и подбор АП" 
	
	ТипЧисло10 		= Новый ОписаниеТипов("Число", , , Новый КвалификаторыЧисла(10, 0, ДопустимыйЗнак.Любой));
	ТипЧисло15 		= Новый ОписаниеТипов("Число", , , Новый КвалификаторыЧисла(15, 0, ДопустимыйЗнак.Любой));
	ТипЧисло15_3 	= Новый ОписаниеТипов("Число", , , Новый КвалификаторыЧисла(15, 3, ДопустимыйЗнак.Любой));
	ТипБулево 		= Новый ОписаниеТипов("Булево");
		
	ТипСерияНоменклатуры = Новый ОписаниеТипов("СправочникСсылка.СерииНоменклатуры");	
						
	ОписаниеТиповТипУпаковки = Новый ОписаниеТипов;
	ОписаниеТиповТипУпаковки.Типы().Добавить(Тип("ПеречислениеСсылка.ТипыУпаковок"));
	ОписаниеТиповТипУпаковки.Типы().Добавить(Тип("ПеречислениеСсылка.ПрочиеЗоныПересчетаАлкогольнойПродукции"));	
	
	ВозвращаемоеДерево = Новый ДеревоЗначений;
	ВозвращаемоеДерево.Колонки.Добавить("ЗначениеШтрихкода",       	Новый ОписаниеТипов("Строка", , , , Новый КвалификаторыСтроки(200, ДопустимаяДлина.Переменная)));
	ВозвращаемоеДерево.Колонки.Добавить("ТипУпаковки",             	ОписаниеТиповТипУпаковки);
	ВозвращаемоеДерево.Колонки.Добавить("АлкогольнаяПродукция",		Новый ОписаниеТипов("СправочникСсылка.КлассификаторАлкогольнойПродукцииЕГАИС"));
	ВозвращаемоеДерево.Колонки.Добавить("Номенклатура",				Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	ВозвращаемоеДерево.Колонки.Добавить("Характеристика",			Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
	ВозвращаемоеДерево.Колонки.Добавить("Серия",					ТипСерияНоменклатуры);
	ВозвращаемоеДерево.Колонки.Добавить("Справка2",					Новый ОписаниеТипов("СправочникСсылка.Справки2ЕГАИС"));
	ВозвращаемоеДерево.Колонки.Добавить("ВсеСправки2Указаны",		ТипБулево);
	ВозвращаемоеДерево.Колонки.Добавить("СтатусПроверки",          	Новый ОписаниеТипов("ПеречислениеСсылка.СтатусыПроверкиНаличияАлкогольнойПродукции"));
	ВозвращаемоеДерево.Колонки.Добавить("КоличествоАкцизныхМарок", 	ТипЧисло10);
	ВозвращаемоеДерево.Колонки.Добавить("ИдентификаторСтроки",		Новый ОписаниеТипов("Строка", , , , Новый КвалификаторыСтроки(36, ДопустимаяДлина.Переменная)));	
	ВозвращаемоеДерево.Колонки.Добавить("ШтрихкодУпаковки", 		Новый ОписаниеТипов("СправочникСсылка.ШтрихкодыУпаковокТоваров"));
	  		
	ВозвращаемоеДерево.Колонки.Добавить("ВУпаковкеРазнаяАлкогольнаяПродукция",	ТипБулево);
	ВозвращаемоеДерево.Колонки.Добавить("ВУпаковкеРазнаяНоменклатура",			ТипБулево);
	ВозвращаемоеДерево.Колонки.Добавить("ВУпаковкеРазныеСерии",					ТипБулево);
	ВозвращаемоеДерево.Колонки.Добавить("ВУпаковкеРазныеСправки2",				ТипБулево);
	ВозвращаемоеДерево.Колонки.Добавить("ВУпаковкеРазныеХарактеристики",		ТипБулево);
	ВозвращаемоеДерево.Колонки.Добавить("ВсяУпаковкаПроверена",					ТипБулево);
	ВозвращаемоеДерево.Колонки.Добавить("ИдетПроверкаДаннойУпаковки",			ТипБулево);
	ВозвращаемоеДерево.Колонки.Добавить("ИндексКартинкиСтатусПроверки",			ТипЧисло10);
	ВозвращаемоеДерево.Колонки.Добавить("ИндексКартинкиШтрихкод",				ТипЧисло10);
	ВозвращаемоеДерево.Колонки.Добавить("КоличествоПодчиненныхБутылок",			ТипЧисло10);
	ВозвращаемоеДерево.Колонки.Добавить("КоличествоПодчиненныхВНаличии",		ТипЧисло10);
	ВозвращаемоеДерево.Колонки.Добавить("КоличествоПодчиненныхВсего",			ТипЧисло10);
	ВозвращаемоеДерево.Колонки.Добавить("КоличествоПодчиненныхНеПроверялось",	ТипЧисло10);
	ВозвращаемоеДерево.Колонки.Добавить("КоличествоПодчиненныхНеЧислилось",		ТипЧисло10);
	ВозвращаемоеДерево.Колонки.Добавить("КоличествоПодчиненныхОтложено",		ТипЧисло15);
	ВозвращаемоеДерево.Колонки.Добавить("КоличествоПодчиненныхОтсутствует",		ТипЧисло10);
	ВозвращаемоеДерево.Колонки.Добавить("КоличествоПодчиненныхУпаковок",		ТипЧисло10);
	ВозвращаемоеДерево.Колонки.Добавить("НеСодержитсяВДанныхДокумента",			ТипБулево);
	ВозвращаемоеДерево.Колонки.Добавить("НеСоответствуетОтбору",				ТипБулево);
	ВозвращаемоеДерево.Колонки.Добавить("НомерСтикераОтложено",					Новый ОписаниеТипов("Строка", , , , Новый КвалификаторыСтроки(30, ДопустимаяДлина.Переменная)));	
	ВозвращаемоеДерево.Колонки.Добавить("Представление",						Новый ОписаниеТипов("Строка", , , , Новый КвалификаторыСтроки(250, ДопустимаяДлина.Переменная)));	
	ВозвращаемоеДерево.Колонки.Добавить("ПредставлениеПроверкиПодчиненных",		Новый ОписаниеТипов("Строка", , , , Новый КвалификаторыСтроки(250, ДопустимаяДлина.Переменная)));	
	ВозвращаемоеДерево.Колонки.Добавить("ПредставлениеСодержимоеУпаковки",		Новый ОписаниеТипов("Строка", , , , Новый КвалификаторыСтроки(60, ДопустимаяДлина.Переменная)));	
	ВозвращаемоеДерево.Колонки.Добавить("ТребуетсяПеремаркировка",				ТипБулево);
	ВозвращаемоеДерево.Колонки.Добавить("ХешСумма",								Новый ОписаниеТипов("Строка", , , , Новый КвалификаторыСтроки(50, ДопустимаяДлина.Переменная)));	
	ВозвращаемоеДерево.Колонки.Добавить("ШтрихкодУпаковкиПоДаннымДокумента",	Новый ОписаниеТипов("Строка", , , , Новый КвалификаторыСтроки(200, ДопустимаяДлина.Переменная)));	

	ТаблицаНеМаркируемойПродукции = Новый ТаблицаЗначений;
	ТаблицаНеМаркируемойПродукции.Колонки.Добавить("АлкогольнаяПродукция",	Новый ОписаниеТипов("СправочникСсылка.КлассификаторАлкогольнойПродукцииЕГАИС"));	
	ТаблицаНеМаркируемойПродукции.Колонки.Добавить("КоличествоПоДокументу",	ТипЧисло15_3);
	ТаблицаНеМаркируемойПродукции.Колонки.Добавить("КоличествоФактическое",	ТипЧисло15_3);
	ТаблицаНеМаркируемойПродукции.Колонки.Добавить("Справка2",				Новый ОписаниеТипов("СправочникСсылка.Справки2ЕГАИС"));	
	
	// Собираем таблицу маркируемой продукции
	СтрокиФакт = СтруктураПараметров.ДанныеДокументаMS.СтрокиФакт;
	Для каждого Строка из СтрокиФакт Цикл
		
		//Создаем строку верхнего уровня, если ее еще нет. тут указывается алкогольная продукция без марок. 
		
		Если ВозвращаемоеДерево.Строки.Найти(Строка.АлкоКод) = Неопределено Тогда
		
			НоваяСтрока = ВозвращаемоеДерево.Строки.Добавить();	
		
			НоваяСтрока.АлкогольнаяПродукция                     = Строка.АлкоНоменклатура;
			НоваяСтрока.ВУпаковкеРазнаяАлкогольнаяПродукция      = Ложь;
			НоваяСтрока.ВУпаковкеРазнаяНоменклатура              = Ложь;
			НоваяСтрока.ВУпаковкеРазныеСерии                     = Ложь;
			НоваяСтрока.ВУпаковкеРазныеСправки2                  = Ложь;
			НоваяСтрока.ВУпаковкеРазныеХарактеристики            = Ложь;
			НоваяСтрока.ВсеСправки2Указаны                       = Ложь;
			НоваяСтрока.ВсяУпаковкаПроверена                    = Ложь;
			НоваяСтрока.ЗначениеШтрихкода                        = Строка.АлкоКод;
			НоваяСтрока.ИдентификаторСтроки                      = "";
			НоваяСтрока.ИдетПроверкаДаннойУпаковки               = Ложь;
			НоваяСтрока.ИндексКартинкиСтатусПроверки             = 0;
			НоваяСтрока.ИндексКартинкиШтрихКод                   = 0;
			НоваяСтрока.КоличествоАкцизныхМарок                  = 0;
			НоваяСтрока.КоличествоПодчиненныхБутылок             = 0;
			НоваяСтрока.КоличествоПодчиненныхВНаличии            = 0;
			НоваяСтрока.КоличествоПодчиненныхВсего               = 0;
			НоваяСтрока.КоличествоПодчиненныхНеПроверялось       = 0;
			НоваяСтрока.КоличествоПодчиненныхНеЧислилось         = 0;
			НоваяСтрока.КоличествоПодчиненныхОтложено            = 0;
			НоваяСтрока.КоличествоПодчиненныхОтсутствует         = 0;
			НоваяСтрока.КоличествоПодчиненныхУпаковок            = 0;
			НоваяСтрока.НеСодержитсяВДанныхДокумента             = Ложь;
			НоваяСтрока.НеСоответствуетОтбору                    = Ложь;
			НоваяСтрока.Номенклатура                             = Справочники.Номенклатура.ПустаяСсылка();
			НоваяСтрока.НомерСтикераОтложено                     = "";
			НоваяСтрока.Представление                            = "";
			НоваяСтрока.ПредставлениеПроверкиПодчиненных         = "";
			НоваяСтрока.ПредставлениеСодержимоеУпаковки          = "";
			//НоваяСтрока.Родитель                                 = Неопределено;
			//НоваяСтрока.Серия                                    = Справочники.СерииНоменклатуры.ПустаяСсылка();		
			//НоваяСтрока.Справка2                                 = Справочники.Справки2ЕГАИС.ПустаяСсылка();
			//НоваяСтрока.СтутусПроверки                           = Перечисления.СтатусыПроверкиНаличияАлкогольнойПродукции.ПустаяСсылка();
			//НоваяСтрока.ТипУпаковки                              = Перечисления.ТипыУпаковок.ПустаяСсылка();
			НоваяСтрока.ТребуетсяПеремаркировка                  = Ложь;
			//НоваяСтрока.Характеристика                           = Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка();
			НоваяСтрока.ХешСумма                                 = "";
			//НоваяСтрока.ШтрихкодУпаковки                         = Справочники.ШтрихкодыУпаковокТоваров.ПустаяСсылка();
			НоваяСтрока.ШтрихкодУпаковкиПоДаннымДокумента        = "";
		
		КонецЕсли;
		
		//Добавим строку второго уровня в строку верхнего уровня. Тут указываются марки. 	
		
		СтрокаВерхнегоУровня = ВозвращаемоеДерево.Строки.Найти(Строка.АлкоКод);
		НоваяСтрока = СтрокаВерхнегоУровня.Строки.Добавить();
				
		НоваяСтрока.АлкогольнаяПродукция                     = Строка.АлкоНоменклатура;
		НоваяСтрока.ВУпаковкеРазнаяАлкогольнаяПродукция      = Ложь;
		НоваяСтрока.ВУпаковкеРазнаяНоменклатура              = Ложь;
		НоваяСтрока.ВУпаковкеРазныеСерии                     = Ложь;
		НоваяСтрока.ВУпаковкеРазныеСправки2                  = Ложь;
		НоваяСтрока.ВУпаковкеРазныеХарактеристики            = Ложь;
		НоваяСтрока.ВсеСправки2Указаны                       = Ложь;
		НоваяСтрока.ВсяУпаковкаПроверена                     = Ложь;
		НоваяСтрока.ЗначениеШтрихкода                        = Строка.АлкоПДФ;
		НоваяСтрока.ИдентификаторСтроки                      = "";
		НоваяСтрока.ИдетПроверкаДаннойУпаковки               = Ложь;
		НоваяСтрока.ИндексКартинкиСтатусПроверки             = 0;
		НоваяСтрока.ИндексКартинкиШтрихКод                   = 0;
		НоваяСтрока.КоличествоАкцизныхМарок                  = 1;
		НоваяСтрока.КоличествоПодчиненныхБутылок             = 0;
		НоваяСтрока.КоличествоПодчиненныхВНаличии            = 0;
		НоваяСтрока.КоличествоПодчиненныхВсего               = 0;
		НоваяСтрока.КоличествоПодчиненныхНеПроверялось       = 0;
		НоваяСтрока.КоличествоПодчиненныхНеЧислилось         = 0;
		НоваяСтрока.КоличествоПодчиненныхОтложено            = 0;
		НоваяСтрока.КоличествоПодчиненныхОтсутствует         = 0;
		НоваяСтрока.КоличествоПодчиненныхУпаковок            = 0;
		НоваяСтрока.НеСодержитсяВДанныхДокумента             = Ложь;
		НоваяСтрока.НеСоответствуетОтбору                 = Ложь;
		НоваяСтрока.Номенклатура                             = Справочники.Номенклатура.ПустаяСсылка();
		НоваяСтрока.НомерСтикераОтложено                     = "";
		НоваяСтрока.Представление                            = Строка.АлкоПДФ;
		НоваяСтрока.ПредставлениеПроверкиПодчиненных         = "";
		НоваяСтрока.ПредставлениеСодержимоеУпаковки          = "";
		//НоваяСтрока.Родитель                                 = СтрокаВерхнегоУровня;
		//НоваяСтрока.Серия                                    = Справочники.СерииНоменклатуры.ПустаяСсылка();		
		//НоваяСтрока.Справка2                                 = Справочники.Справки2ЕГАИС.ПустаяСсылка();
		НоваяСтрока.СтатусПроверки                           = ПредопределенноеЗначение("Перечисление.СтатусыПроверкиНаличияАлкогольнойПродукции.ВНаличии");
		//НоваяСтрока.ТипУпаковки                              = Перечисления.ТипыУпаковок.ПустаяСсылка();
		НоваяСтрока.ТребуетсяПеремаркировка                  = Ложь;
		//НоваяСтрока.Характеристика                           = Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка();
		НоваяСтрока.ХешСумма                                 = "";
		//НоваяСтрока.ШтрихкодУпаковки                         = Справочники.ШтрихкодыУпаковокТоваров.ПустаяСсылка();
		НоваяСтрока.ШтрихкодУпаковкиПоДаннымДокумента        = "";
		
		
	КонецЦикла;
	
	АлкогольнаяПродукцияКОпределениюСправок2 = Новый ДеревоЗначений;	
	АлкогольнаяПродукцияКОпределениюСправок2.Колонки.Добавить("Номенклатура",			Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	АлкогольнаяПродукцияКОпределениюСправок2.Колонки.Добавить("Характеристика",			Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
	АлкогольнаяПродукцияКОпределениюСправок2.Колонки.Добавить("Серия",					ТипСерияНоменклатуры);
	АлкогольнаяПродукцияКОпределениюСправок2.Колонки.Добавить("АлкогольнаяПродукция",	Новый ОписаниеТипов("СправочникСсылка.КлассификаторАлкогольнойПродукцииЕГАИС"));
	АлкогольнаяПродукцияКОпределениюСправок2.Колонки.Добавить("Справка2",				Новый ОписаниеТипов("СправочникСсылка.Справки2ЕГАИС"));
	АлкогольнаяПродукцияКОпределениюСправок2.Колонки.Добавить("Количество",				ТипЧисло15);
	АлкогольнаяПродукцияКОпределениюСправок2.Колонки.Добавить("КоличествоРаспределено",	ТипЧисло15);
	АлкогольнаяПродукцияКОпределениюСправок2.Колонки.Добавить("Маркируемая",			ТипБулево);
	АлкогольнаяПродукцияКОпределениюСправок2.Колонки.Добавить("ИндексАкцизнойМарки",    ТипЧисло10);	
	
	//Собираем данные для помещения в хранилище значений
	
	ДанныеХранилища = Новый Структура;
	ДанныеХранилища.Вставить("АлкогольнаяПродукцияКОпределениюСправок2",	АлкогольнаяПродукцияКОпределениюСправок2);
	ДанныеХранилища.Вставить("ДанныеРанееСгенерированныхШтрихкодов");
	ДанныеХранилища.Вставить("ДеревоМаркированнойПродукции", 				ВозвращаемоеДерево);
	ДанныеХранилища.Вставить("ДобавленныеУпаковки",							Новый СписокЗначений);
	ДанныеХранилища.Вставить("ДоступныеДляПроверкиУпаковки",				Новый СписокЗначений);
	ДанныеХранилища.Вставить("ПулНеизвестныхАкцизныхМарок", 				Новый ТаблицаЗначений);
	ДанныеХранилища.Вставить("СледующийСтикерОтложено",						0);
	ДанныеХранилища.Вставить("ТаблицаНеМаркируемойПродукции",				ТаблицаНеМаркируемойПродукции);
	ДанныеХранилища.Вставить("УпаковкиДокумента",							Новый СписокЗначений);
	ДанныеХранилища.Вставить("ШтрихкодТекущейПроверяемойУпаковки",			"");	
	
	СтруктураПараметров.Док1СРезультат.ДанныеПроверкиИПодбора = Новый ХранилищеЗначения(ДанныеХранилища);	
	
КонецПроцедуры

Процедура ЗаполнитьСтрокуТабличнойЧастиТоварыДокументаЕГАИС(СтруктураПараметров)

	Док1СРезультат		= СтруктураПараметров.Док1СРезультат;	
	РеквизитыШапки 		= Док1СРезультат.Метаданные().Реквизиты;
	СтрокаДокумента 	= СтруктураПараметров.СтрокаДокумента;
	СтрокаТСД 			= СтруктураПараметров.СтрокаТабличнойЧастиДокументаТСД;
	АлкоПДФ 			= ?(СтрокаТСД.Свойство("АлкоПДФ"), СтрокаТСД.АлкоПДФ, "");	
	ИмяТЧ				= СтруктураПараметров.ИмяТабличнойЧасти;
	КолонкиТЧ 			= Док1СРезультат[ИмяТЧ].ВыгрузитьКолонки().Колонки;	
	АкцизнаяМарка 		= НайтиСоздатьАкцизнуюМарку(СтруктураПараметров);	
	
	МетаданныеНСИ 						= ЭтотОбъект.Метаданные1С.НСИ;
	ИмяСправочникаНоменклатура 			= МетаданныеНСИ.Номенклатура.ИмяСправочника;		
	ИмяСправочникаАлкогольнаяПродукция 	= МетаданныеНСИ.АлкоНоменклатура.ИмяСправочника;		
	ЕстьРеквизитНоменклатура			= ЕстьРеквизитВКоллекции(КолонкиТЧ, "Номенклатура");
	ЕстьРеквизитАлкогольнаяПродукция	= ЕстьРеквизитВКоллекции(КолонкиТЧ, "АлкогольнаяПродукция");
	ЕстьРеквизитСправка2				= ЕстьРеквизитВКоллекции(КолонкиТЧ, "Справка2");
	
	Если ЕстьРеквизитВКоллекции(РеквизитыШапки, "ОрганизацияЕГАИС") Тогда
		ОрганизацияЕГАИС = Док1СРезультат.ОрганизацияЕГАИС;
	ИначеЕсли ТипЗнч(Док1СРезультат) = Тип("ДокументОбъект.ТТНВходящаяЕГАИС") 	И ЕстьРеквизитВКоллекции(РеквизитыШапки, "Грузополучатель") Тогда
		ОрганизацияЕГАИС = Док1СРезультат.Грузополучатель;	
	ИначеЕсли ТипЗнч(Док1СРезультат) = Тип("ДокументОбъект.ТТНИсходящаяЕГАИС") 	И ЕстьРеквизитВКоллекции(РеквизитыШапки, "Грузоотправитель") Тогда
		ОрганизацияЕГАИС = Док1СРезультат.Грузоотправитель;			
	Иначе	
		ОрганизацияЕГАИС = Справочники[ИмяСправочникаАлкогольнаяПродукция].ПустаяСсылка();
	КонецЕсли;	
	
	ЕГАИС_ЗаполнитьИдентификаторСтрокиТЧ_Товары(СтруктураПараметров);
	
	Если ЕстьРеквизитНоменклатура 
		И (НЕ ЗначениеЗаполнено(СтрокаДокумента.Номенклатура) ИЛИ СтрокаДокумента.Номенклатура.ПолучитьОбъект() = Неопределено) 
		И СтрокаТСД.ИдТовара <> "*" Тогда
		
		СтрокаДокумента.Номенклатура = Справочники[ИмяСправочникаНоменклатура].ПолучитьСсылку(Новый УникальныйИдентификатор(СтрокаТСД.ИдТовара));
		
	КонецЕсли;	
	
	ДанныеАлкогольнойПродукции = ПолучитьДанныеАлкогольнойПродукцииПоАкцизнойМарке(АкцизнаяМарка, ОрганизацияЕГАИС);
	
	Если ДанныеАлкогольнойПродукции <> Неопределено Тогда
		
		Если ЕстьРеквизитАлкогольнаяПродукция И (НЕ ЗначениеЗаполнено(СтрокаДокумента.АлкогольнаяПродукция) ИЛИ СтрокаДокумента.АлкогольнаяПродукция.ПолучитьОбъект() = Неопределено) Тогда 			
			
			СтрокаДокумента.АлкогольнаяПродукция = ДанныеАлкогольнойПродукции.АлкогольнаяПродукция;			
			
		КонецЕсли;	
		
		Если ЕстьРеквизитСправка2 И (НЕ ЗначениеЗаполнено(СтрокаДокумента.Справка2) ИЛИ СтрокаДокумента.Справка2.ПолучитьОбъект() = Неопределено) Тогда 
			
			СтрокаДокумента.Справка2 = ДанныеАлкогольнойПродукции.Справка2;
			
		КонецЕсли;					
		
	КонецЕсли; 					
	
	Если ЕстьРеквизитНоменклатура И (НЕ ЗначениеЗаполнено(СтрокаДокумента.Номенклатура) ИЛИ СтрокаДокумента.Номенклатура.ПолучитьОбъект() = Неопределено) 
		
		И ЕстьРеквизитАлкогольнаяПродукция 
		И ЗначениеЗаполнено(СтрокаДокумента.АлкогольнаяПродукция) 
		И СтрокаДокумента.АлкогольнаяПродукция.ПолучитьОбъект() <> Неопределено Тогда
		
		Номенклатура = НайтиНоменклатуруПоАлкогольнойПродукции(СтрокаДокумента.АлкогольнаяПродукция);
		
		Если Номенклатура <> Неопределено Тогда
			
			СтрокаДокумента.Номенклатура = Номенклатура;
			
		КонецЕсли;				
		
	КонецЕсли;
	
	Если ЕстьРеквизитНоменклатура И (НЕ ЗначениеЗаполнено(СтрокаДокумента.Номенклатура) ИЛИ СтрокаДокумента.Номенклатура.ПолучитьОбъект() = Неопределено) Тогда
		
		Номенклатура = НайтиНоменклатуруПоШтрихкоду(СтрокаТСД.ШК);
		
		Если Номенклатура <> Неопределено Тогда
			
			СтрокаДокумента.Номенклатура = Номенклатура;
			
		КонецЕсли;						
		
	КонецЕсли;	
	
	Если ЕстьРеквизитАлкогольнаяПродукция И (НЕ ЗначениеЗаполнено(СтрокаДокумента.АлкогольнаяПродукция) ИЛИ СтрокаДокумента.АлкогольнаяПродукция.ПолучитьОбъект() = Неопределено)
		
		И ЕстьРеквизитНоменклатура 
		И ЗначениеЗаполнено(СтрокаДокумента.Номенклатура) 
		И СтрокаДокумента.Номенклатура.ПолучитьОбъект() <> Неопределено Тогда		
		
		АлкогольнаяПродукция = НайтиАлкогольнуюПродукциюПоНоменклатуре(СтруктураПараметров.Номенклатура);
		
		Если АлкогольнаяПродукция <> Неопределено Тогда
			
			СтрокаДокумента.АлкогольнаяПродукция = АлкогольнаяПродукция;
			
		КонецЕсли;	
		
	КонецЕсли;	
	
	Если ЕстьРеквизитАлкогольнаяПродукция И (НЕ ЗначениеЗаполнено(СтрокаДокумента.АлкогольнаяПродукция) ИЛИ СтрокаДокумента.АлкогольнаяПродукция.ПолучитьОбъект() = Неопределено) Тогда
		
		АлкогольнаяПродукция = НайтиСоздатьАлкогольнуюПродукциюЕГАИС(СтруктураПараметров);
		
		Если АлкогольнаяПродукция <> Неопределено Тогда
			
			СтрокаДокумента.АлкогольнаяПродукция = АлкогольнаяПродукция;
			
		КонецЕсли;	
		
	КонецЕсли;		
	
	Если 	ЕстьРеквизитАлкогольнаяПродукция 	И ЗначениеЗаполнено(СтрокаДокумента.АлкогольнаяПродукция) 	И СтрокаДокумента.АлкогольнаяПродукция.ПолучитьОбъект() <> Неопределено
		И 	ЕстьРеквизитНоменклатура 			И ЗначениеЗаполнено(СтрокаДокумента.Номенклатура) 			И СтрокаДокумента.Номенклатура.ПолучитьОбъект() 		<> Неопределено Тогда		
		
		СоздатьСоответствиеНоменклатурыЕГАИС(СтрокаДокумента.Номенклатура, СтрокаДокумента.АлкогольнаяПродукция);
		
	КонецЕсли;		

КонецПроцедуры

Функция ЕстьРеквизитВКоллекции(КоллекцияРеквизитов, ИмяРеквизита)
	
	Возврат (КоллекцияРеквизитов.Найти(ИмяРеквизита) <> Неопределено);
	
КонецФункции	

Процедура ЗаполнитьИдентификаторСтрокиТЧ_АкцизныеМарки(СтруктураПараметров)
	
	ТоварыДокумента				= СтруктураПараметров.Док1СРезультат.Товары;	
	СтрокаДокумента 			= СтруктураПараметров.СтрокаДокумента;	
	СтруктураПоискаКлючаСвязи 	= СтруктураПараметров.СтруктураПоискаКлючаСвязи;
	
	Если СтруктураПоискаКлючаСвязи <> Неопределено Тогда			
		
		Для Каждого КлючИЗначение из СтруктураПоискаКлючаСвязи Цикл
			Если НЕ ЗначениеЗаполнено(КлючИЗначение.Значение) Тогда
				СтруктураПоискаКлючаСвязи.Удалить(КлючИЗначение.Ключ);
			КонецЕсли;
		КонецЦикла;
		
		КодАлкоПродукции = СтруктураПоискаКлючаСвязи.АлкогольнаяПродукция;
		АлкоПродукция  = Вычислить("Справочники.КлассификаторАлкогольнойПродукцииЕГАИС.НайтиПоКоду(КодАлкоПродукции)");
		Если НЕ АлкоПродукция.Пустая() Тогда
			СтруктураПоискаКлючаСвязи.Вставить("АлкогольнаяПродукция", АлкоПродукция); 
		КонецЕсли;
		
		Если СтруктураПоискаКлючаСвязи.Свойство("Справка2") Тогда
			СтруктураПоискаКлючаСвязи.Вставить("Справка2", Вычислить("Справочники.Справки2ЕГАИС.ПолучитьСсылку(Новый УникальныйИдентификатор(СтруктураПоискаКлючаСвязи.Справка2))"));
		КонецЕсли;	
		
		НайдСтроки = ТоварыДокумента.НайтиСтроки(СтруктураПоискаКлючаСвязи);
		Если НайдСтроки.Количество() Тогда
			СтрокаДокумента.ИдентификаторСтроки = НайдСтроки[0].ИдентификаторСтроки;
		Иначе 				
			Сообщить("Для акцизной марки " + СтрокаДокумента.АкцизнаяМарка.ЗначениеШтрихкода + " не найдена строка с кодом алкогольной продукции = " + АлкоПродукция.Код);
		КонецЕсли;	
		
	КонецЕсли;	
	
КонецПроцедуры

Процедура СкопироватьДеревоЗначений(СтрокиИсточника, СтрокиПриемника)

	Для каждого СтрокаИсточника Из СтрокиИсточника Цикл
		
		СтрокаПриемника = СтрокиПриемника.Добавить();		
		
		ЗаполнитьЗначенияСвойств(СтрокаПриемника, СтрокаИсточника);		
		СкопироватьДеревоЗначений(СтрокаИсточника.Строки, СтрокаПриемника.Строки);
	
	КонецЦикла; 
	
КонецПроцедуры

Функция ЗаполнитьДанныеАкцизныхМарок(СтрокиДерева, СтрокиФакт,УпаковкиДокумента)
	
	ЕстьВНаличии = Ложь;
	
	Для каждого СтрокаДерева Из СтрокиДерева Цикл
		
		Если Вычислить("ИнтеграцияЕГАИСКлиентСервер.ЭтоУпаковка(СтрокаДерева.ТипУпаковки)") Тогда
			УпаковкиДокумента.Добавить(СтрокаДерева.ЗначениеШтрихкода);
		КонецЕсли;		
		СформироватьПредставлениеДляСтрокиДереваМаркированнойПродукции(СтрокаДерева);
		
		Если СтрокаДерева.ТипУпаковки = ПредопределенноеЗначение("Перечисление.ТипыУпаковок.МаркированныйТовар") Тогда
			
			СтрокаДерева.Представление	 			= СтрокаДерева.ЗначениеШтрихкода;
			СтрокаДерева.ТипУпаковки 				= ПредопределенноеЗначение("Перечисление.ТипыУпаковок.МаркированныйТовар");		
			СтрокаДерева.ВсеСправки2Указаны 		= Ложь;
			СтрокаДерева.КоличествоАкцизныхМарок 	= 1;																	
			
			НайденныйЭлемент = НайтиЭлементМассива(СтрокиФакт, "АлкоПДФ", СтрокаДерева.ЗначениеШтрихкода);	
			
		КонецЕсли;	
		
		Если ЗаполнитьДанныеАкцизныхМарок(СтрокаДерева.Строки, СтрокиФакт,УпаковкиДокумента) Или НайденныйЭлемент <> Неопределено Тогда
			СтрокаДерева.СтатусПроверки = ПредопределенноеЗначение("Перечисление.СтатусыПроверкиНаличияАлкогольнойПродукции.ВНаличии");
			ЕстьВНаличии = Истина;
		Иначе	
			СтрокаДерева.СтатусПроверки = ПредопределенноеЗначение("Перечисление.СтатусыПроверкиНаличияАлкогольнойПродукции.Отсутствует");
		КонецЕсли;
		
	КонецЦикла; 
	
	Возврат ЕстьВНаличии;
	
КонецФункции


Процедура ЗаполнитьТаблицуПартионнойПродукции(ТоварыБезАкцизныхМарок, ТаблицаНеМаркируемойПродукции, Товары)

	Для каждого Строка Из ТоварыБезАкцизныхМарок Цикл
		
		НоваяСтрока = ТаблицаНеМаркируемойПродукции.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
		НоваяСтрока.КоличествоПоДокументу = Строка.Количество;
		
		СтруктураПоиска = Новый Структура;
		СтруктураПоиска.Вставить("АлкогольнаяПродукция", 	Строка.АлкогольнаяПродукция);
		СтруктураПоиска.Вставить("Справка2", 				Строка.Справка2);
		
		СтрокиТЧТовары = Товары.НайтиСтроки(СтруктураПоиска);
		
		Если СтрокиТЧТовары.Количество() Тогда											
			НоваяСтрока.КоличествоФактическое = СтрокиТЧТовары[0].КоличествоФакт;																	
		КонецЕсли; 					
		
	КонецЦикла;

КонецПроцедуры

Функция НайтиСоздатьАкцизнуюМарку(СтруктураПараметров)

	//СтрокаТСД = СтруктураПараметров.СтрокаДокумента;
	СтрокаТСД 					= СтруктураПараметров.СтрокаТабличнойЧастиДокументаТСД;
	КодАкцизнойМарки 			= ?(СтрокаТСД.Свойство("АлкоПДФ"), СтрокаТСД.АлкоПДФ, "");
	ЕстьСправочникАкцизныеМарки = Метаданные.Справочники.Найти("ШтрихкодыУпаковокТоваров") <> Неопределено;
	
	Если НЕ ЕстьСправочникАкцизныеМарки Тогда
		
		АкцизнаяМарка = КодАкцизнойМарки;			
	
	ИначеЕсли ЗначениеЗаполнено(КодАкцизнойМарки) Тогда
		
		АкцизнаяМарка = Вычислить("Справочники.ШтрихкодыУпаковокТоваров.НайтиПоРеквизиту(""ЗначениеШтрихкода"", КодАкцизнойМарки)");
		
		Если НЕ ЗначениеЗаполнено(АкцизнаяМарка) ИЛИ АкцизнаяМарка.ПолучитьОбъект() = Неопределено Тогда
			
			АкцизнаяМаркаОбъект 					= Вычислить("Справочники.ШтрихкодыУпаковокТоваров.СоздатьЭлемент()");
			АкцизнаяМаркаОбъект.ТипУпаковки 		= ПредопределенноеЗначение("Перечисление.ТипыУпаковок.МаркированныйТовар");
			АкцизнаяМаркаОбъект.ТипШтрихкода 		= ПредопределенноеЗначение("Перечисление.ТипыШтрихкодов.PDF417");
			АкцизнаяМаркаОбъект.ЗначениеШтрихкода 	= КодАкцизнойМарки;
			АкцизнаяМаркаОбъект.ДатаУпаковки 		= ТекущаяДата();
			АкцизнаяМаркаОбъект.Ответственный		= ПараметрыСеанса.ТекущийПользователь;
			
			АкцизнаяМаркаОбъект.Записать();
			
			АкцизнаяМарка = АкцизнаяМаркаОбъект.Ссылка;
			
		КонецЕсли;	
		
	Иначе
						
		АкцизнаяМарка = ПредопределенноеЗначение("Справочник.ШтрихкодыУпаковокТоваров.ПустаяСсылка");			
		
	КонецЕсли;	

	Возврат АкцизнаяМарка;
	
КонецФункции

Процедура ЕГАИС_ЗаполнитьИдентификаторСтрокиТЧ_Товары(СтруктураПараметров)
	
	Док1СРезультат 	= СтруктураПараметров.Док1СРезультат;	
	ИмяТЧ			= СтруктураПараметров.ИмяТабличнойЧасти;				
	КолонкиТЧ 		= Док1СРезультат.Метаданные().ТабличныеЧасти[ИмяТЧ].Реквизиты;	
	ТекущаяСтрока 	= СтруктураПараметров.СтрокаДокумента;
	
	Если ЕстьРеквизитВКоллекции(КолонкиТЧ, "ИдентификаторСтроки") И НЕ ЗначениеЗаполнено(ТекущаяСтрока.ИдентификаторСтроки) Тогда
		ТекущаяСтрока.ИдентификаторСтроки = Строка(Новый УникальныйИдентификатор);
	КонецЕсли;	

КонецПроцедуры

Функция ПолучитьДанныеАлкогольнойПродукцииПоАкцизнойМарке(АкцизнаяМарка, ОрганизацияЕГАИС)
		
	Результат = Неопределено;
	
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	                      |	АкцизныеМаркиЕГАИС.Статус КАК Статус,
	                      |	АкцизныеМаркиЕГАИС.Справка2 КАК Справка2,
	                      |	АкцизныеМаркиЕГАИС.АлкогольнаяПродукция КАК АлкогольнаяПродукция,
	                      |	АкцизныеМаркиЕГАИС.Основание КАК Основание
	                      |ИЗ
	                      |	РегистрСведений.АкцизныеМаркиЕГАИС КАК АкцизныеМаркиЕГАИС
	                      |ГДЕ
	                      |	АкцизныеМаркиЕГАИС.АкцизнаяМарка = &АкцизнаяМарка
	                      |	И АкцизныеМаркиЕГАИС.ОрганизацияЕГАИС = &ОрганизацияЕГАИС");
	
	Запрос.УстановитьПараметр("АкцизнаяМарка", 		АкцизнаяМарка);
	Запрос.УстановитьПараметр("ОрганизацияЕГАИС", 	ОрганизацияЕГАИС);

	Если НЕ ЗначениеЗаполнено(ОрганизацияЕГАИС) Тогда	
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "АкцизныеМаркиЕГАИС.ОрганизацияЕГАИС = &ОрганизацияЕГАИС", "ИСТИНА");		
	КонецЕсли;	
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Результат = Выборка;	
	Иначе	
		Результат = Неопределено;	
	КонецЕсли; 
	
	Возврат Результат;
	
КонецФункции 

Функция НайтиНоменклатуруПоАлкогольнойПродукции(АлкогольнаяПродукция)

	Результат = Неопределено;	
	
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	                      |	СоответствиеНоменклатурыЕГАИС.Номенклатура КАК Номенклатура
	                      |ИЗ
	                      |	РегистрСведений.СоответствиеНоменклатурыЕГАИС КАК СоответствиеНоменклатурыЕГАИС
	                      |ГДЕ
	                      |	СоответствиеНоменклатурыЕГАИС.АлкогольнаяПродукция = &АлкогольнаяПродукция");
	
	Запрос.УстановитьПараметр("АлкогольнаяПродукция", АлкогольнаяПродукция);
	
	Выборка = Запрос.Выполнить().Выбрать();		
	
	Если Выборка.Следующий() Тогда
		Результат = Выборка.Номенклатура;
	Иначе	
	    Результат = Неопределено;
	КонецЕсли; 
	
	Возврат Результат;

КонецФункции

Функция НайтиАлкогольнуюПродукциюПоНоменклатуре(Номенклатура)

	Результат = Неопределено;	
	
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	                      |	СоответствиеНоменклатурыЕГАИС.АлкогольнаяПродукция КАК АлкогольнаяПродукция
	                      |ИЗ
	                      |	РегистрСведений.СоответствиеНоменклатурыЕГАИС КАК СоответствиеНоменклатурыЕГАИС
	                      |ГДЕ
	                      |	СоответствиеНоменклатурыЕГАИС.Номенклатура = &Номенклатура");
	
	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	
	Выборка = Запрос.Выполнить().Выбрать();		
	
	Если Выборка.Следующий() Тогда
		Результат = Выборка.АлкогольнаяПродукция;
	Иначе	
	    Результат = Неопределено;
	КонецЕсли; 
	
	Возврат Результат;

КонецФункции

Функция НайтиНоменклатуруПоШтрихкоду(Штрихкод)

	Результат = Неопределено;		
	
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	                      |	Штрихкоды.Владелец КАК Номенклатура
	                      |ИЗ
	                      |	РегистрСведений.Штрихкоды КАК Штрихкоды
	                      |ГДЕ
	                      |	Штрихкоды.Владелец ССЫЛКА Справочник.Номенклатура
	                      |	И Штрихкоды.Штрихкод = &Штрихкод");
	
	Запрос.УстановитьПараметр("Штрихкод", Штрихкод);
	
	Выборка = Запрос.Выполнить().Выбрать();		
	
	Если Выборка.Следующий() Тогда
		Результат = Выборка.Номенклатура;
	Иначе	
		Результат = Неопределено;
	КонецЕсли;

	Возврат Результат;
	
КонецФункции

Функция НайтиСоздатьАлкогольнуюПродукциюЕГАИС(СтруктураПараметров)

	Результат				= Неопределено;
	АлкогольнаяПродукция 	= СтруктураПараметров.СтрокаДокумента.АлкогольнаяПродукция;	
	СтрокаТСД				= СтруктураПараметров.СтрокаТабличнойЧастиДокументаТСД;	
	АлкоКод 				= СтрокаТСД.АлкоКод;
	
	Если НЕ ЗначениеЗаполнено(АлкогольнаяПродукция) ИЛИ АлкогольнаяПродукция.ПолучитьОбъект() = Неопределено Тогда
				
		АлкогольнаяПродукция = Вычислить("Справочники.КлассификаторАлкогольнойПродукцииЕГАИС.НайтиПоКоду(АлкоКод)");
		
		Если НЕ ЗначениеЗаполнено(АлкогольнаяПродукция) ИЛИ АлкогольнаяПродукция.ПолучитьОбъект() = Неопределено Тогда
			
			НовыйОбъект 						= Вычислить("Справочники.КлассификаторАлкогольнойПродукцииЕГАИС.СоздатьЭлемент()");
			НовыйОбъект.Код 					= АлкоКод;
			НовыйОбъект.Наименование 			= "Новая продукция ЕГАИС " + АлкоКод;
			НовыйОбъект.НаименованиеПолное 		= "Новая продукция ЕГАИС " + АлкоКод;			
			НовыйОбъект.ОбменДанными.Загрузка 	= Истина;			
			
			Попытка
				НовыйОбъект.Записать();
				Результат = НовыйОбъект.Ссылка;
			Исключение
				Результат = Неопределено;
			КонецПопытки; 			
			
		КонецЕсли;
		
	КонецЕсли;	

	Возврат Результат;
	
КонецФункции

Процедура СоздатьСоответствиеНоменклатурыЕГАИС(Номенклатура, АлкогольнаяПродукция)
	
	МенеджерЗаписи 							= Вычислить("РегистрыСведений.СоответствиеНоменклатурыЕГАИС.СоздатьМенеджерЗаписи()");
	МенеджерЗаписи.АлкогольнаяПродукция 	= АлкогольнаяПродукция;
	МенеджерЗаписи.ИдентификаторУпаковки 	= Номенклатура.ЕдиницаИзмерения.Наименование;
	МенеджерЗаписи.Номенклатура 			= Номенклатура;
	МенеджерЗаписи.ОбменДанными.Загрузка	= Истина;
		
	Попытка	
		МенеджерЗаписи.Записать();		
	Исключение	
	КонецПопытки;		

КонецПроцедуры 

Функция НайтиЭлементМассива(Массив, Колонка, Значение)

    Результат = Неопределено;
    
	Для каждого Элемент Из Массив Цикл
        Если  Элемент[Колонка] = Значение Тогда
    	    Результат = Элемент;
            Прервать;
        КонецЕсли;
    КонецЦикла; 

    Возврат Результат;
    
КонецФункции

Процедура ЗаполнитьСправки2ТЧТовары(СтруктураПараметров)
	
	Для Каждого СтрокаТчТовары из СтруктураПараметров.ТЧ цикл
		//СтрокаТЧТовары.Справка2 = Справочники.Справки2ЕГАИС.НайтиПоНаименованию(СтрокаТЧТовары.НомерСправки2Поставщика, Истина);
		Запрос = новый Запрос("ВЫБРАТЬ
		                      |	Справки2ЕГАИС.Ссылка
		                      |ИЗ
		                      |	Справочник.Справки2ЕГАИС КАК Справки2ЕГАИС
		                      |ГДЕ
		                      |	Справки2ЕГАИС.АлкогольнаяПродукция = &АлкогольнаяПродукция");
		//|	И Справки2ЕГАИС.Наименование = &Наименование");
		
		Запрос.УстановитьПараметр("АлкогольнаяПродукция",СтрокаТЧТовары.АлкогольнаяПродукция);
		//Запрос.УстановитьПараметр("ДокументОснование",СтруктураПараметров.Док1СРезультат.Ссылка);
		//Запрос.УстановитьПараметр("Наименование", СтрокаТЧТовары.НомерСправки2Поставщика);
		
		РезультатЗапроса = Запрос.Выполнить().Выгрузить();
		Для каждого СтрокаРезультата из РезультатЗапроса Цикл
			СтрокаТЧТовары.Справка2 = СтрокаРезультата.Ссылка;
		КонецЦикла;


		
	КонецЦикла;	
	
КонецПроцедуры

Процедура ЗаполнитьТЧАкцизныеМарки(СтруктураПараметров)
	
	СтруктураПараметров.СтрокаДокумента.АкцизнаяМарка = Справочники.ШтрихкодыУпаковокТоваров.НайтиПоРеквизиту("ЗначениеШтрихкода",СтруктураПараметров.СтруктураПоискаКлючаСвязи.ДанныеДляЗагрузки_Строка.АлкоПДФ);
		
	Запрос = новый Запрос("ВЫБРАТЬ
	                      |	Справки2ЕГАИС.Ссылка
	                      |ИЗ
	                      |	Справочник.Справки2ЕГАИС КАК Справки2ЕГАИС
	                      |ГДЕ
	                      |	Справки2ЕГАИС.АлкогольнаяПродукция.Код = &АлкогольнаяПродукцияКод");
				
		Запрос.УстановитьПараметр("АлкогольнаяПродукцияКод", СтруктураПараметров.СтруктураПоискаКлючаСвязи.ДанныеДляЗагрузки_Строка.АлкоКод);
		//Запрос.УстановитьПараметр("ДокументОснование", СтруктураПараметров.Док1СРезультат.Ссылка);
		//Запрос.УстановитьПараметр("Наименование", СтрокаТЧТовары.НомерСправки2Поставщика);
		
		РезультатЗапроса = Запрос.Выполнить().Выгрузить();
		Для каждого СтрокаРезультата из РезультатЗапроса Цикл
			СтруктураПараметров.СтрокаДокумента.Справка2 = СтрокаРезультата.Ссылка;
		КонецЦикла;
	
	КонецПроцедуры	
	
Процедура ЗаполнитьИдентификаторСтрокиТЧ_АкцизныеМарки_БезКлючаСвязи(СтруктураПараметров)
	Попытка
		Для каждого строка из СтруктураПараметров.ТЧ цикл
			Строка.ИдентификаторСтроки = СтруктураПараметров.Док1СРезультат.Товары.Найти(Строка.АкцизнаяМарка.Номенклатура).ИдентификаторСтроки;
		КонецЦикла;
	Исключение
	КонецПопытки;
КонецПроцедуры 	

#КонецОбласти