Процедура ИспользоватьОсновноеПодключениеПриИзменении(Элемент)
	
	//Если ТипПодключенияСмартс = 1 Тогда
	//	Элементы.ЧастнаяБазаMobileSMARTS.Доступность = Истина;
	//Иначе
	//	Элементы.ЧастнаяБазаMobileSMARTS.Доступность = Ложь;
	//КонецЕсли;	
	
КонецПроцедуры

Процедура НастройкиПользователейПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	Если НоваяСтрока Тогда
		ЭлементыФормы.НастройкиПользователей.ТекущаяСтрока.ID_Пользователя = _ЛокКонтекст.ЛокЯдро_ПолучитьНовыйID("UP");
	КонецЕсли;
КонецПроцедуры

//////////////////////////////////////////////
//// РЕФАКТОРИНГ.

#Область ОбработчикиСобытийФормы

Процедура ПриОткрытии()
	
	Если ЭтоНовыйУзел Тогда
		ID_Узла = _ЛокКонтекст.ЛокЯдро_ПолучитьНовыйID("ND");
		Наименование = "НОВЫЙ ТОРГОВЫЙ ОБЪЕКТ";
		ТаблицаПараметров = _ЛокКонтекст.ЛокЯдро_ПолучитьИзКэшаНастройкуSMARTS("ГлобальныеПараметры");
	Иначе
		
		Если ID_Узла = _ЛокКонтекст.ДанныеТекущегоУзла.ID_Узла Тогда
			ТаблицаПользователей 	= _ЛокКонтекст.ЛокЯдро_ПолучитьИзКэшаНастройкуSMARTS("Пользователи");
			ТаблицаПараметров 		= _ЛокКонтекст.ЛокЯдро_ПолучитьЗначенияГлобальныхПараметров();
			ТаблицаПользователейТСД = _ЛокКонтекст.ЛокЯдро_ПолучитьИзКэшаНастройкуSMARTS("ПользователиТСД");
		Иначе
			ТаблицаПользователей 	= _ЛокКонтекст.ЛокЯдро_ПолучитьНастройкуНаСервереSMARTS("Пользователи", ID_Узла);
			ТаблицаПараметров 		= _ЛокКонтекст.ЛокЯдро_ПолучитьЗначенияГлобальныхПараметров(ID_Узла);
			ТаблицаПользователейТСД = _ЛокКонтекст.ЛокЯдро_ПолучитьНастройкуНаСервереSMARTS("ПользователиТСД", ID_Узла);
		КонецЕсли;
		
		Если ТипЗнч(ТаблицаПользователей) = Тип("ТаблицаЗначений") Тогда
			Для Каждого СтрокаНастройки Из ТаблицаПользователей Цикл
				ЗаполнитьЗначенияСвойств(НастройкиПользователей.Добавить(), СтрокаНастройки);
			КонецЦикла;
		КонецЕсли;
		
		Если ТипЗнч(ТаблицаПользователейТСД) = Тип("ТаблицаЗначений") Тогда
			Для Каждого СтрокаНастройки Из ТаблицаПользователейТСД Цикл
				ЗаполнитьЗначенияСвойств(ПользователиТСД.Добавить(), СтрокаНастройки);
			КонецЦикла;			
		КонецЕсли;		
		
	КонецЕсли;
	
	Если ТипЗнч(ТаблицаПараметров) = Тип("ТаблицаЗначений") Тогда
		Для Каждого СтрокаНастройки Из ТаблицаПараметров Цикл
			ЗаполнитьЗначенияСвойств(ЗначенияПараметровУзлов.Добавить(), СтрокаНастройки);
		КонецЦикла;
	КонецЕсли;
	
	Заголовок = Заголовок + Наименование;
	
	СписокДоступныхБазSMARTS = _ЛокКонтекст.ЛокЯдро_ПолучитьСписокБазНаСервереSMARTS();
	Для Каждого СтрокаВыбораБазы из СписокДоступныхБазSMARTS Цикл
		ЭлементыФормы.НаименованиеЧБ.СписокВыбора.Добавить(СтрокаВыбораБазы.Ид, СтрокаВыбораБазы.Имя);
	КонецЦикла;		
	НаименованиеЧБ = ЧастнаяБазаMS;
	ЭлементыФормы.НаименованиеЧБ.Доступность = ИспользоватьЧастнуюБазу;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

Процедура ИспользоватьЧастнуюБазуПриИзменении(Элемент)
	
	ЭлементыФормы.НаименованиеЧБ.Доступность = ИспользоватьЧастнуюБазу;
	
	Если НЕ ИспользоватьЧастнуюБазу Тогда
		НаименованиеЧБ = "";
		ЧастнаяБазаMS = "";
	КонецЕсли;
	
КонецПроцедуры

Процедура НаименованиеЧБПриИзменении(Элемент)
	
	ЧастнаяБазаMS = Элемент.Значение;
	
КонецПроцедуры

Процедура НастройкиОбменаСправочниковНажатие(Элемент)
	
	ФормаНастройкиОбмена = ПолучитьФорму("ФормаСписка_ОтборыСправочников", ЭтаФорма, ЭтаФорма);
	ФормаНастройкиОбмена._ЛокКонтекст = _ЛокКонтекст;
	ФормаНастройкиОбмена.ID_Узла = ID_Узла;
	ФормаНастройкиОбмена.НаименованиеУзла = Наименование;	
	ФормаНастройкиОбмена.ОткрытьМодально();		
	
КонецПроцедуры

Процедура НастройкиРучногоОбменаНажатие(Элемент)
	ОткрытьОкноНастройкиОбменаДокументов("Интерактивный");
КонецПроцедуры

Процедура НастройкиРегламентногоОбменаНажатие(Элемент)
	ОткрытьОкноНастройкиОбменаДокументов("Автообмен");
КонецПроцедуры

Процедура НастройкиОнлайнОбменаНажатие(Элемент)
	ОткрытьОкноНастройкиОбменаДокументов("Онлайн");
КонецПроцедуры

Процедура ОткрытьОкноНастройкиОбменаДокументов(РежимОбмена)
	
	ФормаОтбора = ПолучитьФорму("ФормаСписка_ОтборыДокументов", ЭтаФорма, ЭтаФорма);
	ФормаОтбора._ЛокКонтекст = _ЛокКонтекст;
	ФормаОтбора.ID_Узла = ID_Узла;
	ФормаОтбора.НаименованиеУзла = Наименование;
	ФормаОтбора.ТипОбмена = РежимОбмена;				
	ФормаОтбора.ОткрытьМодально();	
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийТабличногоПоля_ПользователиТСД

Процедура ПользователиТСДПередНачаломДобавления(Элемент, Отказ, Копирование)
	
	Отказ = Истина;
	
КонецПроцедуры

Процедура ПользователиТСДПередНачаломИзменения(Элемент, Отказ)
	
	Отказ = Истина;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытий_КоманднаяПанель_ПользователиТСД

Процедура КоманднаяПанельПользователиТСДВыбратьПользователейТСД(Кнопка)		
	
	ТекущиеПользователи = "";
	Для каждого Строка Из ПользователиТСД Цикл
		ТекущиеПользователи = ТекущиеПользователи + Строка.ID_Пользователя + "|";
	КонецЦикла; 
	ТекущиеПользователи = Лев(ТекущиеПользователи, СтрДлина(ТекущиеПользователи) - 1);	
	
	ПользователиMS = _ЛокКонтекст.СтруктураМетаданных.ПользователиMS.Скопировать();
	
	// Удалим ненужные для данной формы элементы дерева пользователей
	НайденнаяСтрокаДЗ = ПользователиMS.Строки.Найти("Выгружать всем", "ИдГруппыПользователя", Ложь);
	Если НайденнаяСтрокаДЗ <> Неопределено Тогда
		ПользователиMS.Строки.Удалить(НайденнаяСтрокаДЗ);
	КонецЕсли;	
	
	НайденнаяСтрокаДЗ = ПользователиMS.Строки.Найти("Спрашивать при выгрузке", "ИдГруппыПользователя", Ложь);
	Если НайденнаяСтрокаДЗ <> Неопределено Тогда
		ПользователиMS.Строки.Удалить(НайденнаяСтрокаДЗ);
	КонецЕсли;	
	
	ФормаРедактирования = ПолучитьФорму("ФормаСлужебная_ВыборПользователяИлиГруппы", ЭтаФорма, ЭтаФорма);
	ФормаРедактирования._ЛокКонтекст 			= _ЛокКонтекст;	
	ФормаРедактирования.ТекущиеПользователи 	= ТекущиеПользователи;
	ФормаРедактирования.ПользователиMS			= ПользователиMS;
	РезультатРедактирования 					= ФормаРедактирования.ОткрытьМодально();		
	
	Если РезультатРедактирования <> Неопределено И ТипЗнч(РезультатРедактирования) = Тип("Массив") Тогда				
			
		ПользователиТСД.Очистить();					
		Для каждого Элемент Из РезультатРедактирования Цикл								
			
			НоваяСтрока 				= ПользователиТСД.Добавить();
			НоваяСтрока.Наименование 	= Элемент.Имя;
			НоваяСтрока.ID_Пользователя = Элемент.Ид; 			
			НоваяСтрока.ID_Узла 		= ID_Узла;
			
		КонецЦикла; 					
		
	КонецЕсли;	
	
КонецПроцедуры

#КонецОбласти 

#Область ОбработчикиСобытийГлавнойПанели

Процедура КоманднаяПанельГлавнаяСохранитьИЗакрыть(Кнопка)
	
	Если ИспользоватьЧастнуюБазу И НЕ ЗначениеЗаполнено(СокрЛП(ЧастнаяБазаMS)) Тогда
		Сообщить("Не выбрана частная база SMARTS");
		Возврат;
	КонецЕсли;	
	
	Если НЕ НаименованиеУзлаУникально() Тогда
		Сообщить("Наименование торгового объекта не уникально");
		Возврат;
	КонецЕсли;	
	
	Если Не _ЛокКонтекст.КомЯдро_ПроверитьСоединениеССерверомSMARTS(, Ложь) Тогда
		Если _ЛокКонтекст.ЛокЯдро_ПредложитьПользователюСохранитьНастройкиВФайл() Тогда
			КоманднаяПанельГлавнаяСохранитьВФайл("");	
		КонецЕсли;		
		Возврат;
	КонецЕсли;
	
	СохранитьПодчиненныеТаблицы();	
	РезультатРедактирования = Новый Структура;
	РезультатРедактирования.Вставить("ID_Узла", ID_Узла);
	РезультатРедактирования.Вставить("Наименование", Наименование);
	РезультатРедактирования.Вставить("ЧастнаяБазаMS", ЧастнаяБазаMS);
	РезультатРедактирования.Вставить("ИспользоватьЧастнуюБазу", ИспользоватьЧастнуюБазу);
	РезультатРедактирования.Вставить("Комментарий", Комментарий);
	Закрыть(РезультатРедактирования);
КонецПроцедуры

Процедура КоманднаяПанельГлавнаяСохранитьВФайл(Кнопка)
	
	СтруктураНастроек = Новый Структура;
	СтруктураНастроек.Вставить("ID_Узла", ID_Узла);
	СтруктураНастроек.Вставить("Наименование", Наименование);
	СтруктураНастроек.Вставить("Комментарий", Комментарий);
	СтруктураНастроек.Вставить("ИспользоватьЧастнуюБазу", ИспользоватьЧастнуюБазу);
	СтруктураНастроек.Вставить("ЧастнаяБазаMS", ЧастнаяБазаMS);
	СтруктураНастроек.Вставить("НастройкиПользователей", НастройкиПользователей.Скопировать());
	СтруктураНастроек.Вставить("ЗначенияПараметровУзлов", ЗначенияПараметровУзлов.Скопировать());
	
	_ЛокКонтекст.ЛокЯдро_СохранитьНастройкиВФайл(СтруктураНастроек, "НастройкаУзла");
	
КонецПроцедуры

Процедура КоманднаяПанельГлавнаяВосстановитьИзФайла(Кнопка)
	
	СтруктураНастроек = _ЛокКонтекст.ЛокЯдро_ПолучитьНастройкиИзФайла("НастройкаУзла");
	
	Если СтруктураНастроек <> Неопределено Тогда
		_ЛокКонтекст.ЛокЯдро_ЗаполнитьФормуЗначениямиИзСтруктуры(ЭтаФорма, СтруктураНастроек);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ВспомогательныеМеханизмы

Процедура СохранитьПодчиненныеТаблицы()
	
	// Сохраняем подчиненные таблицы
	НастройкиПользователейДляСохранения = НастройкиПользователей.Скопировать();
	_ЛокКонтекст.ЛокЯдро_СохранитьНастройкуВБазеSMARTS("Пользователи", НастройкиПользователейДляСохранения, ID_Узла);
	ЗначенияПараметровУзловДляСохранения = ЗначенияПараметровУзлов.Скопировать();
	_ЛокКонтекст.ЛокЯдро_СохранитьНастройкуВБазеSMARTS("ЗначенияПараметровУзлов", ЗначенияПараметровУзловДляСохранения, ID_Узла);
	ПользователиТСДДляСохранения = ПользователиТСД.Скопировать();
	_ЛокКонтекст.ЛокЯдро_СохранитьНастройкуВБазеSMARTS("ПользователиТСД", ПользователиТСД, ID_Узла);	
	
	// Сохраняем в кэш
	Если ID_Узла = _ЛокКонтекст.ДанныеТекущегоУзла.ID_Узла Тогда
		_ЛокКонтекст.ЛокЯдро_ЗаписатьВКэшНастройкуSMARTS("Пользователи", НастройкиПользователейДляСохранения);	
		_ЛокКонтекст.ЛокЯдро_ЗаписатьВКэшНастройкуSMARTS("ЗначенияПараметровУзлов", ЗначенияПараметровУзловДляСохранения);
		_ЛокКонтекст.ЛокЯдро_ЗаписатьВКэшНастройкуSMARTS("ПользователиТСД", ПользователиТСДДляСохранения);
		_ЛокКонтекст.ЛокЯдро_УстановитьДанныеТекущегоУзла(ID_Узла);
	КонецЕсли;
	
КонецПроцедуры

Функция НаименованиеУзлаУникально()

	Результат = Истина;
	Если ВладелецФормы.ЭлементыФормы.Найти("ТаблицаУзлов") <> Неопределено Тогда
		НайденныеУзлы = ВладелецФормы.ТаблицаУзлов.НайтиСтроки(Новый Структура("Наименование", СокрЛП(Наименование)));	
	Иначе
		ТаблицаУзлов = _ЛокКонтекст.ЛокЯдро_ПолучитьИзКэшаНастройкуSMARTS("Узлы");
		НайденныеУзлы = ТаблицаУзлов.НайтиСтроки(Новый Структура("Наименование", СокрЛП(Наименование)));	
	КонецЕсли;
	
	Если НайденныеУзлы.Количество() = 0 Тогда
		Результат = Истина;
	Иначе
		Для каждого Узел Из НайденныеУзлы Цикл
		    Если ВРег(СокрЛП(Узел.ID_Узла)) <> ВРег(СокрЛП(ID_Узла)) Тогда
				Результат = Ложь;
				Прервать;
			КонецЕсли;
		КонецЦикла; 
	КонецЕсли;	

	Возврат Результат;
	
КонецФункции
 
#КонецОбласти