
#Область ОбработчикиСобытийФорм

Процедура ПриОткрытии(ОбработатьИзменияНастроек = Истина)
	
	ID_Узла = _ЛокКонтекст.ДанныеТекущегоУзла.ID_Узла;
	ID_БазыMS = _ЛокКонтекст.ДанныеТекущегоУзла.ID_БазыMS;
	НаименованиеУзла = _ЛокКонтекст.ДанныеТекущегоУзла.Наименование;
	ЭлементыФормы.НадписьНаименованиеУзла.Заголовок = ?(НаименованиеУзла = "", "Все магазины", НаименованиеУзла);
	
	ЗаполнитьТаблицуДокументов1С();
	ЗаполнитьТаблицуДокументовSMARTS(ID_БазыMS);
	
КонецПроцедуры

#КонецОбласти


#Область ОбработчикиСобытийЭлементовФормы

Процедура КомПанель_Документы1СОбновитьНажатие(Кнопка)
	
	ЗаполнитьТаблицуДокументов1С();
	
КонецПроцедуры

Процедура КомаПанель_Документы1СНастроитьОтборНажатие(Кнопка)
	Если НЕ _ЛокКонтекст.КомЯдро_ПроверитьСоединениеССерверомSMARTS(ID_БазыMS) Тогда
		Возврат;
	КонецЕсли;
	
	ФормаОтбора = ПолучитьФорму("ФормаСписка_ОтборыДокументов", ЭтаФорма, ЭтаФорма);
	ФормаОтбора.ID_Узла = ЭтаФорма.ID_Узла;
	ФормаОтбора.НаименованиеУзла = ЭтаФорма.НаименованиеУзла;
	ФормаОтбора.ТипОбмена = "Интерактивный";
	ФормаОтбора._ЛокКонтекст = _ЛокКонтекст;
	ФормаОтбора.ОткрытьМодально();	
	
КонецПроцедуры

Процедура КомПанель_Документы1СПеренестиНаТерминалНажатие(Кнопка)
	Если НЕ _ЛокКонтекст.КомЯдро_ПроверитьСоединениеССерверомSMARTS(ID_БазыMS) Тогда
		Возврат;
	КонецЕсли;
	
	ВыгрузитьВыбранныеДокументыВБазуSMARTS();
КонецПроцедуры

Процедура ПеренестиНаТерминалНажатие(Элемент)
	
	Если НЕ _ЛокКонтекст.КомЯдро_ПроверитьСоединениеССерверомSMARTS(ID_БазыMS) Тогда
		Возврат;
	КонецЕсли;

	ВыгрузитьВыбранныеДокументыВБазуSMARTS();
КонецПроцедуры

Процедура ПеренестиСТерминалаНажатие(Элемент)
	
	Если НЕ _ЛокКонтекст.КомЯдро_ПроверитьСоединениеССерверомSMARTS(ID_БазыMS) Тогда
		Возврат;
	КонецЕсли;

	ЗагрузитьВыбранныеДокументыВБазу1С();
КонецПроцедуры

Процедура КомПанель_ДокументыMSОбновитьНажатие(Кнопка)
	Если НЕ _ЛокКонтекст.КомЯдро_ПроверитьСоединениеССерверомSMARTS(ID_БазыMS) Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьТаблицуДокументовSMARTS(ID_БазыMS);
КонецПроцедуры

Процедура КомПанель_ДокументыMSПеренестиСТерминала(Кнопка)
	Если НЕ _ЛокКонтекст.КомЯдро_ПроверитьСоединениеССерверомSMARTS(ID_БазыMS) Тогда
		Возврат;
	КонецЕсли;
	
	ЗагрузитьВыбранныеДокументыВБазу1С();
КонецПроцедуры

Процедура КомПанель_ДокументыMSУдалитьДокумент(Кнопка)
	Если НЕ _ЛокКонтекст.КомЯдро_ПроверитьСоединениеССерверомSMARTS(ID_БазыMS) Тогда
		Возврат;
	КонецЕсли;
	
	ДокументыДляУдаления = ДокументыMS.НайтиСтроки(Новый Структура("Загружать", Истина));
	Для Каждого ДокументКУдалению Из ДокументыДляУдаления Цикл
		РезультатУдаления = _ЛокКонтекст.ЛокЯдро_УдалитьДокументНаСервереSMARTS(ДокументКУдалению.Ид);
		Сообщить(РезультатУдаления.Сообщение + " [" + ДокументКУдалению.Имя + "]");
	КонецЦикла;
	
	ЗаполнитьТаблицуДокументовSMARTS(ID_БазыMS);
	
КонецПроцедуры

Процедура КомПанель_ДокументыMSОткрытьДокумент(Кнопка)
	Если НЕ _ЛокКонтекст.КомЯдро_ПроверитьСоединениеССерверомSMARTS(ID_БазыMS) Тогда
		Возврат;
	КонецЕсли;
	
	ОткрытьДокументТСД();
КонецПроцедуры

Процедура КомПанель_Документы1СВыбратьОтображаемыеКолонки(Кнопка)
	
	ФормаВыбора =  ПолучитьФорму("ФормаСлужебная_ВыборКолонок", ЭтаФорма, ЭтаФорма);		
	ФормаВыбора._ЛокКонтекст = _ЛокКонтекст;
	ФормаВыбора.ОткрытьМодально();	
	ЗаполнитьТаблицуДокументов1С();

КонецПроцедуры

Процедура ПеренестиНаТерминалНесколькоКакОдинНажатие(Элемент)
	
	Если НЕ _ЛокКонтекст.КомЯдро_ПроверитьСоединениеССерверомSMARTS(ID_БазыMS) Тогда
		Возврат;
	КонецЕсли;
	
	ВыгрузитьВыбранныеДокументыКакОдинВБазуSMARTS();
КонецПроцедуры

#КонецОбласти


#Область ОбработчикиСобытийТабличныхЧастей

Процедура ДокументыMSВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ОткрытьДокументТСД();
	
КонецПроцедуры

Процедура БизнесПроцессНачалоВыбора(Элемент,СтандартнаяОбработка)
	
	ТекущаяСтрока = ЭлементыФормы.Документы1С.ТекущаяСтрока;
	МетаданныеДокумента1С = ТекущаяСтрока.Ссылка.Метаданные();

	НастройкиОбмена = _ЛокКонтекст.ЛокЯдро_ПолучитьИзКэшаНастройкуSMARTS("НастройкиБизнесПроцессов");
	СтруктураОтбора = Новый Структура("ТипИсходногоДокумента1С, Используется", ТекущаяСтрока.ТипДокумента1С, Истина); 
	НайденныеСтроки = НастройкиОбмена.НайтиСтроки(СтруктураОтбора);
			
	ПереданнаяТаблица = Новый ТаблицаЗначений;
	ПереданнаяТаблица.Колонки.Добавить("Название");
	ПереданнаяТаблица.Колонки.Добавить("ТипИсходногоДокумента1С_Синоним");
	ПереданнаяТаблица.Колонки.Добавить("ТипИсходногоДокумента1С");
	ПереданнаяТаблица.Колонки.Добавить("ID_БизнесПроцесса");
	
	Для каждого НайденнаяСтрока Из НайденныеСтроки Цикл
		НоваяСтрока = ПереданнаяТаблица.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, НайденнаяСтрока);							
		НоваяСтрока.ТипИсходногоДокумента1С_Синоним = МетаданныеДокумента1С.Синоним;
	КонецЦикла; 			
	
	ФормаВыбора = ПолучитьФорму("ФормаСлужебная_ВыборСтрокиИзТаблицы", ЭтаФорма, ЭтаФорма);	
	ФормаВыбора.ИмяТаблицы = "БизнесПроцессыДляВыгрузки";
	ФормаВыбора.ПереданнаяТаблица = ПереданнаяТаблица;
	ФормаВыбора._ЛокКонтекст = _ЛокКонтекст;			
	РезультатВыбора = ФормаВыбора.ОткрытьМодально();
	
	Если РезультатВыбора <> Неопределено Тогда
		ТекущаяСтрока.НастройкаБизнесПроцесса = РезультатВыбора.Данные.ID_БизнесПроцесса;
		ТекущаяСтрока.БизнесПроцесс = РезультатВыбора.Данные.Название;
	КонецЕсли;	
КонецПроцедуры

Процедура БизнесПроцессОткрытие(Элемент,СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекущаяСтрока = ЭлементыФормы.Документы1С.ТекущаяСтрока;
	ID_БизнесПроцесса =  ТекущаяСтрока.НастройкаБизнесПроцесса;
	Если Не ЗначениеЗаполнено(ID_БизнесПроцесса) Тогда
		Возврат;
	КонецЕсли;
	
	НастройкиБизнесПроцессов = _ЛокКонтекст.ЛокЯдро_ПолучитьИзКэшаНастройкуSMARTS("НастройкиБизнесПроцессов");
	Если НастройкиБизнесПроцессов = Ложь ИЛИ Не ЗначениеЗаполнено(НастройкиБизнесПроцессов) Тогда
		Возврат;
	КонецЕсли;
	
	ФормаРедактирования = ПолучитьФорму("ФормаНастройки_БизнесПроцесс", ЭтаФорма, ЭтаФорма);
	ФормаРедактирования._ЛокКонтекст = _ЛокКонтекст;
	ФормаРедактирования.ЭтоНовыйБизнесПроцесс = Ложь;	
		
	ПолноеЗначениеНастройки = НастройкиБизнесПроцессов.Найти(ID_БизнесПроцесса, "ID_БизнесПроцесса");
	Если ПолноеЗначениеНастройки <> Неопределено Тогда
		ЗаполнитьЗначенияСвойств(ФормаРедактирования, ПолноеЗначениеНастройки);
	КонецЕсли;
	
	
	ID_РедактируемогоБП = ФормаРедактирования.ОткрытьМодально();
	//Если ЗначениеЗаполнено(ID_РедактируемогоБП) Тогда
	//	ОбновитьТаблицуНастроекБизнесПроцессов(ID_РедактируемогоБП);
	//КонецЕсли;
	
КонецПроцедуры

#КонецОбласти


#Область ВспомогательныеМеханизмы

Процедура ЗаполнитьТаблицуДокументов1С()

	Документы1С.Очистить();
	
	ЗаполнитьКолонкиТаблицыДокументов1С();
	
	СписокОтобранныхДокументов = _ЛокКонтекст.ЛокЯдро_ПолучитьСписокДокументов1С("Интерактивный");
	Если ЗначениеЗаполнено(СписокОтобранныхДокументов) Тогда
		Для Каждого СтрокаДокумента Из СписокОтобранныхДокументов Цикл
			НоваяСтрока = Документы1С.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаДокумента);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьТаблицуДокументовSMARTS(ID_БазыSMARTS = "")
	
	ДокументыMS.Очистить();
	СписокИдВыгруженныхДокументов.Очистить();
	
	ТЗ = _ЛокКонтекст.ЛокЯдро_ПолучитьСписокДокументовНаСервереSMARTS(ID_БазыSMARTS);
	Для Каждого СтрокаТЗ Из ТЗ Цикл
		НоваяСтрокаТЗ = ДокументыMS.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрокаТЗ, СтрокаТЗ);
		// Состояние
		Если СтрокаТЗ.Завершен Тогда
			НоваяСтрокаТЗ.Состояние = "Завершен";	
		ИначеЕсли СтрокаТЗ.ВОбработке Тогда
			НоваяСтрокаТЗ.Состояние = "В работе";
		Иначе
			НоваяСтрокаТЗ.Состояние = "Выгружен";
		КонецЕсли;
		// Получаем дату из наименования (пока больше никак)
		Позиция = Найти(СтрокаТЗ.Имя, " от ");
		Если Позиция > 0 Тогда
			НоваяСтрокаТЗ.ДатаСоздания = Сред(СтрокаТЗ.Имя, Позиция + 4, 10);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтрокаТЗ.ИдИсходныхДокументов) Тогда
			МассивИд =  _ЛокКонтекст.ЛокЯдро_РазложитьСтрокуВМассивПодстрок(СтрокаТЗ.ИдИсходныхДокументов,";");
			Для Каждого ИдОбъединенногоДокумента Из МассивИд Цикл
				Если СписокИдВыгруженныхДокументов.НайтиПоЗначению(ИдОбъединенногоДокумента) =  Неопределено Тогда
					СписокИдВыгруженныхДокументов.Добавить(ИдОбъединенногоДокумента);	
				КонецЕсли;
			КонецЦикла;
		Иначе
			Если СписокИдВыгруженныхДокументов.НайтиПоЗначению(СтрокаТЗ.Ид) =  Неопределено Тогда
				СписокИдВыгруженныхДокументов.Добавить(СтрокаТЗ.Ид);	
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ВыгрузитьВыбранныеДокументыВБазуSMARTS()
		
	НастройкиОбмена = _ЛокКонтекст.ЛокЯдро_ПолучитьИзКэшаНастройкуSMARTS("НастройкиБизнесПроцессов");
		
	ВыбранныеДокументы = Документы1С.Скопировать(Новый Структура("Выгружать", Истина), "Ссылка, НастройкаБизнесПроцесса");
	
	Для Каждого СтрокаДокумента Из ВыбранныеДокументы Цикл
		
		//Если ДокументыMS.Найти(Строка(СтрокаДокумента.Ссылка), "Имя") <> Неопределено Тогда
		Если СписокИдВыгруженныхДокументов.НайтиПоЗначению(XMLСтрока(СтрокаДокумента.Ссылка)) <> Неопределено Тогда
			ТекстВопроса = "Документ " + Строка(СтрокаДокумента.Ссылка) + " уже был выгружен на ТСД. Повторить выгрузку?";
			Если Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет,,, "Предупреждение") = КодВозвратаДиалога.Нет Тогда
				СнятьПометкуВыгружатьВСтрокеТаблицы(СтрокаДокумента.Ссылка);
				Продолжить;
			КонецЕсли;
		КонецЕсли;				
		
		Если ЗначениеЗаполнено(СтрокаДокумента.НастройкаБизнесПроцесса) Тогда
			
			ID_БизнесПроцесса = СтрокаДокумента.НастройкаБизнесПроцесса;	
			
		Иначе	
			
			МетаданныеДокумента1С = СтрокаДокумента.Ссылка.Метаданные();
			СтруктураОтбора = Новый Структура("ТипИсходногоДокумента1С, Используется", СокрЛП(МетаданныеДокумента1С.Имя), Истина); 
			НайденныеСтроки = НастройкиОбмена.НайтиСтроки(СтруктураОтбора);
			
			Если НЕ НайденныеСтроки.Количество() Тогда
				
				Сообщить("Не удалось подобрать настройку бизнес-процесса для документа """ + СокрЛП(СтрокаДокумента.Ссылка) + """");		
				Продолжить;		
				
			ИначеЕсли НайденныеСтроки.Количество() = 1 Тогда
				
				ID_БизнесПроцесса = НайденныеСтроки[0].ID_БизнесПроцесса;
				
			ИначеЕсли НайденныеСтроки.Количество() > 1 Тогда
				
				ПереданнаяТаблица = Новый ТаблицаЗначений;
				ПереданнаяТаблица.Колонки.Добавить("Название");
				ПереданнаяТаблица.Колонки.Добавить("ТипИсходногоДокумента1С_Синоним");
				ПереданнаяТаблица.Колонки.Добавить("ТипИсходногоДокумента1С");
				ПереданнаяТаблица.Колонки.Добавить("ID_БизнесПроцесса");
				
				Для каждого НайденнаяСтрока Из НайденныеСтроки Цикл
					НоваяСтрока = ПереданнаяТаблица.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, НайденнаяСтрока);							
					НоваяСтрока.ТипИсходногоДокумента1С_Синоним = МетаданныеДокумента1С.Синоним;
				КонецЦикла; 			
				
				ФормаВыбора = ПолучитьФорму("ФормаСлужебная_ВыборСтрокиИзТаблицы", ЭтаФорма, ЭтаФорма);	
				ФормаВыбора.ИмяТаблицы = "БизнесПроцессыДляВыгрузки";
				ФормаВыбора.ПереданнаяТаблица = ПереданнаяТаблица;
				ФормаВыбора._ЛокКонтекст = _ЛокКонтекст;			
				РезультатВыбора = ФормаВыбора.ОткрытьМодально();
				
				Если ЗначениеЗаполнено(РезультатВыбора) И ЗначениеЗаполнено(РезультатВыбора.Данные) Тогда
					Если ЗначениеЗаполнено(РезультатВыбора.Данные.ID_БизнесПроцесса) Тогда
						ID_БизнесПроцесса = РезультатВыбора.Данные.ID_БизнесПроцесса;
					Иначе
						Сообщить("У выбранного бизнес-процесса """ + СокрЛП(РезультатВыбора.Данные.Название) + """ не заполнен ID");		
						Продолжить;
					КонецЕсли;	
				Иначе			
					Продолжить;		
				КонецЕсли;	
			Иначе
				Продолжить;
			КонецЕсли;		
			
		КонецЕсли;
		
		_ЛокКонтекст.ЛокЯдро_ВыгрузитьДокументВБазуSMARTS(СтрокаДокумента.Ссылка, ID_БизнесПроцесса);
		СнятьПометкуВыгружатьВСтрокеТаблицы(СтрокаДокумента.Ссылка);
		
	КонецЦикла;
	
	// Обновить табличные части
	ЗаполнитьТаблицуДокументовSMARTS(ID_БазыMS);
	
КонецПроцедуры

Процедура ВыгрузитьВыбранныеДокументыКакОдинВБазуSMARTS()
		
	НастройкиОбмена = _ЛокКонтекст.ЛокЯдро_ПолучитьИзКэшаНастройкуSMARTS("НастройкиБизнесПроцессов");
		
	ВыбранныеДокументы = Документы1С.Скопировать(Новый Структура("Выгружать", Истина), "Ссылка, НастройкаБизнесПроцесса");
	БПВыбранныхДокументов = ВыбранныеДокументы.Скопировать(,"НастройкаБизнесПроцесса");
	БПВыбранныхДокументов.Свернуть("НастройкаБизнесПроцесса");
	Если БПВыбранныхДокументов.Количество()>1 Тогда
		Сообщить("Для выбранных документов настроены разные бизнес процессы. Объединение невозможно.");
		Возврат;
	КонецЕсли;
	
	ID_БизнесПроцесса =  БПВыбранныхДокументов[0].НастройкаБизнесПроцесса;
	
	Если Не ЗначениеЗаполнено(ID_БизнесПроцесса) Тогда
		// Временно  сделаем исключение, потом доработаем алкоритм
		Сообщить("Для выбранных документов не удалось подобрать настройку бизнес процесса или они соответствуют нескольким отборам.Объединение невозможно");
		Возврат;
	КонецЕсли;
	
	МассивДокументов =  ВыбранныеДокументы.ВыгрузитьКолонку("Ссылка");
	ПрерватьВыгрузку = Ложь;	
	Для Каждого ИдДокумента Из МассивДокументов Цикл
		Если СписокИдВыгруженныхДокументов.НайтиПоЗначению(XMLСтрока(ИдДокумента)) <> Неопределено Тогда
			ТекстВопроса = "Документ " + Строка(ИдДокумента) + " уже был выгружен на ТСД. Повторить выгрузку?";
			Если Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет,,, "Предупреждение") = КодВозвратаДиалога.Нет Тогда
				ПрерватьВыгрузку = Истина;
				Прервать;
			КонецЕсли;			
		КонецЕсли;
	КонецЦикла;	
	
	Если ПрерватьВыгрузку Тогда
		Возврат;
	КонецЕсли;
		
	_ЛокКонтекст.ЛокЯдро_ВыгрузитьДокументВБазуSMARTS(МассивДокументов, ID_БизнесПроцесса);

	Для Каждого СтрокаДокумента Из ВыбранныеДокументы Цикл
		
		СнятьПометкуВыгружатьВСтрокеТаблицы(СтрокаДокумента.Ссылка);
		
	КонецЦикла;
	
	// Обновить табличные части
	ЗаполнитьТаблицуДокументовSMARTS(ID_БазыMS);
	
КонецПроцедуры


Процедура ЗагрузитьВыбранныеДокументыВБазу1С()
		
	НастройкиОбмена = _ЛокКонтекст.ЛокЯдро_ПолучитьИзКэшаНастройкуSMARTS("НастройкиБизнесПроцессов");
	
	ВыбранныеДокументы = ДокументыMS.НайтиСтроки(Новый Структура("Загружать,Состояние", Истина, "Завершен"));
	Для Каждого ДокументКЗагрузке Из ВыбранныеДокументы Цикл
		
		РезультатПодбораБП = _ЛокКонтекст.ЛокЯдро_ПолучитьНастройкуБизнесПроцесса(НастройкиОбмена, ДокументКЗагрузке.НастройкаБизнесПроцесса, ДокументКЗагрузке.ИмяТипаДокумента, Неопределено);
		
		// не найдено ни одной подходящей строки БП
		Если РезультатПодбораБП = Неопределено ИЛИ (РезультатПодбораБП.Статус = Ложь И НЕ РезультатПодбораБП.Данные.Количество()) Тогда
			
			Сообщить("Не удалось подобрать настройку бизнес-процесса для документа """ + ДокументКЗагрузке.Имя + """");
			Продолжить;
			
		// найдено более 1 строки БП, предлагаем пользователю вручную выбрать БП	
		ИначеЕсли РезультатПодбораБП.Статус = Ложь И РезультатПодбораБП.Данные.Количество() Тогда
			
			ФормаВыбора = ПолучитьФорму("ФормаСлужебная_ВыборСтрокиИзТаблицы", ЭтаФорма, ЭтаФорма);	
			ФормаВыбора.ИмяТаблицы = "БизнесПроцессыДляЗагрузки";
			ФормаВыбора._ЛокКонтекст = _ЛокКонтекст;
			ФормаВыбора.ПереданнаяТаблица = РезультатПодбораБП.Данные;
			РезультатПодбораБП = ФормаВыбора.ОткрытьМодально();
			Если РезультатПодбораБП = Неопределено Тогда
				Продолжить;
			КонецЕсли;	
			
		// найдена ровно 1 строка БП
		ИначеЕсли РезультатПодбораБП.Статус = Истина Тогда					
		Иначе	
			Продолжить;								
		КонецЕсли;	
		
		НастройкаБП = РезультатПодбораБП.Данные;		
		Если НЕ ЗначениеЗаполнено(СокрЛП(НастройкаБП.ТипРезультирующегоДокумента1С)) ИЛИ (НастройкаБП.ЗагружатьВТотЖе И НЕ ЗначениеЗаполнено(СокрЛП(НастройкаБП.ТипИсходногоДокумента1С))) Тогда
			Сообщить("Данный бизнес-процесс не подразумевает загрузку документа в 1С, т.к. у него не заполнен результирующий документ 1С");
			Продолжить;
		КонецЕсли;	
		
		ЭтоОбъединенныйДокумент = Ложь;
		Если ЗначениеЗаполнено(ДокументКЗагрузке.ИдИсходныхДокументов) 
			И Не НастройкаБП.НеРазбиватьОбъединенныйДокументПриЗагрузке Тогда // При включенной настройке будет загружаться как 1 обычный документ
			ЭтоОбъединенныйДокумент = Истина;
		КонецЕсли;
		
		ДокументДляЗаполнения = Неопределено;
		Если НЕ (ЭтоОбъединенныйДокумент ИЛИ НастройкаБП.ЗагружатьВТотЖе ИЛИ НастройкаБП.ВыполнитьТолькоПроизвольныйКод) Тогда
			Если НастройкаБП.СоздаватьНовыйДокументПриЗагрузке Тогда							
				ДокументДляЗаполнения = Документы[НастройкаБП.ТипРезультирующегоДокумента1С].ПустаяСсылка();
			Иначе				
				ФормаВыбора = ПолучитьФорму("ФормаСлужебная_ВыборДокументаДляЗагрузки", ЭтаФорма, ЭтаФорма);					
				ФормаВыбора._ЛокКонтекст = _ЛокКонтекст;
				ФормаВыбора.ТипДокумента1С = НастройкаБП.ТипРезультирующегоДокумента1С;
				ДокументДляЗаполнения = ФормаВыбора.ОткрытьМодально();				 
				Если ДокументДляЗаполнения = Неопределено Тогда
					Продолжить;
				КонецЕсли;				
			КонецЕсли;	
		КонецЕсли;				
		
		МассивРезультатовЗаписи = Новый Массив;
		
		Если  ЭтоОбъединенныйДокумент Тогда
			МассивИдИсходныхДокументов = _ЛокКонтекст.ЛокЯдро_РазложитьСтрокуВМассивПодстрок(ДокументКЗагрузке.ИдИсходныхДокументов,";");			
			Для Каждого  ИсходныйДокумент Из МассивИдИсходныхДокументов Цикл
				Если Не НастройкаБП.ЗагружатьВТотЖе Тогда
					ДокументДляЗаполнения = Документы[НастройкаБП.ТипРезультирующегоДокумента1С].ПустаяСсылка();	
				КонецЕсли;
				РезультатЗаписи = _ЛокКонтекст.ЛокЯдро_СформироватьИЗаписатьДокументВБазу1С_ПоID(ДокументКЗагрузке.Ид, 
																								ДокументКЗагрузке.ИмяТипаДокумента, 
																								ДокументКЗагрузке.НастройкаБизнесПроцесса, 
																								РезультатПодбораБП.Данные, 
																								ДокументДляЗаполнения,
																								,
																								ИсходныйДокумент);
				МассивРезультатовЗаписи.Добавить(РезультатЗаписи);
			КонецЦикла;
		Иначе
			РезультатЗаписи = _ЛокКонтекст.ЛокЯдро_СформироватьИЗаписатьДокументВБазу1С_ПоID(ДокументКЗагрузке.Ид, ДокументКЗагрузке.ИмяТипаДокумента, ДокументКЗагрузке.НастройкаБизнесПроцесса, РезультатПодбораБП.Данные, ДокументДляЗаполнения);
			МассивРезультатовЗаписи.Добавить(РезультатЗаписи);
		КонецЕсли;
		
		Для Каждого РезультатЗаписи Из МассивРезультатовЗаписи Цикл
			Если РезультатЗаписи.Статус = Ложь Тогда
				Сообщить(РезультатЗаписи.Сообщение);
			ИначеЕсли РезультатПодбораБП.Данные.ВыполнитьТолькоПроизвольныйКод Тогда
				Сообщить("Данные документа обработаны: "+ДокументКЗагрузке.Имя+". От пользователя: "+ДокументКЗагрузке.ИмяПользователя);
			Иначе
				
				ДокументЗаписан = РезультатЗаписи.ДокументЗаписан;
				// Временное решение для АктаПриемкиТТН КТ-2000
				Если ВРег(РезультатЗаписи.Данные.Метаданные().Имя) = ВРег("алкАктКТоварноТранспортнойНакладнойЕГАИС") Тогда
					
					ПараметрыФормы = Новый Структура;
					ПараметрыФормы.Вставить("Ключ", РезультатЗаписи.Данные.Ссылка);				
					Выполнить("ОткрытьФорму(""Документ.алкАктКТоварноТранспортнойНакладнойЕГАИС.ФормаОбъекта"",ПараметрыФормы)");
				// конец
				Иначе
					Если ДокументЗаписан Тогда
						Форма = РезультатЗаписи.Данные.ПолучитьФорму();			
					ИначеЕсли НЕ РезультатЗаписи.Данные.Ссылка.Пустая() Тогда
						Форма = РезультатЗаписи.Данные.Ссылка.ПолучитьФорму();
					Иначе	                                                                            
						Форма = ПолучитьФорму("Документ." + РезультатЗаписи.Данные.Метаданные().Имя + ".ФормаОбъекта");
					КонецЕсли;
					
					// для записанного документа не выполняем заполнение реквизитов и табличных частей
					// из РезультатЗаписи.Данные, т.к. они уже заполнены в записанном документе
					Если НЕ ДокументЗаписан Тогда
					
						ТабличныеЧасти = Новый Массив;
						Для каждого ТабличнаяЧасть Из РезультатЗаписи.Данные.Метаданные().ТабличныеЧасти Цикл
							ТабличныеЧасти.Добавить(ТабличнаяЧасть.Имя);
						КонецЦикла;				
						ТабличныеЧастиСтрокой = "";
						Для каждого ТабличнаяЧасть Из ТабличныеЧасти Цикл
							ТабличныеЧастиСтрокой = ТабличныеЧастиСтрокой + ТабличнаяЧасть + ", ";
						КонецЦикла;	
						ТабличныеЧастиСтрокой = Лев(ТабличныеЧастиСтрокой, СтрДлина(ТабличныеЧастиСтрокой) - 2);			
						Если ТипЗнч(Форма) = Тип("УправляемаяФорма") Тогда
							ОсновнойРеквизитФормы = "Объект";				
						Иначе
							ОсновнойРеквизитФормы = "ДокументОбъект";				
						КонецЕсли;
						//++ Пимуков И.Н. 2018-07-11 Получение списка реквизитов аналогично получению списка ТЧ выше
	//					ЗаполнитьЗначенияСвойств(Форма[ОсновнойРеквизитФормы], РезультатЗаписи.Данные, , ТабличныеЧастиСтрокой);						
						Для Каждого Рекизит Из РезультатЗаписи.Данные.Метаданные().Реквизиты Цикл
							Попытка
								Форма[ОсновнойРеквизитФормы][Рекизит.Имя] = РезультатЗаписи.Данные[Рекизит.Имя];
							Исключение
							КонецПопытки;
						КонецЦикла;
						//-- Пимуков И.Н.						
						Для каждого ТабличнаяЧасть Из ТабличныеЧасти Цикл
							Форма[ОсновнойРеквизитФормы][ТабличнаяЧасть].Очистить();
							Для каждого СтрокаТЧ Из РезультатЗаписи.Данные[ТабличнаяЧасть] Цикл
								ЗаполнитьЗначенияСвойств(Форма[ОсновнойРеквизитФормы][ТабличнаяЧасть].Добавить(), СтрокаТЧ);
							КонецЦикла;	
						КонецЦикла;
					
					КонецЕсли;
					
					Форма.Открыть();			
					Форма.Модифицированность = НЕ ДокументЗаписан;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		// Спрашиваем об удалении документа
		ТекстВопроса = "Удалить документ с ТСД?";
		Если Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Да Тогда
			РезультатУдаления = _ЛокКонтекст.ЛокЯдро_УдалитьДокументНаСервереSMARTS(ДокументКЗагрузке.Ид);
			Сообщить(РезультатУдаления.Сообщение + " [" + ДокументКЗагрузке.Имя + "]");
		КонецЕсли;
				
	КонецЦикла;
	
	ЗаполнитьТаблицуДокументовSMARTS(ID_БазыMS);
	
КонецПроцедуры

Процедура ЗагрузитьВыбранныеДокументыВОдинДокументБазы1С()
	
	ВыбранныеДокументы = ДокументыMS.НайтиСтроки(Новый Структура("Загружать,Состояние", Истина, "Завершен"));
	
	Если ВыбранныеДокументы.Количество() = 0 Тогда
		Возврат;	
	КонецЕсли;
	
	Если ВыбранныеДокументы.Количество() = 1 Тогда
		ЗагрузитьВыбранныеДокументыВБазу1С();
		Возврат;	
	КонецЕсли;
	
	ИмяТипаДокумента = ВыбранныеДокументы[0].ИмяТипаДокумента;
	
	Для Каждого ДокументКЗагрузке Из ВыбранныеДокументы Цикл
		
		Если ДокументКЗагрузке.ИмяТипаДокумента <> ИмяТипаДокумента Тогда
			Сообщить("Для загрузки в один документ 1С нужны документы СМАРТС одного типа");
			Возврат;	
		КонецЕсли;
			
	КонецЦикла;

	НастройкиОбмена = _ЛокКонтекст.ЛокЯдро_ПолучитьИзКэшаНастройкуSMARTS("НастройкиБизнесПроцессов");
	РезультатПодбораБП = _ЛокКонтекст.ЛокЯдро_ПолучитьНастройкуБизнесПроцесса(НастройкиОбмена, ВыбранныеДокументы[0].НастройкаБизнесПроцесса, ВыбранныеДокументы[0].ИмяТипаДокумента, Неопределено);
	
	// не найдено ни одной подходящей строки БП
	Если РезультатПодбораБП = Неопределено ИЛИ (РезультатПодбораБП.Статус = Ложь И НЕ РезультатПодбораБП.Данные.Количество()) Тогда
		
		Сообщить("Не удалось подобрать настройку бизнес-процесса для документа """ + ДокументКЗагрузке.Имя + """");
		Возврат;
		
	// найдено более 1 строки БП, предлагаем пользователю вручную выбрать БП	
	ИначеЕсли РезультатПодбораБП.Статус = Ложь И РезультатПодбораБП.Данные.Количество() Тогда
		
		ФормаВыбора = ПолучитьФорму("ФормаСлужебная_ВыборСтрокиИзТаблицы", ЭтаФорма, ЭтаФорма);	
		ФормаВыбора.ИмяТаблицы = "БизнесПроцессыДляЗагрузки";
		ФормаВыбора._ЛокКонтекст = _ЛокКонтекст;
		ФормаВыбора.ПереданнаяТаблица = РезультатПодбораБП.Данные;
		РезультатПодбораБП = ФормаВыбора.ОткрытьМодально();
		
		Если РезультатПодбораБП = Неопределено Тогда
			Возврат;
		КонецЕсли;	
		
	// найдена ровно 1 строка БП
	ИначеЕсли РезультатПодбораБП.Статус = Истина Тогда					
	Иначе	
		Возврат;								
	КонецЕсли;
	
	ДокументДляЗаполнения = Неопределено;
	Если НЕ РезультатПодбораБП.Данные.ЗагружатьВТотЖе Тогда
		Если РезультатПодбораБП.Данные.СоздаватьНовыйДокументПриЗагрузке Тогда							
			ДокументДляЗаполнения = Документы[РезультатПодбораБП.Данные.ТипРезультирующегоДокумента1С].ПустаяСсылка();
		Иначе				
			ФормаВыбора = ПолучитьФорму("ФормаСлужебная_ВыборДокументаДляЗагрузки", ЭтаФорма, ЭтаФорма);					
			ФормаВыбора._ЛокКонтекст = _ЛокКонтекст;
			ФормаВыбора.ТипДокумента1С = РезультатПодбораБП.Данные.ТипРезультирующегоДокумента1С;
			ДокументДляЗаполнения = ФормаВыбора.ОткрытьМодально();				 
			Если ДокументДляЗаполнения = Неопределено Тогда
				Возврат;
			КонецЕсли;				
		КонецЕсли;	
	КонецЕсли;
	
	Индекс = ВыбранныеДокументы.Количество() - 1;
	ПоследнийДокумент = ВыбранныеДокументы[Индекс];
	ВыбранныеДокументы[Индекс] = ВыбранныеДокументы[0];
	ВыбранныеДокументы[0] = ПоследнийДокумент; 
	
	Для Каждого ДокументКЗагрузке Из ВыбранныеДокументы Цикл
		
		// + ZHKN 20.10.2017 
		// Если в настройках стоит галочка "ОчищатьПередЗагрузкой"
		// количество с разных документов не суммируется
		// приходится снимать галочку в настройках загрузки
		// Ка сделать по другому пока не ясно
		Если ДокументКЗагрузке.Ид <> ВыбранныеДокументы[0].Ид Тогда
			Для Каждого СтрокаТаблицы Из РезультатПодбораБП.Данные.НастройкаЗагрузкиПолей Цикл
				СтрокаТаблицы.ОчищатьПередЗагрузкой	= Ложь;
				
				
				Если СтрокаТаблицы.Владелец().Колонки.Найти("ТабличнаяЧастьДокумента1С") <> Неопределено Тогда
					Для Каждого СтрокаТЧ Из СтрокаТаблицы.ТабличнаяЧастьДокумента1С Цикл
						СтрокаТЧ.ОчищатьПередЗагрузкой = Ложь;
					КонецЦикла;
				КонецЕсли;
			
			КонецЦикла;
			
			Для Каждого СтрокаТаблицы Из РезультатПодбораБП.Данные.НастройкаЗагрузкиТЧ Цикл
				Для Каждого СтрокаТЧ Из СтрокаТаблицы.ТабличнаяЧастьДокумента1С Цикл
					СтрокаТЧ.ОчищатьПередЗагрузкой = Ложь;
				КонецЦикла;
			КонецЦикла;
			
		КонецЕсли;
		// - ZHKN 20.10.2017
		
		РезультатЗаписи = _ЛокКонтекст.ЛокЯдро_СформироватьИЗаписатьДокументВБазу1С_ПоID(ДокументКЗагрузке.Ид, ДокументКЗагрузке.ИмяТипаДокумента, ДокументКЗагрузке.НастройкаБизнесПроцесса, РезультатПодбораБП.Данные, ДокументДляЗаполнения);

		Если РезультатЗаписи.Статус = Ложь Тогда
			Сообщить(РезультатЗаписи.Сообщение);
			Продолжить;
		КонецЕсли;
		
		ДокументДляЗаполнения = РезультатЗаписи;
		
	КонецЦикла;
	

	Если НЕ РезультатЗаписи.Данные.Ссылка.Пустая() Тогда
		Форма = РезультатЗаписи.Данные.Ссылка.ПолучитьФорму();
	Иначе	                                                                            
		Форма = ПолучитьФорму("Документ." + РезультатЗаписи.Данные.Метаданные().Имя + ".ФормаОбъекта");
	КонецЕсли;
	
	ТабличныеЧасти = Новый Массив;
	Для каждого ТабличнаяЧасть Из РезультатЗаписи.Данные.Метаданные().ТабличныеЧасти Цикл
		ТабличныеЧасти.Добавить(ТабличнаяЧасть.Имя);
	КонецЦикла;				
	ТабличныеЧастиСтрокой = "";
	Для каждого ТабличнаяЧасть Из ТабличныеЧасти Цикл
		ТабличныеЧастиСтрокой = ТабличныеЧастиСтрокой + ТабличнаяЧасть + ", ";
	КонецЦикла;	
	ТабличныеЧастиСтрокой = Лев(ТабличныеЧастиСтрокой, СтрДлина(ТабличныеЧастиСтрокой) - 2);			
	Если ТипЗнч(Форма) = Тип("УправляемаяФорма") Тогда
		ОсновнойРеквизитФормы = "Объект";				
	Иначе
		ОсновнойРеквизитФормы = "ДокументОбъект";				
	КонецЕсли;	
	
	ЗаполнитьЗначенияСвойств(Форма[ОсновнойРеквизитФормы], РезультатЗаписи.Данные,, ТабличныеЧастиСтрокой);
	
	Для каждого ТабличнаяЧасть Из ТабличныеЧасти Цикл
		Форма[ОсновнойРеквизитФормы][ТабличнаяЧасть].Очистить();
		Для каждого СтрокаТЧ Из РезультатЗаписи.Данные[ТабличнаяЧасть] Цикл
			ЗаполнитьЗначенияСвойств(Форма[ОсновнойРеквизитФормы][ТабличнаяЧасть].Добавить(), СтрокаТЧ);
		КонецЦикла;	
	КонецЦикла;
	
	Форма.Открыть();
	Форма.Модифицированность = Истина;
	
	// Спрашиваем об удалении документа
	Если Вопрос("Удалить документы с ТСД?", РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Да Тогда
		
		Для Каждого ДокументКЗагрузке Из ВыбранныеДокументы Цикл
			РезультатУдаления = _ЛокКонтекст.ЛокЯдро_УдалитьДокументНаСервереSMARTS(ДокументКЗагрузке.Ид);
			Сообщить(РезультатУдаления.Сообщение + " [" + ДокументКЗагрузке.Имя + "]");
		КонецЦикла;
	КонецЕсли;
		
	ЗаполнитьТаблицуДокументовSMARTS(ID_БазыMS);
	
КонецПроцедуры	

Процедура ОткрытьДокументТСД()
	
	ТекущиеДанные = ЭлементыФормы.ДокументыMS.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда			
		Возврат;
	КонецЕсли; 					
	
	ИмяФормыПросмотра = "ФормаПросмотра_ДокументMS";
	
	ФормаОткрытия = ПолучитьФорму(ИмяФормыПросмотра, ЭтаФорма, ЭтаФорма);	
	
	Если ФормаОткрытия.Открыта() Тогда		
		ФормаОткрытия.Закрыть();							
		ФормаОткрытия = ПолучитьФорму(ИмяФормыПросмотра, ЭтаФорма, ЭтаФорма);									
	КонецЕсли;		
	
	ФормаОткрытия._ЛокКонтекст 		= _ЛокКонтекст;
	ФормаОткрытия.ID_ДокументаMS 	= ТекущиеДанные.Ид;
	ФормаОткрытия.ТипДокументаMS 	= ТекущиеДанные.ИмяТипаДокумента;
	
	ФормаОткрытия.Открыть();								
	
КонецПроцедуры

Процедура СнятьПометкуВыгружатьВСтрокеТаблицы(Документ1С)

	Строка = Документы1С.Найти(Документ1С, "Ссылка");
	
	Если Строка <> Неопределено Тогда
		Строка.Выгружать = Ложь;	
	КонецЕсли;	

КонецПроцедуры
 
Процедура ПеренестиСТерминалаНесколькоНажатие(Элемент)
	
	Если НЕ _ЛокКонтекст.КомЯдро_ПроверитьСоединениеССерверомSMARTS(ID_БазыMS) Тогда
		Возврат;
	КонецЕсли;
	
	ЗагрузитьВыбранныеДокументыВОдинДокументБазы1С();
	
КонецПроцедуры

Процедура ЗаполнитьКолонкиТаблицыДокументов1С()
	
	Документы1С.Колонки.Очистить();
	ЭлементыФормы.Документы1С.Колонки.Очистить();
	ЗаполнитьТаблицуДокументов1СОбязательнымиКолонками();
	
	СохраненныеНастройки = _ЛокКонтекст.ЛокЯдро_ПолучитьИзКэшаНастройкуSMARTS("ФормаОбменаВыбранныеКолонки");
	ОписаниеТиповЛюбаяСсылка =   Новый ОписаниеТипов(Документы.ТипВсеСсылки() );
	
	Если СохраненныеНастройки =  Ложь Или СохраненныеНастройки = Неопределено Тогда														
		ЗаполнитьКолонкиТаблицыДокументов1СПоУмолчанию();
		СохраненныеНастройки = _ЛокКонтекст.ЛокЯдро_ПолучитьИзКэшаНастройкуSMARTS("ФормаОбменаВыбранныеКолонки");
	КонецЕсли;
	
	ВключенныеКолонки = СохраненныеНастройки.НайтиСтроки(Новый Структура("Использование",Истина));

	Для Каждого Строка Из ВключенныеКолонки Цикл
		Если  Документы1С.Колонки.Найти(Строка.Название) <> Неопределено Тогда
			ЭлементыФормы.Документы1С.Колонки.Найти(Строка.Название).Видимость = Истина;
			Продолжить;
		КонецЕсли;
		НоваяКолонка = Документы1С.Колонки.Добавить(Строка.Название, ,Строка.Представление);							
		
		НовыйЭФ = ЭлементыФормы.Документы1С.Колонки.Добавить(Строка.Название,Строка.Представление);
		НовыйЭФ.Данные   =  Строка.Название;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьКолонкиТаблицыДокументов1СПоУмолчанию()		
	
	ТаблицаВыбранныхКолонок = Новый ТаблицаЗначений;
	ТаблицаВыбранныхКолонок.Колонки.Добавить("Использование");
	ТаблицаВыбранныхКолонок.Колонки.Добавить("Представление");
	ТаблицаВыбранныхКолонок.Колонки.Добавить("Название");	
	
	СписокПредставлений = _ЛокКонтекст.ЛокЯдро_ПолучитьСписокРеквизитовВПредставленииДокумента();
	
	Для Каждого Рекизит Из СписокПредставлений Цикл
		НС = ТаблицаВыбранныхКолонок.Добавить();
		НС.Использование 	= ?(Рекизит.Значение = "Ссылка" ИЛИ Рекизит.Значение = "Количество" ИЛИ Рекизит.Значение = "Контрагент",Истина,Ложь);
		НС.Представление 	= Рекизит.Представление;
		НС.Название 			= Рекизит.Значение;
	КонецЦикла;
	
	_ЛокКонтекст.ЛокЯдро_СохранитьНастройкуВБазеSMARTS("ФормаОбменаВыбранныеКолонки", ТаблицаВыбранныхКолонок.Скопировать());	
	// обновим настройку в кэше
	ТекущиеНастройкиMS.ФормаОбменаВыбранныеКолонки =   ТаблицаВыбранныхКолонок.Скопировать();
	_ЛокКонтекст.ТекущиеНастройкиMS.ФормаОбменаВыбранныеКолонки =   ТаблицаВыбранныхКолонок.Скопировать();
		
КонецПроцедуры

Процедура ЗаполнитьТаблицуДокументов1СОбязательнымиКолонками()
		
	// Колонка с галочками выбора
	Документы1С.Колонки.Добавить("Выгружать",Новый ОписаниеТипов("Булево"),"Выгружать",21);	
	НовыйЭФ = ЭлементыФормы.Документы1С.Колонки.Добавить("Выгружать","");
	НовыйЭФ.Видимость = Истина;
	НовыйЭФ.ДанныеФлажка = "Выгружать";
	НовыйЭФ.РежимРедактирования = РежимРедактированияКолонки.Непосредственно;
	НовыйЭФ.ТекстШапки = "";
	НовыйЭФ.Ширина = 5;
	НовыйЭФ.ИзменениеРазмера =  ИзменениеРазмераКолонки.НеИзменять;
	
	// Скрытые колонки
	//Документы1С.Колонки.Добавить("Документ1С",Новый ОписаниеТипов(Документы.ТипВсеСсылки()),"Документ 1С");
	//	
	//НовыйЭФ = ЭлементыФормы.Документы1С.Колонки.Добавить("Документ1С", "Документ 1С");
	//НовыйЭФ.Видимость = Ложь;
	//НовыйЭФ.Данные =  "Документ1С";
	
	Документы1С.Колонки.Добавить("Ссылка",Новый ОписаниеТипов(Документы.ТипВсеСсылки()),"Название");		
	НовыйЭФ = ЭлементыФормы.Документы1С.Колонки.Добавить("Ссылка", "Название");
	НовыйЭФ.Видимость = Ложь;
	НовыйЭФ.Данные =  "Ссылка";
	НовыйЭФ.ЭлементУправления.КнопкаОткрытия 	= Истина;
	НовыйЭФ.ЭлементУправления.КнопкаВыбора 		= Ложь;
	НовыйЭФ.ЭлементУправления.КнопкаОчистки 	= Ложь;
	
	Документы1С.Колонки.Добавить("НастройкаБизнесПроцесса",,"ID бизнес-процесса");
	НовыйЭФ = ЭлементыФормы.Документы1С.Колонки.Добавить("НастройкаБизнесПроцесса", "ID бизнес-процесса");
	НовыйЭФ.Видимость = Ложь;
	НовыйЭФ.Данные =  "НастройкаБизнесПроцесса";
	
	Документы1С.Колонки.Добавить("БизнесПроцесс",,"Настройка бизнес-процесса");	
	НовыйЭФ = ЭлементыФормы.Документы1С.Колонки.Добавить("БизнесПроцесс", "Настройка бизнес-процесса");
	НовыйЭФ.Видимость = Ложь;
	НовыйЭФ.Данные =  "БизнесПроцесс";
	//НовыйЭФ.ЭлементУправления.КнопкаВыбора 	= Истина;
	//НовыйЭФ.ЭлементУправления.УстановитьДействие("НачалоВыбора",Новый Действие("БизнесПроцессНачалоВыбора"));
	НовыйЭФ.ЭлементУправления.КнопкаОткрытия = Истина;
	НовыйЭФ.РежимРедактирования = РежимРедактированияКолонки.Непосредственно;
	НовыйЭФ.ЭлементУправления.УстановитьДействие("Открытие",Новый Действие("БизнесПроцессОткрытие"));

	
	Документы1С.Колонки.Добавить("ТипДокумента1С",,"Тип документа 1С");	
	НовыйЭФ = ЭлементыФормы.Документы1С.Колонки.Добавить("ТипДокумента1С", "Тип документа 1С");
	НовыйЭФ.Видимость = Ложь;
	НовыйЭФ.Данные =  "ТипДокумента1С";

	
КонецПроцедуры

Процедура ВыгрузитьБизнесПроцессы() Экспорт
	
КонецПроцедуры

#КонецОбласти

