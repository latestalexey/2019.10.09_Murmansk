
Перем Элементы;
Перем Объект;
Перем ID_ПроизвольногоОтбораИзНастройки;
Перем ВариантОтбораИзНастройки;

Процедура КоманднаяПанель1СохранитьНастройку(Кнопка)
	СтруктураВозврата = Новый Структура;
	НастройкаКомпоновщикаСтрокой = ЗначениеВСтрокуВнутр(Компоновщик.ПолучитьНастройки());
	СтруктураВозврата.Вставить("НастройкаКомпоновщикаСтрокой", 	НастройкаКомпоновщикаСтрокой);
	СтруктураВозврата.Вставить("Используется", 					Используется);
	СтруктураВозврата.Вставить("ВариантОтбора", 				ВариантОтбора);
	СтруктураВозврата.Вставить("ID_ПроизвольногоОтбора",		ID_ПроизвольногоОтбора);
	Закрыть(СтруктураВозврата);
КонецПроцедуры

Процедура ПриОткрытии()

	СхемаСКД = _ЛокКонтекст.ЛокЯдро_ПолучитьКомпоновкуСКДДляОтбораДокументов1С(ТипДокумента1С, ID_Узла);
	Компоновщик.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаСКД));
	
	НастройкиКомпоновки = Неопределено;
	Если ЗначениеЗаполнено(НастройкаКомпоновщикаСтрокой) Тогда
		НастройкиКомпоновки = ЗначениеИзСтрокиВнутр(СтрЗаменить(НастройкаКомпоновщикаСтрокой, Символы.ВК, ""));
	КонецЕсли; 	
	
	Если НастройкиКомпоновки <> Неопределено Тогда
		Компоновщик.ЗагрузитьНастройки(НастройкиКомпоновки);
	КонецЕсли;	
	
	ТаблицаПараметров = _ЛокКонтекст.ЛокЯдро_ПолучитьЗначенияГлобальныхПараметров(ID_Узла);
	Если ТипЗнч(ТаблицаПараметров) = Тип("ТаблицаЗначений") Тогда
		Для Каждого СтрокаПараметра Из ТаблицаПараметров Цикл
			ЗаполнитьЗначенияСвойств(ЗначенияОбщихПараметров.Добавить(), СтрокаПараметра);
		КонецЦикла;
	КонецЕсли;
	
	ОбработкаИзмененияФлагаИспользуется();
	
	ЭлементыФормы.ВариантОтбора.СписокВыбора = ПолучитьСписокВариантовОтбора();	
	
	УстановитьВидимостьДоступностьЭлементов();
	
	ОбновитьСписокПроизвольныхОтборовДокументов();
	
	УстановитьНаименованиеПроизвольногоОтбора();
	
	ID_ПроизвольногоОтбораИзНастройки 	= ID_ПроизвольногоОтбора;	
	ВариантОтбораИзНастройки 			= ВариантОтбора;
	
КонецПроцедуры

Функция ПолучитьВсеНастройкиДляФормы(МассивКлючейНастроек)
		
	ВсеНастройкиДляФормы = ОбработкаОбъект.ПолучитьНастройки(МассивКлючейНастроек);
	
	Возврат ВсеНастройкиДляФормы;
	
КонецФункции

Процедура ВернутьсяКНастройкамНажатие(Элемент)
	//ЭтаФорма.Панель.ТекущаяСтраница = ЭтаФорма.Панель.Страницы.ГруппаНастройкиОтбора;	
	ЭтаФорма.Панель.Страницы.ГруппаНастройкиОтбора.Видимость = Истина;
	ЭтаФорма.Панель.Страницы.ГруппаРезультатаЗапроса.Видимость = Ложь;
КонецПроцедуры

Процедура КомпоновщикНастройкиПараметрыДанныхПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	Если ДанныеСтроки.Параметр = "ГлубинаОтбора" Тогда
		ДанныеСтроки.Использование = Истина;
		ОформлениеСтроки.Ячейки.Использование.Доступность = Ложь;
	КонецЕсли;
КонецПроцедуры

Процедура ИспользуетсяПриИзменении(Элемент)
		
	ОбработкаИзмененияФлагаИспользуется();
	
КонецПроцедуры

Процедура ОбработкаИзмененияФлагаИспользуется()
	
	ЭлементыФормы.Используется.ЦветТекста = ?(Используется, WebЦвета.Зеленый, WebЦвета.Красный);
	ЭлементыФормы.Используется.Заголовок = ?(ЭлементыФормы.Используется.Значение, "Включено", "Отключено");
	
КонецПроцедуры	

// +++ Денвик
Процедура КоманднаяПанель1ВыполнитьЗапросПоНастройкам(Кнопка)
	ЭтаФорма.Панель.Страницы.ГруппаНастройкиОтбора.Видимость = Ложь;
	ЭтаФорма.Панель.Страницы.ГруппаРезультатаЗапроса.Видимость = Истина;
	ВыполнитьЗапросНаСервере(Ложь);	
КонецПроцедуры

Процедура КоманднаяПанель1ВыполнитьЗапросПоДаннымФормы(Кнопка)
	ЭтаФорма.Панель.Страницы.ГруппаНастройкиОтбора.Видимость = Ложь;
	ЭтаФорма.Панель.Страницы.ГруппаРезультатаЗапроса.Видимость = Истина;
	ВыполнитьЗапросНаСервере(Истина);
КонецПроцедуры

Процедура ВыполнитьЗапросНаСервере(ВыполнитьПоДаннымФормы = Ложь)		
	
	ЭтаФорма.ЭлементыФормы.КоличествоДокументов.Заголовок = "";
	
	ТаблицаДокументовКонструктора 			= Неопределено;
	ТаблицаДокументовПроизвольногоЗапроса 	= Неопределено;
	
	Если ВыполнитьПоДаннымФормы Тогда
		ВариантОтбораДляЗапроса = ВариантОтбора;
	Иначе	
		ВариантОтбораДляЗапроса = ВариантОтбораИзНастройки;
	КонецЕсли;	
	
	Если ВРег(СокрЛП(ВариантОтбораДляЗапроса)) = ВРег(СокрЛП("Только конструктор")) Тогда		
		
		ТаблицаДокументовКонструктора = ВыполнитьЗапросКонструктора(ВыполнитьПоДаннымФормы);		
		
	ИначеЕсли ВРег(СокрЛП(ВариантОтбораДляЗапроса)) = ВРег(СокрЛП("Только запрос")) Тогда	
		
		ТаблицаДокументовПроизвольногоЗапроса = ВыполнитьЗапросПроизвольногоОтбора(ВыполнитьПоДаннымФормы);		
		
	ИначеЕсли ВРег(СокрЛП(ВариантОтбораДляЗапроса)) = ВРег(СокрЛП("Конструктор и запрос")) Тогда		
		
		ТаблицаДокументовКонструктора 			= ВыполнитьЗапросКонструктора(ВыполнитьПоДаннымФормы);				
		ТаблицаДокументовПроизвольногоЗапроса 	= ВыполнитьЗапросПроизвольногоОтбора(ВыполнитьПоДаннымФормы);	
						
	Иначе
		Возврат;
	КонецЕсли;	
	
	РезультатЗапроса.Очистить();
	
	Если ТипЗнч(ТаблицаДокументовКонструктора) = Тип("ТаблицаЗначений") Тогда
		Для каждого Строка Из ТаблицаДокументовКонструктора Цикл
			ЗаполнитьЗначенияСвойств(РезультатЗапроса.Добавить(), Строка);					
		КонецЦикла; 
	КонецЕсли;	
	
	Если ТипЗнч(ТаблицаДокументовПроизвольногоЗапроса) = Тип("ТаблицаЗначений") Тогда
		Для каждого Строка Из ТаблицаДокументовПроизвольногоЗапроса Цикл
			ЗаполнитьЗначенияСвойств(РезультатЗапроса.Добавить(), Строка);					
		КонецЦикла; 
	КонецЕсли;		
	
	ЭтаФорма.ЭлементыФормы.КоличествоДокументов.Заголовок = "Количество документов: " + Строка(РезультатЗапроса.Количество());
	
КонецПроцедуры
//---  Денвик

Функция ВыполнитьЗапросКонструктора(ВыполнитьПоДаннымФормы = Ложь)

	Если ВыполнитьПоДаннымФормы Тогда	
		НастройкиКомпоновщика = Компоновщик.ПолучитьНастройки();						
	Иначе					
		Если НастройкаКомпоновщикаСтрокой <> "" Тогда
			НастройкиКомпоновщика = ЗначениеИзСтрокиВнутр(НастройкаКомпоновщикаСтрокой);
		Иначе
			Сообщить("Для данного отбора нет сохраненных настроек.");
			Возврат Неопределено;
		КонецЕсли;
	КонецЕсли;
	ПараметрыЗапроса.Очистить();
	Для Каждого Параметр ИЗ НастройкиКомпоновщика.ПараметрыДанных.Элементы Цикл
		Если Параметр.Использование Тогда
			НС = ПараметрыЗапроса.Добавить();
			НС.Имя = Параметр.Параметр;
			НС.Значение = Параметр.Значение;
		КонецЕсли;
	КонецЦикла;
	
	Возврат _ЛокКонтекст.ЛокЯдро_ПолучитьДокументыПоЗапросуСКД(НастройкиКомпоновщика, ТипДокумента1С);	

КонецФункции

Функция ВыполнитьЗапросПроизвольногоОтбора(ВыполнитьПоДаннымФормы = Ложь)

	Если ВыполнитьПоДаннымФормы Тогда				
		ID_ПроизвольногоОтбораДляЗапроса = ID_ПроизвольногоОтбора;
	Иначе		
		ID_ПроизвольногоОтбораДляЗапроса = ID_ПроизвольногоОтбораИзНастройки;
	КонецЕсли;	
	
	Возврат _ЛокКонтекст.ЛокЯдро_ПолучитьДокументыПоПроизвольномуОтбору(ID_ПроизвольногоОтбораДляЗапроса);

КонецФункции
 
Функция ПолучитьСписокВариантовОтбора()
	
	СписокВариантовОтбора = Новый СписокЗначений;
	СписокВариантовОтбора.Добавить("Только конструктор", 	"Только конструктор");
	СписокВариантовОтбора.Добавить("Только запрос", 		"Только запрос");
	СписокВариантовОтбора.Добавить("Конструктор и запрос", 	"Конструктор и запрос");
	
	Возврат СписокВариантовОтбора;
	
КонецФункции

Процедура НаименованиеПроизвольногоОтбораНачалоВыбора(Элемент, СтандартнаяОбработка)		
	
	ФормаРедактирования = ПолучитьФорму("ФормаСписка_ПроизвольныеОтборыДокументов", ЭтаФорма, ЭтаФорма);
	ФормаРедактирования._ЛокКонтекст = _ЛокКонтекст;
	ФормаРедактирования.ID_ПроизвольногоОтбора = ID_ПроизвольногоОтбора;
	
	РезультатРедактирования = ФормаРедактирования.ОткрытьМодально();	
	Если РезультатРедактирования <> Неопределено Тогда
		ID_ПроизвольногоОтбора 						= РезультатРедактирования;				
	КонецЕсли;					
	
	ОбновитьСписокПроизвольныхОтборовДокументов();
	
	УстановитьНаименованиеПроизвольногоОтбора();
	
КонецПроцедуры

Процедура НаименованиеПроизвольногоОтбораОчистка(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

Процедура ВариантОтбораПриИзменении(Элемент)
		
	УстановитьВидимостьДоступностьЭлементов();
		
КонецПроцедуры

Процедура УстановитьВидимостьДоступностьЭлементов()

	ЭлементыФормы.НаименованиеПроизвольногоОтбора.Доступность		= (Найти(ВРег(СокрЛП(ВариантОтбора)), ВРег(СокрЛП("Запрос"))) > 0);		
	
	ЭлементыФормы.КомпоновщикНастройкиПараметрыДанных.Доступность 	= (Найти(ВРег(СокрЛП(ВариантОтбора)), ВРег(СокрЛП("Конструктор"))) > 0);
	ЭлементыФормы.КомпоновщикНастройкиОтбор.Доступность 			= (Найти(ВРег(СокрЛП(ВариантОтбора)), ВРег(СокрЛП("Конструктор"))) > 0);
	ЭлементыФормы.ЗначенияОбщихПараметров.Доступность 				= (Найти(ВРег(СокрЛП(ВариантОтбора)), ВРег(СокрЛП("Конструктор"))) > 0);
	
КонецПроцедуры

Процедура ОбновитьСписокПроизвольныхОтборовДокументов()
	
	СписокПроизвольныхОтборовДокументов.Очистить();
	
	ТаблицаПроизвольныхОтборовДокументов = _ЛокКонтекст.ЛокЯдро_ПолучитьИзКэшаНастройкуSMARTS("ПроизвольныеОтборыДокументов");
	Если ТаблицаПроизвольныхОтборовДокументов <> Ложь И ТипЗнч(ТаблицаПроизвольныхОтборовДокументов) = Тип("ТаблицаЗначений") Тогда
		Для Каждого СтрокаТЗ Из ТаблицаПроизвольныхОтборовДокументов Цикл
			СписокПроизвольныхОтборовДокументов.Добавить(СтрокаТЗ.ID_ПроизвольногоОтбора, СтрокаТЗ.Наименование);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьНаименованиеПроизвольногоОтбора()

	НайденныйЭлементСписка = СписокПроизвольныхОтборовДокументов.НайтиПоЗначению(ID_ПроизвольногоОтбора);
	Если НайденныйЭлементСписка <> Неопределено Тогда
		НаименованиеПроизвольногоОтбора = НайденныйЭлементСписка.Представление;
	Иначе	
		НаименованиеПроизвольногоОтбора = "";
	КонецЕсли;
	
КонецПроцедуры
 

Элементы = ЭлементыФормы;
Объект = ОбработкаОбъект;
