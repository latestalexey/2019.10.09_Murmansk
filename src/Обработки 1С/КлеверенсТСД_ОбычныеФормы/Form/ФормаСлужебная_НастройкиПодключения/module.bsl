
#Область ОбработчикиСобытийФормы

Процедура ПриОткрытии()
	
	Компонента = _ЛокКонтекст.ЛокЯдро_ПолучитьДанныеИзХранилища1С("Cleverence_РасположениеКомпоненты");
	ПараметрыПодключения = _ЛокКонтекст.ЛокЯдро_ПолучитьДанныеИзХранилища1С("Cleverence_ПараметрыПодключенияMS");
	
	Если ПараметрыПодключения <> Неопределено Тогда				
		Если ТипЗнч(_ЛокКонтекст.СтруктураПодключенияMS) = Тип("Структура") И _ЛокКонтекст.СтруктураПодключенияMS.Свойство("IdBaseSMARTS") Тогда
			БазаСМАРТС = _ЛокКонтекст.СтруктураПодключенияMS.IdBaseSMARTS;
		Иначе
			БазаСМАРТС = ПараметрыПодключения.Ид;	
		КонецЕсли;
	// в хранилище общих настроек может не быть параметров подключения (например, если запустили обработку первый раз и т.д.)
	//Иначе
	//	БазаСМАРТС = ПараметрыПодключения.Ид;
	КонецЕсли;
	
	ЗаполнитьДанныеДоступныхБазSMARTS();		
	ЗаполнитьПараметрыПодключеннойБазыСмартс();
	
КонецПроцедуры

Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	
	Если НЕ Модифицированность Тогда
		Возврат;
	КонецЕсли;  	
	
	Режим = РежимДиалогаВопрос.ДаНетОтмена;
	
	ТекстВопроса = "Сохранить изменения?";
	Ответ = Вопрос(ТекстВопроса, Режим, 0, КодВозвратаДиалога.Отмена, "Изменение данных"); 
	Если Ответ = КодВозвратаДиалога.Отмена Тогда
			СтандартнаяОбработка = Ложь;
			Отказ = Истина;
	ИначеЕсли Ответ = КодВозвратаДиалога.Да Тогда
		Если НЕ СохранитьНастройкиПодключения() Тогда
			Отказ = Истина;
		КонецЕсли;
	КонецЕсли;	
		
КонецПроцедуры

#КонецОбласти


#Область ОбработчикиЭлементовСобытийФормы

Процедура БазаСМАРТСПриИзменении(Элемент)
	
	Модифицированность = Истина;
	ЗаполнитьПараметрыПодключеннойБазыСмартс();

КонецПроцедуры

Процедура КомпонентаПриИзменении(Элемент)
	ПриИзмененииРасположенияКомпоненты();
КонецПроцедуры

Процедура Компонента1ПриИзменении(Элемент)
	ПриИзмененииРасположенияКомпоненты();
КонецПроцедуры

Процедура ПриИзмененииРасположенияКомпоненты()
	Модифицированность = Истина;
	ЗаполнитьДанныеДоступныхБазSMARTS();
	ЗаполнитьПараметрыПодключеннойБазыСмартс();
КонецПроцедуры

Процедура ПанельФормыЗаписатьИЗакрыть(Кнопка)
	
	Если СохранитьНастройкиПодключения() Тогда
		Модифицированность = Ложь;
		Закрыть();
	КонецЕсли;
	
КонецПроцедуры

Процедура ПанельФормыЗаписать(Кнопка)
	Если СохранитьНастройкиПодключения() Тогда
		Модифицированность = Ложь;
	КонецЕсли;
КонецПроцедуры

#КонецОбласти


#Область ВспомогательныеМеханизмы

Функция СохранитьНастройкиПодключения()
	
	Результат = Ложь;
	
	СтрокаПараметров = СписокБазНаСервереSMARTS.Найти(БазаСМАРТС, "Ид");
			
	Если СтрокаПараметров <> Неопределено Тогда
		Если _ЛокКонтекст.КомЯдро_ПроверитьСоединениеССерверомSMARTS(БазаСМАРТС, Ложь) Тогда
			ПараметрыПодключенияMS = Новый Структура;
			ПараметрыПодключенияMS.Вставить("Ид", 							СтрокаПараметров.Ид);
			ПараметрыПодключенияMS.Вставить("Имя", 							СтрокаПараметров.Имя);
			ПараметрыПодключенияMS.Вставить("ИдПриложения", 				СтрокаПараметров.ИдПриложения);
			ПараметрыПодключенияMS.Вставить("ИдОсновногоПриложения", 		СтрокаПараметров.ИдОсновногоПриложения);
			ПараметрыПодключенияMS.Вставить("ИмяПриложения", 				СтрокаПараметров.ИмяПриложения);
			ПараметрыПодключенияMS.Вставить("УровеньПриложения", 			СтрокаПараметров.УровеньПриложения);
			ПараметрыПодключенияMS.Вставить("СтрокаПодключения", 			СтрокаПараметров.СтрокаПодключения);
			ПараметрыПодключенияMS.Вставить("РабочийКаталог", 				СтрокаПараметров.РабочийКаталог); 
			ПараметрыПодключенияMS.Вставить("ИмяИнтеграционнойОбработки",	СтрокаПараметров.ИмяИнтеграционнойОбработки);
			ПараметрыПодключенияMS.Вставить("ПутьИнтеграционнойОбработки",	СтрокаПараметров.ПутьИнтеграционнойОбработки);
			
			_ЛокКонтекст.ПараметрыПодключенияMS = ПараметрыПодключенияMS;
			_ЛокКонтекст.ЛокЯдро_СохранитьДанныеВХранилище1С("Cleverence_ПараметрыПодключенияMS", ПараметрыПодключенияMS);
			_ЛокКонтекст.ЛокЯдро_СохранитьДанныеВХранилище1С("Cleverence_РасположениеКомпоненты", Компонента);
			_ЛокКонтекст.ЛокЯдро_Инициализация(ИдБазыСмартс);
			Результат = Истина;
		Иначе
			Оповестить("СменаСтатуса","РаботаССерверомБазаНедоступна");
			Сообщить("С выбранной базой отсутствует соединение.");
		КонецЕсли;
	КонецЕсли;
	
	Оповестить("УстановленыНастройкиПодключения",,ЭтаФорма);

	Возврат Результат;
	
КонецФункции 

Процедура ЗаполнитьДанныеДоступныхБазSMARTS()
	
	СписокБазНаСервереSMARTS = _ЛокКонтекст.ЛокЯдро_ПолучитьСписокБазНаСервереSMARTS(Компонента);
	
	Если СписокБазНаСервереSMARTS.Количество() Тогда
		
		ЭлементыФормы.БазаСМАРТС.СписокВыбора.Очистить();
		
		Для Каждого СтрокаСписка из СписокБазНаСервереSMARTS Цикл
			ЭлементыФормы.БазаСМАРТС.СписокВыбора.Добавить(СтрокаСписка.Ид, СтрокаСписка.Имя);
		КонецЦикла;	
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьПараметрыПодключеннойБазыСмартс()
	
	ИдБазыСмартс   = "";
	ИмяБазыСмартс  = "";
	ИдПриложения   = "";
	ИмяПриложения  = "";
	Комментарий    = "";
	РабочийКаталог = "";
	ПапкаОбмена	   = "";
	РежимРаботы    = "Не получилось определить...";
	
	ЭлементыФормы.ПапкаОбмена.Доступность		 = Ложь;
	ЭлементыФормы.НадписьПапкаОбмена.Доступность = Ложь;
	
	Если СписокБазНаСервереSMARTS.Колонки.Найти("Ид") <> Неопределено Тогда	// Если список баз заполнен корректно и присутствуют необходимые колонки
		
		СтрокаПараметров = СписокБазНаСервереSMARTS.Найти(БазаСМАРТС, "Ид");
		Если СтрокаПараметров <> Неопределено Тогда
			ИдБазыСмартс   = СтрокаПараметров.Ид;
			ИмяБазыСмартс  = СтрокаПараметров.Имя;
			ИдПриложения   = СтрокаПараметров.ИдПриложения;
			ИмяПриложения  = СтрокаПараметров.ИмяПриложения;
			Комментарий    = СтрокаПараметров.Комментарий;
			РабочийКаталог = СтрокаПараметров.РабочийКаталог;
			ПапкаОбмена	   = СтрокаПараметров.ПапкаОбмена;
			Если СтрокаПараметров.РаботаСУстройствомНапрямую Тогда
				РежимРаботы = "Работа с устройством напрямую";
			ИначеЕсли СтрокаПараметров.РаботаСКаталогом  Тогда
				РежимРаботы = "Работа с каталогом";
			ИначеЕсли СтрокаПараметров.РаботаССервером  Тогда
				РежимРаботы = "Работа с сервером";
			ИначеЕсли СтрокаПараметров.РаботаСЛокальнымСервером Тогда
				РежимРаботы = "Работа с локальным сервером";
			ИначеЕсли СтрокаПараметров.РаботаСУдаленнымСервером  Тогда
				РежимРаботы = "Работа с удаленным сервером";
			КонецЕсли;
			
			ИмяИнтеграционнойОбработки 	= СтрокаПараметров.ИмяИнтеграционнойОбработки;
			ПутьИнтеграционнойОбработки = СтрокаПараметров.ПутьИнтеграционнойОбработки;
			
			ЭлементыФормы.ПапкаОбмена.Доступность		 = СтрокаПараметров.РаботаСКаталогом;
			ЭлементыФормы.НадписьПапкаОбмена.Доступность = СтрокаПараметров.РаботаСКаталогом;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти


