
Перем КлючиНастройкиПроизвольныхКодов;

#Область ОбработчикиСобытийФормы

Процедура ПриОткрытии()
	
	ОбновитьТаблицуНастроекБизнесПроцессов();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийПанельДействийФормы

Процедура ПанельФормыСохранитьВФайл(Кнопка)	
	
	СтруктураНастройки = Новый Структура;
	СтруктураНастройки.Вставить("НастройкиБизнесПроцессов", НастройкиБизнесПроцессов);
	
	Для каждого КлючНастройки Из КлючиНастройкиПроизвольныхКодов Цикл
		СтруктураНастройки.Вставить(КлючНастройки, _ЛокКонтекст.ЛокЯдро_ПолучитьИзКэшаНастройкуSMARTS(КлючНастройки));				
	КонецЦикла; 
	
	_ЛокКонтекст.ЛокЯдро_СохранитьНастройкиВФайл(СтруктураНастройки, "НастройкиБизнесПроцессов");
	
КонецПроцедуры

Процедура ПанельФормыЗагрузитьИзФайла(Кнопка)
	
	Ответ = Вопрос("Очистить таблицу бизнес-процессов перед загрузкой настроек?", РежимДиалогаВопрос.ДаНетОтмена, , , "Внимание");
	
	Если Ответ = КодВозвратаДиалога.Отмена Тогда
		Возврат;
	ИначеЕсли Ответ = КодВозвратаДиалога.Да Тогда
		НастройкиБизнесПроцессов.Очистить();		
	КонецЕсли;	
	
	СтруктураНастроек = _ЛокКонтекст.ЛокЯдро_ПолучитьНастройкиИзФайла("НастройкиБизнесПроцессов");
	
	Если СтруктураНастроек <> Неопределено Тогда
		
		Для каждого Строка Из СтруктураНастроек.НастройкиБизнесПроцессов Цикл
			
			НайденнаяСтрока = НастройкиБизнесПроцессов.Найти(Строка.ID_БизнесПроцесса, "ID_БизнесПроцесса");
			
			Если НайденнаяСтрока <> Неопределено Тогда		
				НастройкиБизнесПроцессов.Удалить(НайденнаяСтрока);				
			КонецЕсли; 
			
			ЗаполнитьЗначенияСвойств(НастройкиБизнесПроцессов.Добавить(), Строка);					
			
		КонецЦикла; 
		
		_ЛокКонтекст.ЛокЯдро_СохранитьНастройкуВБазеSMARTS("НастройкиБизнесПроцессов", НастройкиБизнесПроцессов);
		_ЛокКонтекст.ЛокЯдро_ЗаписатьВКэшНастройкуSMARTS("НастройкиБизнесПроцессов", НастройкиБизнесПроцессов);
		
		ОбновитьТаблицуНастроекБизнесПроцессов();
		
		Для каждого КлючНастройки Из КлючиНастройкиПроизвольныхКодов Цикл
			_ЛокКонтекст.ЛокЯдро_СохранитьНастройкуВБазеSMARTS(КлючНастройки, СтруктураНастроек[КлючНастройки]);
			_ЛокКонтекст.ЛокЯдро_ЗаписатьВКэшНастройкуSMARTS(КлючНастройки, СтруктураНастроек[КлючНастройки]);					
		КонецЦикла; 
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПанельФормыВыгрузитьБизнесПроцессы(Кнопка)
	
	ВыгрузитьБизнесПроцессы();
	
КонецПроцедуры

Процедура ПанельФормыВосстановитьНастройки(Кнопка)
	
	ТекстВопроса = "Текущие настройки будут утеряны! Перезаписать их?";
	ОтветПользователя = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет,, КодВозвратаДиалога.Нет, "Внимание!");
	Если ОтветПользователя <> КодВозвратаДиалога.Да Тогда
		Возврат;	
	КонецЕсли;		
	
	НастройкиБизнесПроцессовПоУмолчанию = _ЛокКонтекст.ЛокЯдро_ПолучитьНастройкуПоУмолчаниюНаСервереSMARTS("НастройкиБизнесПроцессов", ID_ТекущейБазы);
	
	Если НастройкиБизнесПроцессовПоУмолчанию <> Неопределено Тогда
		
		_ЛокКонтекст.ЛокЯдро_СохранитьНастройкуВБазеSMARTS("НастройкиБизнесПроцессов", НастройкиБизнесПроцессовПоУмолчанию);
		_ЛокКонтекст.ЛокЯдро_ЗаписатьВКэшНастройкуSMARTS("НастройкиБизнесПроцессов", НастройкиБизнесПроцессовПоУмолчанию);
		
		ОбновитьТаблицуНастроекБизнесПроцессов();
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийТабличногоПоля

Процедура НастройкиБизнесПроцессовВыбор(Элемент, ВыбраннаяСтрока, Колонка, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ОткрытьФормуРедактированияНастройки(Ложь);
КонецПроцедуры

Процедура НастройкиБизнесПроцессовПередНачаломДобавления(Элемент, Отказ, Копирование)
	ОткрытьФормуРедактированияНастройки(Истина, Копирование);
	Отказ = Истина;
КонецПроцедуры

Процедура НастройкиБизнесПроцессовПередНачаломИзменения(Элемент, Отказ)
	ОткрытьФормуРедактированияНастройки(Ложь);
КонецПроцедуры

Процедура НастройкиБизнесПроцессовПередУдалением(Элемент, Отказ)
	ТекущиеДанные = ЭлементыФормы.ОтображаемыеНастройкиБизнесПроцессов.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда		
		Возврат;
	КонецЕсли;                     
	
	Отказ = Истина;	
	ТекстВопроса = "Вы действительно хотите удалить настройку бизнес-процесса """ + ТекущиеДанные.Название + """?";
	ОтветПользователя = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНетОтмена,, КодВозвратаДиалога.Нет, "Внимание!");
	Если ОтветПользователя = КодВозвратаДиалога.Да Тогда		
		ID_ТекущегоБизнесПроцесса = ТекущиеДанные.ID_БизнесПроцесса;
		СтрокаНастройкиБП = НастройкиБизнесПроцессов.Найти(ID_ТекущегоБизнесПроцесса, "ID_БизнесПроцесса");
		Если СтрокаНастройкиБП <> Неопределено Тогда
			ОтображаемыеНастройкиБизнесПроцессов.Удалить(ТекущиеДанные);				
			НастройкиБизнесПроцессов.Удалить(СтрокаНастройкиБП);
			_ЛокКонтекст.ЛокЯдро_СохранитьНастройкуВБазеSMARTS("НастройкиБизнесПроцессов", НастройкиБизнесПроцессов);		
			ЭтоТекущийУзел = (_ЛокКонтекст.ДанныеТекущегоУзла.ID_Узла = "") ИЛИ (_ЛокКонтекст.КатегорииНастроекMS.УзловыеНастройки.Найти("НастройкиБизнесПроцессов") = Неопределено);
			Если ЭтоТекущийУзел Тогда
				_ЛокКонтекст.ЛокЯдро_ЗаписатьВКэшНастройкуSMARTS("НастройкиБизнесПроцессов", НастройкиБизнесПроцессов);
			КонецЕсли;
			ВыгрузитьБизнесПроцессы();
		КонецЕсли;
	КонецЕсли; 
КонецПроцедуры

#КонецОбласти

#Область ВспомогательныеМеханизмы

Процедура ОткрытьФормуРедактированияНастройки(ЭтоНовыйБизнесПроцесс, ЭтоКопирование = Ложь)
	
	ФормаРедактирования = ПолучитьФорму("ФормаНастройки_БизнесПроцесс", ЭтаФорма, ЭтаФорма);
	ФормаРедактирования._ЛокКонтекст = _ЛокКонтекст;
	ФормаРедактирования.ЭтоНовыйБизнесПроцесс = ЭтоНовыйБизнесПроцесс;
	
	Если НЕ ЭтоНовыйБизнесПроцесс ИЛИ ЭтоКопирование Тогда
		ТекущаяСтрока = ЭлементыФормы.ОтображаемыеНастройкиБизнесПроцессов.ТекущаяСтрока;
		ПолноеЗначениеНастройки = НастройкиБизнесПроцессов.Найти(ТекущаяСтрока.ID_БизнесПроцесса, "ID_БизнесПроцесса");
		Если ПолноеЗначениеНастройки <> Неопределено Тогда
			ЗаполнитьЗначенияСвойств(ФормаРедактирования, ПолноеЗначениеНастройки);
		КонецЕсли;
	КонецЕсли;
	
	ID_РедактируемогоБП = ФормаРедактирования.ОткрытьМодально();
	Если ЗначениеЗаполнено(ID_РедактируемогоБП) Тогда
		ОбновитьТаблицуНастроекБизнесПроцессов(ID_РедактируемогоБП);
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбновитьТаблицуНастроекБизнесПроцессов(ID_ТекущейСтроки = "") Экспорт
	
	ОтображаемыеНастройкиБизнесПроцессов.Очистить();
	НастройкиБизнесПроцессов = _ЛокКонтекст.ЛокЯдро_ПолучитьИзКэшаНастройкуSMARTS("НастройкиБизнесПроцессов");
	
	Если НЕ НастройкиБизнесПроцессов = Ложь И ЗначениеЗаполнено(НастройкиБизнесПроцессов) Тогда
		
		// Временное решение. Убрать потом поиск старых колонок по соответствию
		Если НастройкиБизнесПроцессов.Колонки.Найти("ИсходныйДокумент1С") <> Неопределено Тогда
			НастройкиБизнесПроцессов.Колонки.ИсходныйДокумент1С.Имя = "ТипИсходногоДокумента1С";
		КонецЕсли;
		Если НастройкиБизнесПроцессов.Колонки.Найти("ДокументПриемник") <> Неопределено Тогда
			НастройкиБизнесПроцессов.Колонки.ДокументПриемник.Имя = "ТипРезультирующегоДокумента1С";
		КонецЕсли;
		Если НастройкиБизнесПроцессов.Колонки.Найти("НастройкиЗагрузкиТЧ") <> Неопределено Тогда
			НастройкиБизнесПроцессов.Колонки.НастройкиЗагрузкиТЧ.Имя = "НастройкаЗагрузкиТЧ";
		КонецЕсли;
		
		// +++ PRODUCTS-533 
		Если НастройкиБизнесПроцессов.Колонки.Найти("IDБизнесПроцесса") <> Неопределено Тогда
			НастройкиБизнесПроцессов.Колонки.IDБизнесПроцесса.Имя = "ID_БизнесПроцесса";
		КонецЕсли;
		// ---   PRODUCTS-533 
		
		Если НастройкиБизнесПроцессов.Колонки.Найти("ИсходныйДокумент1ССиноним") <> Неопределено Тогда
			
			НастройкиБизнесПроцессов.Колонки.Удалить(НастройкиБизнесПроцессов.Колонки.ИсходныйДокумент1ССиноним);
		КонецЕсли;
		Если НастройкиБизнесПроцессов.Колонки.Найти("Приемник1ССиноним") <> Неопределено Тогда
			НастройкиБизнесПроцессов.Колонки.Удалить(НастройкиБизнесПроцессов.Колонки.Приемник1ССиноним);
		КонецЕсли;
		Если НастройкиБизнесПроцессов.Колонки.Найти("ДокументMSСиноним") <> Неопределено Тогда
			НастройкиБизнесПроцессов.Колонки.Удалить(НастройкиБизнесПроцессов.Колонки.ДокументMSСиноним);
		КонецЕсли;
		Если НастройкиБизнесПроцессов.Колонки.Найти("БазаMobileSMARTS") <> Неопределено Тогда
			НастройкиБизнесПроцессов.Колонки.Удалить(НастройкиБизнесПроцессов.Колонки.БазаMobileSMARTS);
		КонецЕсли;
		Если НастройкиБизнесПроцессов.Колонки.Найти("НастроитьПравилаВыгрузкиТЧ") <> Неопределено Тогда
			НастройкиБизнесПроцессов.Колонки.Удалить(НастройкиБизнесПроцессов.Колонки.НастроитьПравилаВыгрузкиТЧ);
		КонецЕсли;
		Если НастройкиБизнесПроцессов.Колонки.Найти("НастроитьПравилаВыгрузкиШапки") <> Неопределено Тогда
			НастройкиБизнесПроцессов.Колонки.Удалить(НастройкиБизнесПроцессов.Колонки.НастроитьПравилаВыгрузкиШапки);
		КонецЕсли;
		Если НастройкиБизнесПроцессов.Колонки.Найти("НастроитьПравилаЗагрузкиШапки") <> Неопределено Тогда
			НастройкиБизнесПроцессов.Колонки.Удалить(НастройкиБизнесПроцессов.Колонки.НастроитьПравилаЗагрузкиШапки);
		КонецЕсли;
		Если НастройкиБизнесПроцессов.Колонки.Найти("НастроитьСоставЗагрузкиТЧ") <> Неопределено Тогда
			НастройкиБизнесПроцессов.Колонки.Удалить(НастройкиБизнесПроцессов.Колонки.НастроитьСоставЗагрузкиТЧ);
		КонецЕсли;
		Если НастройкиБизнесПроцессов.Колонки.Найти("ТекстЗапросаЗагрузкаСТДС") <> Неопределено Тогда
			НастройкиБизнесПроцессов.Колонки.Удалить(НастройкиБизнесПроцессов.Колонки.ТекстЗапросаЗагрузкаСТДС);
		КонецЕсли;
		
		Если НастройкиБизнесПроцессов.Колонки.Найти("КоллективнаяРабота") = Неопределено Тогда
			НастройкиБизнесПроцессов.Колонки.Добавить("КоллективнаяРабота", Новый ОписаниеТипов("Булево"));
		КонецЕсли;
		Если НастройкиБизнесПроцессов.Колонки.Найти("СоздаватьНовыйДокументПриЗагрузке") = Неопределено Тогда
			НастройкиБизнесПроцессов.Колонки.Добавить("СоздаватьНовыйДокументПриЗагрузке", Новый ОписаниеТипов("Булево"));
		КонецЕсли;
		Если НастройкиБизнесПроцессов.Колонки.Найти("НазначитьПользователю") = Неопределено Тогда
			НастройкиБизнесПроцессов.Колонки.Добавить("НазначитьПользователю", Новый ОписаниеТипов("Строка"));
		КонецЕсли;
		Если НастройкиБизнесПроцессов.Колонки.Найти("КопияДокументаДляКаждогоПользователя") = Неопределено Тогда
			НастройкиБизнесПроцессов.Колонки.Добавить("КопияДокументаДляКаждогоПользователя", Новый ОписаниеТипов("Булево"));
		КонецЕсли;
		Если НастройкиБизнесПроцессов.Колонки.Найти("ЗаписыватьДокументПослеЗагрузки") = Неопределено Тогда
			НастройкиБизнесПроцессов.Колонки.Добавить("ЗаписыватьДокументПослеЗагрузки", Новый ОписаниеТипов("Булево"));
		КонецЕсли;
		Если НастройкиБизнесПроцессов.Колонки.Найти("СвязиТабличныхЧастей") = Неопределено Тогда
			НастройкиБизнесПроцессов.Колонки.Добавить("СвязиТабличныхЧастей", Новый ОписаниеТипов("ТаблицаЗначений"));
		КонецЕсли;
		Если НастройкиБизнесПроцессов.Колонки.Найти("ВыполнитьТолькоПроизвольныйКод") = Неопределено Тогда
			НастройкиБизнесПроцессов.Колонки.Добавить("ВыполнитьТолькоПроизвольныйКод", Новый ОписаниеТипов("Булево"));
		КонецЕсли;
		Если НастройкиБизнесПроцессов.Колонки.Найти("НастройкаПредставленийРеквизитовДокумента") = Неопределено Тогда
			НастройкиБизнесПроцессов.Колонки.Добавить("НастройкаПредставленийРеквизитовДокумента", Новый ОписаниеТипов("ТаблицаЗначений"));
		КонецЕсли;
		Если НастройкиБизнесПроцессов.Колонки.Найти("ЗаменитьПредставлениеДокументаПриВыгрузке") = Неопределено Тогда
			НастройкиБизнесПроцессов.Колонки.Добавить("ЗаменитьПредставлениеДокументаПриВыгрузке", Новый ОписаниеТипов("Булево"));
		КонецЕсли;
		Если НастройкиБизнесПроцессов.Колонки.Найти("НеРазбиватьОбъединенныйДокументПриЗагрузке") = Неопределено Тогда
			НастройкиБизнесПроцессов.Колонки.Добавить("НеРазбиватьОбъединенныйДокументПриЗагрузке", Новый ОписаниеТипов("Булево"));
		КонецЕсли;
		
		// ****** +++ PRODUCTS-224 - реализовать выгрузку из 1С из нескольких ТЧ, поэтому меняем состав столбцов ************
		
		// выполняем измененения структуры таблицы настроек только если структура осталась в старом формате (когда нельзя было выгружать несколько ТЧ 1С)
		Если НастройкиБизнесПроцессов.Колонки.Найти("НастройкаВыгрузкиТЧ") <> Неопределено И НастройкиБизнесПроцессов[0].НастройкаВыгрузкиТЧ.Колонки.Найти("ТабличнаяЧастьДокумента1С") = Неопределено Тогда
			
			Соответствие = Новый Соответствие;
			Для Каждого СтрокаНастройки Из НастройкиБизнесПроцессов Цикл 
				Соответствие.Вставить(СтрокаНастройки.ID_БизнесПроцесса, СтрокаНастройки.НастройкаВыгрузкиТЧ.Скопировать());						
			КонецЦикла;
			
			НастройкаВыгрузкиТЧ = Новый ТаблицаЗначений;				
			
			КолонкиТЧ = НастройкаВыгрузкиТЧ.Колонки;			
			
			КолонкиТЧ.Добавить("ТабличнаяЧастьДокументаMS", Новый ОписаниеТипов("Строка"));
			КолонкиТЧ.Добавить("НастройкаТЧСтрокой", 		Новый ОписаниеТипов("Строка"));
			КолонкиТЧ.Добавить("Настроить", 				Новый ОписаниеТипов("Строка"));
			
			КолонкиТЧ.Добавить("ТабличнаяЧастьДокумента1С", Новый ОписаниеТипов("ТаблицаЗначений"));																						
			КолонкиТЧ.Добавить("ТекстЗапросаВыгрузкиНаТСД", Новый ОписаниеТипов("Строка"));																			
			
			НастройкиБизнесПроцессов.Колонки.Удалить("НастройкаВыгрузкиТЧ");
						
			НастройкиБизнесПроцессов.Колонки.Добавить("НастройкаВыгрузкиТЧ", Новый ОписаниеТипов("ТаблицаЗначений"));						
			
			// копируем существующие настройки выгрузки ТЧ, чтобы не пропали
			Для Каждого Строка Из НастройкиБизнесПроцессов Цикл 
				
				КопияТЗ = НастройкаВыгрузкиТЧ.СкопироватьКолонки();
			
				СтрокаНастройки = КопияТЗ.Добавить();		
				
				СтрокаНастройки.ТабличнаяЧастьДокументаMS 	= "СтрокиПлан";
				СтрокаНастройки.НастройкаТЧСтрокой 			= Строка.ИмяТЧ1СИсходного;
				СтрокаНастройки.ТабличнаяЧастьДокумента1С 	= Соответствие[Строка.ID_БизнесПроцесса];				
				СтрокаНастройки.Настроить 					= ?(СтрокаНастройки.ТабличнаяЧастьДокумента1С.Количество(), "Настроено", "Настроить");								
				
				Если НастройкиБизнесПроцессов.Колонки.Найти("ТекстЗапросаВыгрузкиНаТСД") <> Неопределено Тогда
					СтрокаНастройки.ТекстЗапросаВыгрузкиНаТСД = Строка.ТекстЗапросаВыгрузкиНаТСД;								
				КонецЕсли;	
				
				Строка.НастройкаВыгрузкиТЧ = КопияТЗ;
				
			КонецЦикла;	
			
			Если НастройкиБизнесПроцессов.Колонки.Найти("ТекстЗапросаВыгрузкиНаТСД") <> Неопределено Тогда
				НастройкиБизнесПроцессов.Колонки.Удалить("ТекстЗапросаВыгрузкиНаТСД");
			КонецЕсли;
			
			СохранитьНастройкиБизнесПроцессов();
			
		КонецЕсли;
		
		// ************************************************ --- PRODUCTS-224 ************************************************		

		// Временное решение. Окончание
				
		Для Каждого СтрокаНастройки Из НастройкиБизнесПроцессов Цикл
			
			// +++ PRODUCTS-533 
			Если Найти(СтрокаНастройки.ТипРезультирующегоДокумента1С, " ") > 0 
				ИЛИ Найти(СтрокаНастройки.ТипИсходногоДокумента1С, " ") > 0 Тогда 
				Продолжить;
			КонецЕсли;
			// --- PRODUCTS-533 

			НоваяСтрока = ОтображаемыеНастройкиБизнесПроцессов.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаНастройки);
			
			Если ЗначениеЗаполнено(СтрокаНастройки.ТипИсходногоДокумента1С) Тогда
				Если _ЛокКонтекст.СтруктураМетаданных.Документы1С.Свойство(СтрокаНастройки.ТипИсходногоДокумента1С) Тогда
					НоваяСтрока.ТипИсходногоДокумента1С_Синоним = _ЛокКонтекст.СтруктураМетаданных.Документы1С[СтрокаНастройки.ТипИсходногоДокумента1С].Синоним;
				КонецЕсли;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(СтрокаНастройки.ТипДокументаMS) Тогда
				Если _ЛокКонтекст.СтруктураМетаданных.ДокументыMS.Свойство(СтрокаНастройки.ТипДокументаMS) Тогда
					НоваяСтрока.ТипДокументаMS_Синоним = _ЛокКонтекст.СтруктураМетаданных.ДокументыMS[СтрокаНастройки.ТипДокументаMS].Синоним;
				КонецЕсли;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(СтрокаНастройки.ТипРезультирующегоДокумента1С) Тогда
				 
				Если _ЛокКонтекст.СтруктураМетаданных.Документы1С.Свойство(СтрокаНастройки.ТипРезультирующегоДокумента1С) Тогда
					НоваяСтрока.ТипРезультирующегоДокумента1С_Синоним = _ЛокКонтекст.СтруктураМетаданных.Документы1С[СтрокаНастройки.ТипРезультирующегоДокумента1С].Синоним;
				КонецЕсли;
			КонецЕсли;
			
		КонецЦикла;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ID_ТекущейСтроки) Тогда
		НайденнаяСтрока = ЭлементыФормы.ОтображаемыеНастройкиБизнесПроцессов.Значение.Найти(ID_ТекущейСтроки, "ID_БизнесПроцесса");
		Если НайденнаяСтрока <> Неопределено Тогда
			ЭлементыФормы.ОтображаемыеНастройкиБизнесПроцессов.ТекущаяСтрока = НайденнаяСтрока;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ВыгрузитьБизнесПроцессы() Экспорт
	
		
	Если Не _ЛокКонтекст.КомЯдро_ПроверитьСоединениеССерверомSMARTS(, Ложь) Тогда
		Если _ЛокКонтекст.ЛокЯдро_ПредложитьПользователюСохранитьНастройкиВФайл() Тогда
			ПанельФормыСохранитьВФайл("");	
		КонецЕсли;		
		Возврат;
	КонецЕсли;

	ОбновитьТаблицуНастроекБизнесПроцессов();
	
	// + ZHKN 12.09.2017
	// Выгружаются все строки бизнес процессов, которые имеют статус включен в таблицу БизнесПроцессы базы смартс.
	ТаблицаДляВыгрузки = НастройкиБизнесПроцессов.Скопировать(Новый Структура("Используется", Истина),
							"ID_БизнесПроцесса, Название, ТипДокументаMS, ТипИсходногоДокумента1С, ТипРезультирующегоДокумента1С");
	
	ТаблицаДляВыгрузки.Колонки.ID_БизнесПроцесса.Имя 				= "Ид";
	ТаблицаДляВыгрузки.Колонки.Название.Имя 						= "Наименование";	
	ТаблицаДляВыгрузки.Колонки.ТипДокументаMS.Имя 					= "ТипДокументаMobileSMARTS";
	ТаблицаДляВыгрузки.Колонки.ТипИсходногоДокумента1С.Имя 			= "ТипИсходногоДокумента";
	ТаблицаДляВыгрузки.Колонки.ТипРезультирующегоДокумента1С.Имя 	= "ТипРезультирующегоДокумента";
	
	_ЛокКонтекст.ЛокЯдро_ВыгрузитьПодготовленнуюТаблицуНаСерверSMARTS("БизнесПроцессы", ТаблицаДляВыгрузки, ID_ТекущейБазы);
	// - ZHKN 12.09.2017	
	
КонецПроцедуры	

Процедура СохранитьНастройкиБизнесПроцессов()
	
	ТаблицаДляСохранения = НастройкиБизнесПроцессов.Скопировать();
	_ЛокКонтекст.ЛокЯдро_СохранитьНастройкуВБазеSMARTS("НастройкиБизнесПроцессов", ТаблицаДляСохранения);	
	_ЛокКонтекст.ЛокЯдро_ЗаписатьВКэшНастройкуSMARTS("НастройкиБизнесПроцессов", ТаблицаДляСохранения);		
	
КонецПроцедуры

#КонецОбласти

КлючиНастройкиПроизвольныхКодов = Новый Массив;
КлючиНастройкиПроизвольныхКодов.Добавить("ПроизвольныеКоды_Выгрузка_ШапкаДокумента");
КлючиНастройкиПроизвольныхКодов.Добавить("ПроизвольныеКоды_Выгрузка_ТабличнаяЧастьДокумента");
КлючиНастройкиПроизвольныхКодов.Добавить("ПроизвольныеКоды_Загрузка_ШапкаДокумента");
КлючиНастройкиПроизвольныхКодов.Добавить("ПроизвольныеКоды_Загрузка_ТабличнаяЧастьДокумента");