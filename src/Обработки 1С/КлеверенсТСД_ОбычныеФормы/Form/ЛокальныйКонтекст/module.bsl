
#Область ЛокальныйКонтекст

#Область ЛокальныйКонтекст_Настройки

#Область ЛокальныйКонтекст_Настройки_Инициализация

Процедура ЛокЯдро_Инициализация(ID_Узла = "") Экспорт
	
	РасположениеКомпоненты = ЛокЯдро_ПолучитьДанныеИзХранилища1С("Cleverence_РасположениеКомпоненты");
	ПараметрыПодключенияMS   = ЛокЯдро_ПолучитьДанныеИзХранилища1С("Cleverence_ПараметрыПодключенияMS");
	
	Если НЕ ЗначениеЗаполнено(РасположениеКомпоненты) Тогда
		РасположениеКомпоненты = "НаСервере";
	КонецЕсли;
	
	Если РасположениеКомпоненты = "НаСервере" Тогда
		ДанныеДляИнициализации = ЛокЯдро_ПолучитьДанныеДляИнициализации(ID_Узла);
	Иначе
		ДанныеДляИнициализации = ЛокЯдро_ПолучитьДанныеДляИнициализации(ID_Узла, Ложь);
		КатегорииНастроекMS = ДанныеДляИнициализации.КатегорииНастроекMS;
		
		// Настройки
		СтруктураНастроек = ДанныеДляИнициализации.ТекущиеНастройкиMS;
		СтруктураНастроек = ЛокЯдро_ПолучитьНастройкиНаСервереSMARTS(СтруктураНастроек, ID_Узла);
		ДанныеДляИнициализации.Вставить("ТекущиеНастройкиMS", СтруктураНастроек);
		
		// Метаданные документов
		ДанныеДляИнициализации.СтруктураМетаданных.Вставить("ДокументыMS", КомЯдро_ПолучитьМетаданныеДокументовMS()); 
		
		// Пользователи подключенной базы MS
		ДанныеДляИнициализации.СтруктураМетаданных.Вставить("ПользователиMS", КомЯдро_ПолучитьПользователейMS()); 				
		
		ДанныеТекущегоУзла = Новый Структура;
		ДанныеТекущегоУзла.Вставить("ID_Узла", 		"");
		ДанныеТекущегоУзла.Вставить("Наименование", "");
		ДанныеТекущегоУзла.Вставить("ID_БазыMS", 	"");		
		
		// Текущий узел
		Если СтруктураНастроек.Свойство("ID_ТекущегоУзла") Тогда
			ID_ТекущегоУзла = СтруктураНастроек.ID_ТекущегоУзла;
		Иначе
			ID_ТекущегоУзла = "";
		КонецЕсли;
		
		Если ID_ТекущегоУзла <> "" И ТипЗнч(СтруктураНастроек.Узлы) = Тип("ТаблицаЗначений") Тогда
			ДанныеУзла = СтруктураНастроек.Узлы.Найти(ID_ТекущегоУзла, "ID_Узла");
			Если ДанныеУзла <> Неопределено Тогда			
				ДанныеТекущегоУзла.Вставить("ID_Узла", 		ID_ТекущегоУзла);
				ДанныеТекущегоУзла.Вставить("Наименование", ДанныеУзла.Наименование);
				Если ДанныеУзла.ИспользоватьЧастнуюБазу Тогда
					ДанныеТекущегоУзла.Вставить("ID_БазыMS", ДанныеУзла.ЧастнаяБазаMS);
				Иначе	
					ДанныеТекущегоУзла.Вставить("ID_БазыMS", ПараметрыПодключенияMS.Ид);
				КонецЕсли;				
			КонецЕсли;
		КонецЕсли;
		
		ДанныеДляИнициализации.Вставить("ДанныеТекущегоУзла", ДанныеТекущегоУзла);
		
	КонецЕсли;
	
	КатегорииНастроекMS = ДанныеДляИнициализации.КатегорииНастроекMS;
	ТекущиеНастройкиMS  = ДанныеДляИнициализации.ТекущиеНастройкиMS;
	СтруктураМетаданных = ДанныеДляИнициализации.СтруктураМетаданных;
	ВычислимыеПоля      = ДанныеДляИнициализации.ВычислимыеПоля;
	ДанныеТекущегоУзла  = ДанныеДляИнициализации.ДанныеТекущегоУзла;
	
	НастройкиИнициализированы = Истина;
	
КонецПроцедуры

Функция ЛокЯдро_ПолучитьДанныеДляИнициализации(ID_Узла, ЗаполнятьДанные = Истина)
	
	СтруктураВызова = Новый Структура;
	СтруктураВызова.Вставить("ТипМетода", "Функция");
	СтруктураВызова.Вставить("ИмяМетода", "ПолучитьДанныеДляИнициализации");
	СтруктураВызова.Вставить("ПараметрыМетода", Новый Структура("ID_Узла,ЗаполнятьДанные", ID_Узла, ЗаполнятьДанные));
	
	Возврат Транзит_ВызватьГлобальныйМетодНаКлиенте(СтруктураВызова);	
	
КонецФункции

Процедура ЛокЯдро_УстановитьДанныеТекущегоУзла(ID_Узла = "") Экспорт
	
	ДанныеУзла = ЛокЯдро_ПолучитьИзКэшаЗначениеТабличнойНастройкиSMARTS("Узлы", Новый Структура("ID_Узла", ID_Узла), "");
	Если ТипЗнч(ДанныеУзла) = Тип("ТаблицаЗначений") И ДанныеУзла.Количество() > 0 Тогда
		ДанныеТекущегоУзла.Вставить("ID_Узла",      ДанныеУзла[0].ID_Узла);
		ДанныеТекущегоУзла.Вставить("Наименование", ДанныеУзла[0].Наименование);
		ДанныеТекущегоУзла.Вставить("ID_БазыMS",    ДанныеУзла[0].ЧастнаяБазаMS);
	Иначе
		ДанныеТекущегоУзла.Вставить("ID_Узла",      "");
		ДанныеТекущегоУзла.Вставить("Наименование", "");
		ДанныеТекущегоУзла.Вставить("ID_БазыMS",    "");
	КонецЕсли;
	
	// закачиваем в кэш узловые настройки
	СтруктураНастроек = Новый Структура;
	Для Каждого ИмяНастройки Из КатегорииНастроекMS.УзловыеНастройки Цикл
		СтруктураНастроек.Вставить(ИмяНастройки, Ложь);
	КонецЦикла;
	СтруктураНастроек = ЛокЯдро_ПолучитьНастройкиНаСервереSMARTS(СтруктураНастроек, ID_Узла);
	
	ЛокЯдро_ЗаписатьВКэшНастройкиSMARTS(СтруктураНастроек);
	
КонецПроцедуры

Функция ЛокЯдро_ПодключитьИнтеграционнуюОбработку() Экспорт
	СтруктураВызова = Новый Структура;
	СтруктураВызова.Вставить("ТипМетода", "Функция");
	СтруктураВызова.Вставить("ИмяМетода", "ПодключитьИнтеграционнуюОбработку");	
	
	Возврат Транзит_ВызватьГлобальныйМетодНаКлиенте(СтруктураВызова);		
КонецФункции

#КонецОбласти

#Область ЛокальныйКонтекст_Настройки_ЧтениеНастроек

Функция ЛокЯдро_ПолучитьСписокБазНаСервереSMARTS(РежимПоиска = "") Экспорт
	
	Если РежимПоиска = "" Тогда
		РежимПоиска = РасположениеКомпоненты;
	КонецЕсли;
	
	Если РежимПоиска = "НаСервере" Тогда
		СтруктураВызова = Новый Структура;
		СтруктураВызова.Вставить("ТипМетода", "Функция");
		СтруктураВызова.Вставить("ИмяМетода", "ПолучитьСписокБазНаСервереSMARTS");
		СписокБаз = Транзит_ВызватьГлобальныйМетодНаКлиенте(СтруктураВызова);	
	Иначе
		СписокБаз = КомЯдро_ПолучитьСписокБазНаСервереSMARTS();	
	КонецЕсли;
	
	Возврат СписокБаз;
	
КонецФункции

Функция ЛокЯдро_ПолучитьИзКэшаНастройкуSMARTS(КлючНастройки) Экспорт
	
	ЗначениеНастройки = Ложь;
	
	Если ТипЗнч(ЭтаФорма.ТекущиеНастройкиMS) <> Тип("Структура") Тогда
		ЛокЯдро_Инициализация();
	КонецЕсли;
	
	НайденноеЗначение = Неопределено;
	Если ТекущиеНастройкиMS.Свойство(КлючНастройки, НайденноеЗначение) Тогда
		ЗначениеНастройки = НайденноеЗначение;
	КонецЕсли;
	
	Возврат ЗначениеНастройки;
	
КонецФункции

Функция ЛокЯдро_ПолучитьИзКэшаЗначениеТабличнойНастройкиSMARTS(КлючТаблицы, Отбор, ИмяКолонки = "") Экспорт
	
	Результат = Неопределено;
	
	ТаблицаНастроек = ЛокЯдро_ПолучитьИзКэшаНастройкуSMARTS(КлючТаблицы);
	
	Если ТипЗнч(ТаблицаНастроек) = Тип("ТаблицаЗначений") Тогда
		РезультатОтбора = ТаблицаНастроек.Скопировать(Отбор);
		Если РезультатОтбора.Количество() > 0 Тогда
			Если ЗначениеЗаполнено(ИмяКолонки) Тогда
				Результат = ?(РезультатОтбора.Количество() = 1, РезультатОтбора[0][ИмяКолонки], "");
			Иначе
				Результат = РезультатОтбора;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;	
	
	Возврат Результат;
	
КонецФункции

Функция ЛокЯдро_ПолучитьНастройкиНаСервереSMARTS(СтруктураНастроек, ID_Узла = "") Экспорт
	
	Если РасположениеКомпоненты = "НаСервере" Тогда
		СтруктураВызова = Новый Структура;
		СтруктураВызова.Вставить("ТипМетода", "Функция");
		СтруктураВызова.Вставить("ИмяМетода", "ПолучитьНастройкиНаСервереSMARTS");
		СтруктураВызова.Вставить("ПараметрыМетода", Новый Структура);
		СтруктураВызова.ПараметрыМетода.Вставить("СтруктураНастроек", СтруктураНастроек);
		СтруктураВызова.ПараметрыМетода.Вставить("УзловыеНастройки", КатегорииНастроекMS.УзловыеНастройки);
		СтруктураВызова.ПараметрыМетода.Вставить("ID_Узла", ID_Узла);
		СтруктураНастроек = Транзит_ВызватьГлобальныйМетодНаКлиенте(СтруктураВызова);
	Иначе
		СтруктураНастроек = КомЯдро_ЗаполнитьНастройкиSMARTS(СтруктураНастроек, КатегорииНастроекMS.УзловыеНастройки, ID_Узла);
		СтруктураНастроек = ЛокЯдро_КонвертироватьСериализуемыеНастройки(СтруктураНастроек, "ИзСтроки", КатегорииНастроекMS.СериализуемыеНастройки);
	КонецЕсли;

	Возврат СтруктураНастроек;
	
КонецФункции

Функция ЛокЯдро_ПолучитьНастройкуНаСервереSMARTS(КлючНастройки, ID_Узла = "") Экспорт
	
	СтруктураНастроек = Новый Структура(КлючНастройки, Ложь);
	СтруктураНастроек = ЛокЯдро_ПолучитьНастройкиНаСервереSMARTS(СтруктураНастроек, ID_Узла);
	
	Возврат СтруктураНастроек[КлючНастройки];
	
КонецФункции

Функция ЛокЯдро_ПолучитьЗначениеТабличнойНастройкиНаСервереSMARTS(КлючТаблицы, Отбор, ID_Узла = "", ИмяКолонки = "") Экспорт
	
	Результат = Неопределено;
	
	ТаблицаНастроек = ЛокЯдро_ПолучитьНастройкуНаСервереSMARTS(КлючТаблицы, ID_Узла);
	
	Если НЕ ТаблицаНастроек = Ложь Тогда
		РезультатОтбора = ТаблицаНастроек.Скопировать(Отбор);
		Если РезультатОтбора.Количество() > 0 Тогда
			Если ЗначениеЗаполнено(ИмяКолонки) Тогда
				Результат = ?(РезультатОтбора.Количество() = 1, РезультатОтбора[0][ИмяКолонки], "");
			Иначе
				Результат = РезультатОтбора;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;	
	
	Возврат Результат;
	
КонецФункции

Функция ЛокЯдро_ПолучитьДанныеИзХранилища1С(КлючДляПолучения) Экспорт
	
	СтруктураВызова = Новый Структура;
	СтруктураВызова.Вставить("ТипМетода", "Функция");
	СтруктураВызова.Вставить("ИмяМетода", "ПолучитьДанныеИзХранилища1С");
	СтруктураВызова.Вставить("ПараметрыМетода", Новый Структура);
	СтруктураВызова.ПараметрыМетода.Вставить("КлючДляПолучения", КлючДляПолучения);
	
	Данные1С = Транзит_ВызватьГлобальныйМетодНаКлиенте(СтруктураВызова);
	
	Возврат Данные1С; 	

КонецФункции

Функция ЛокЯдро_ПолучитьЗначенияГлобальныхПараметров(ID_Узла = "") Экспорт
	
	ОбщиеПараметры = ЛокЯдро_ПолучитьИзКэшаНастройкуSMARTS("ГлобальныеПараметры");
	Если ID_Узла = ДанныеТекущегоУзла.ID_Узла Тогда
		ЧастныеПараметры = ЛокЯдро_ПолучитьИзКэшаНастройкуSMARTS("ЗначенияПараметровУзлов");
	Иначе
		ЧастныеПараметры = ЛокЯдро_ПолучитьНастройкуНаСервереSMARTS("ЗначенияПараметровУзлов", ID_Узла);
	КонецЕсли;
	
	СтруктураВызова = Новый Структура;
	СтруктураВызова.Вставить("ТипМетода", "Функция");
	СтруктураВызова.Вставить("ИмяМетода", "ПолучитьЗначенияГлобальныхПараметров");
	ПараметрыМетода = Новый Структура;
	ПараметрыМетода.Вставить("ОбщиеПараметры", ОбщиеПараметры);
	ПараметрыМетода.Вставить("ЧастныеПараметры", ЧастныеПараметры);
	СтруктураВызова.Вставить("ПараметрыМетода", ПараметрыМетода);
	
	ТаблицаПараметров = Транзит_ВызватьГлобальныйМетодНаКлиенте(СтруктураВызова);	
	
	Возврат ТаблицаПараметров;
		
КонецФункции

Функция ЛокЯдро_ПолучитьНастройкиПоУмолчаниюНаСервереSMARTS(СтруктураНастроек, ID_Узла = "") Экспорт
	
	Если РасположениеКомпоненты = "НаСервере" Тогда
		СтруктураВызова = Новый Структура;
		СтруктураВызова.Вставить("ТипМетода", "Функция");
		СтруктураВызова.Вставить("ИмяМетода", "ПолучитьНастройкиПоУмолчаниюНаСервереSMARTS");
		СтруктураВызова.Вставить("ПараметрыМетода", Новый Структура);
		СтруктураВызова.ПараметрыМетода.Вставить("СтруктураНастроек", СтруктураНастроек);
		СтруктураВызова.ПараметрыМетода.Вставить("УзловыеНастройки", КатегорииНастроекMS.УзловыеНастройки);
		СтруктураВызова.ПараметрыМетода.Вставить("ID_Узла", ID_Узла);
		СтруктураНастроек = Транзит_ВызватьГлобальныйМетодНаКлиенте(СтруктураВызова);
	Иначе
		ЛокЯдро_УдалитьНастройкиВБазеSMARTS(СтруктураНастроек, ID_Узла);
		СтруктураНастроек = ЛокЯдро_ПолучитьНастройкиНаСервереSMARTS(СтруктураНастроек);
	КонецЕсли;
	
	Возврат СтруктураНастроек;
	
КонецФункции	

Функция ЛокЯдро_ПолучитьНастройкуПоУмолчаниюНаСервереSMARTS(КлючНастройки, ID_Узла = "") Экспорт
	
	СтруктураНастроек = Новый Структура(КлючНастройки);
	СтруктураНастроек = ЛокЯдро_ПолучитьНастройкиПоУмолчаниюНаСервереSMARTS(СтруктураНастроек, ID_Узла);	
	
	Возврат СтруктураНастроек[КлючНастройки];
	
КонецФункции	

#КонецОбласти

#Область ЛокальныйКонтекст_Настройки_УстановкаНастроек

Процедура ЛокЯдро_ЗаписатьВКэшНастройкиSMARTS(СтруктураНастроек) Экспорт
	
	Для Каждого Настройка Из СтруктураНастроек Цикл
		ТекущиеНастройкиMS.Вставить(Настройка.Ключ, Настройка.Значение);
	КонецЦикла;
	
КонецПроцедуры

Процедура ЛокЯдро_ЗаписатьВКэшНастройкуSMARTS(КлючНастройки, ЗначениеНастройки) Экспорт
	
	СтруктураНастроек = Новый Структура(КлючНастройки, ЗначениеНастройки);
	ЛокЯдро_ЗаписатьВКэшНастройкиSMARTS(СтруктураНастроек);
	
КонецПроцедуры

Процедура ЛокЯдро_СохранитьНастройкиВБазеSMARTS(Знач СтруктураНастроек, ID_Узла = "") Экспорт
	
	Если РасположениеКомпоненты = "НаСервере" Тогда
		СтруктураВызова = Новый Структура;
		СтруктураВызова.Вставить("ТипМетода", "Процедура");
		СтруктураВызова.Вставить("ИмяМетода", "СохранитьНастройкиВБазеSMARTS");
		СтруктураВызова.Вставить("ПараметрыМетода", Новый Структура("СтруктураНастроек,ID_Узла", СтруктураНастроек, ID_Узла));
		Транзит_ВызватьГлобальныйМетодНаКлиенте(СтруктураВызова);
	Иначе
		СтруктураНастроекДляЗаписи = ЛокЯдро_КонвертироватьСериализуемыеНастройки(СтруктураНастроек, "ВСтроку");
		КомЯдро_ЗаписатьНастройкиSMARTS(СтруктураНастроекДляЗаписи, КатегорииНастроекMS.УзловыеНастройки, ID_Узла);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЛокЯдро_СохранитьНастройкуВБазеSMARTS(КлючНастройки, ЗначениеНастройки, ID_Узла = "") Экспорт
	
	СтруктураНастроек = Новый Структура(КлючНастройки, ЗначениеНастройки);
	ЛокЯдро_СохранитьНастройкиВБазеSMARTS(СтруктураНастроек, ID_Узла);
	
КонецПроцедуры

Процедура ЛокЯдро_СохранитьСтрокуВТабличнойНастройкеMS(КлючНастройки, Отбор, СтруктураНастройки, ID_Узла = "") Экспорт
	
	ЭтоТекущийУзел = (ID_Узла = ДанныеТекущегоУзла.ID_Узла) ИЛИ (КатегорииНастроекMS.УзловыеНастройки.Найти(КлючНастройки) = Неопределено);
	Если ЭтоТекущийУзел Тогда
		ТаблицаНастроек = ЛокЯдро_ПолучитьИзКэшаНастройкуSMARTS(КлючНастройки);
	Иначе
		ТаблицаНастроек = ЛокЯдро_ПолучитьНастройкуНаСервереSMARTS(КлючНастройки, ID_Узла);
	КонецЕсли;
	
	Если ТипЗнч(ТаблицаНастроек) <> Тип("ТаблицаЗначений") Тогда
		ТаблицаНастроек = ЛокЯдро_ПолучитьПустуюТаблицуНастроек(КлючНастройки);
		ЛокЯдро_ЗаполнитьСтрокуНастроек(ТаблицаНастроек.Добавить(), СтруктураНастройки);
	Иначе
		СтрокиДляЗаполнения = ТаблицаНастроек.НайтиСтроки(Отбор);
		Если СтрокиДляЗаполнения.Количество() = 0 Тогда
			ЛокЯдро_ЗаполнитьСтрокуНастроек(ТаблицаНастроек.Добавить(), СтруктураНастройки);
		Иначе
			Для Каждого СтрокаНастройки Из СтрокиДляЗаполнения Цикл
				ЛокЯдро_ЗаполнитьСтрокуНастроек(СтрокаНастройки, СтруктураНастройки);
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	ЛокЯдро_СохранитьНастройкуВБазеSMARTS(КлючНастройки, ТаблицаНастроек, ID_Узла);
	Если ЭтоТекущийУзел Тогда
		ЛокЯдро_ЗаписатьВКэшНастройкуSMARTS(КлючНастройки, ТаблицаНастроек);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЛокЯдро_СохранитьДанныеВХранилище1С(КлючДляСохранения, ДанныеДляСохранения) Экспорт
	
	СтруктураВызова = Новый Структура;
	СтруктураВызова.Вставить("ТипМетода", "Процедура");
	СтруктураВызова.Вставить("ИмяМетода", "СохранитьДанныеВХранилище1С");
	СтруктураВызова.Вставить("ПараметрыМетода", Новый Структура("КлючДляСохранения,ДанныеДляСохранения", КлючДляСохранения, ДанныеДляСохранения));
	
	Транзит_ВызватьГлобальныйМетодНаКлиенте(СтруктураВызова);	

КонецПроцедуры

Процедура ЛокЯдро_СохранитьШаблоныВесовогоТовараВБазеSMARTS() Экспорт
	
	ТаблицаШаблонов = Новый ТаблицаЗначений;
	ТаблицаШаблонов.Колонки.Добавить("Префикс");
	ТаблицаШаблонов.Колонки.Добавить("ЦелаяЧасть");
	ТаблицаШаблонов.Колонки.Добавить("ДробнаяЧасть");
	ТаблицаШаблонов.Колонки.Добавить("ДлинаКодаВесовогоТовара");
	ТаблицаШаблонов.Колонки.Добавить("ПрефиксВключенВКод");
	
	ИспользоватьШаблоны = ЛокЯдро_ПолучитьИзКэшаНастройкуSMARTS("ИспользоватьШаблоныВесовогоТовара");
	Если ИспользоватьШаблоны Тогда
		СтрокаПрефиксов = ЛокЯдро_ПолучитьИзКэшаНастройкуSMARTS("ПрефиксКодаВесовогоТовара");
		СтрокаПрефиксов = ?(СокрЛП(СтрокаПрефиксов) = "", "21", СтрокаПрефиксов);
		ДлинаКодаВесовогоТовара = ЛокЯдро_ПолучитьИзКэшаНастройкуSMARTS("ДлинаКодаВесовогоТовара");
		ОбщаяДлина = 12;
		ДробнаяЧасть = ЛокЯдро_ПолучитьИзКэшаНастройкуSMARTS("ЧислоЗнаковПослеЗапятойВесТовара");
		ДробнаяЧасть = ?(ДробнаяЧасть = Ложь ИЛИ ДробнаяЧасть = 0, 3, ДробнаяЧасть);
		ЦелаяЧасть = ОбщаяДлина - (ДробнаяЧасть + ДлинаКодаВесовогоТовара);
		ПрефиксВключенВКод = ЛокЯдро_ПолучитьИзКэшаНастройкуSMARTS("ПрефиксВключенВКодВесовогоТовара");
		ПрефиксВключенВКод = ?(ПрефиксВключенВКод = Истина, Истина, Ложь); // если вернется неопределено или "", то ложь.  
		
		МассивПрефиксов = Новый Массив;
		Пока Истина Цикл
			ПозицияРазделителя = Найти(СтрокаПрефиксов, ",");
			Если ПозицияРазделителя = 0 Тогда
				Если (СокрЛП(СтрокаПрефиксов) <> "") Тогда
					МассивПрефиксов.Добавить(СтрокаПрефиксов);
				КонецЕсли;
				Прервать;
			КонецЕсли;
			МассивПрефиксов.Добавить(СокрЛП(Лев(СтрокаПрефиксов,ПозицияРазделителя - 1)));
			СтрокаПрефиксов = Сред(СтрокаПрефиксов, ПозицияРазделителя + 1);
		КонецЦикла;
		
		Для Каждого Префикс Из МассивПрефиксов Цикл
			НовыйШаблон = ТаблицаШаблонов.Добавить();
			НовыйШаблон.Префикс      = Префикс;
			НовыйШаблон.ЦелаяЧасть   = Строка(ЦелаяЧасть);
			НовыйШаблон.ДробнаяЧасть = Строка(ДробнаяЧасть);
			НовыйШаблон.ДлинаКодаВесовогоТовара = Строка(ДлинаКодаВесовогоТовара);
			НовыйШаблон.ПрефиксВключенВКод = ПрефиксВключенВКод;
		КонецЦикла;
	КонецЕсли;
	
	Если РасположениеКомпоненты = "НаСервере" Тогда
		СтруктураВызова = Новый Структура;
		СтруктураВызова.Вставить("ТипМетода", "Процедура");
		СтруктураВызова.Вставить("ИмяМетода", "СохранитьШаблоныВесовогоТовараВБазеSMARTS");
		СтруктураВызова.Вставить("ПараметрыМетода", Новый Структура("ТаблицаШаблонов", ТаблицаШаблонов));
		Транзит_ВызватьГлобальныйМетодНаКлиенте(СтруктураВызова);	
	Иначе
		КомЯдро_ОбновитьШаблоныВесовогоТовараMS(ТаблицаШаблонов);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЛокЯдро_УдалитьНастройкуВБазеSMARTS(КлючНастройки, ID_Узла = "") Экспорт
	
	СтруктураНастроек = Новый Структура(КлючНастройки);
	ЛокЯдро_УдалитьНастройкиВБазеSMARTS(СтруктураНастроек, ID_Узла);
	
КонецПроцедуры	

Процедура ЛокЯдро_УдалитьНастройкиВБазеSMARTS(Знач СтруктураНастроек, ID_Узла = "") Экспорт
	
	Если РасположениеКомпоненты = "НаСервере" Тогда
		СтруктураВызова = Новый Структура;
		СтруктураВызова.Вставить("ТипМетода", "Процедура");
		СтруктураВызова.Вставить("ИмяМетода", "УдалитьНастройкиВБазеSMARTS");				
		СтруктураВызова.Вставить("ПараметрыМетода", Новый Структура);
		СтруктураВызова.ПараметрыМетода.Вставить("СтруктураНастроек", СтруктураНастроек);
		СтруктураВызова.ПараметрыМетода.Вставить("УзловыеНастройки", КатегорииНастроекMS.УзловыеНастройки);
		СтруктураВызова.ПараметрыМетода.Вставить("ID_Узла", ID_Узла);				
		Транзит_ВызватьГлобальныйМетодНаКлиенте(СтруктураВызова);
	Иначе		
		КомЯдро_УдалитьНастройкиSMARTS(СтруктураНастроек, КатегорииНастроекMS.УзловыеНастройки, ID_Узла);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ЛокальныйКонтекст_Настройки_ВспомогательныеМеханизмы

Функция ЛокЯдро_КонвертироватьСериализуемыеНастройки(СтруктураНастроек, Направление, СериализуемыеНастройки = Неопределено) Экспорт
	
	Если СериализуемыеНастройки = Неопределено Тогда
		СериализуемыеНастройки = КатегорииНастроекMS.СериализуемыеНастройки;
	КонецЕсли;
	
	Для Каждого Настройка Из СтруктураНастроек Цикл
		Если НЕ Настройка.Значение = Ложь И СериализуемыеНастройки.Найти(Настройка.Ключ) <> Неопределено Тогда
			ЗначениеНастройки = Настройка.Значение;
			Если Направление = "ИзСтроки" Тогда
				ЗначениеНастройки = ЗначениеИзСтрокиВнутр(ЗначениеНастройки);
			ИначеЕсли Направление = "ВСтроку" Тогда	
				ЗначениеНастройки = ЗначениеВСтрокуВнутр(ЗначениеНастройки);
			КонецЕсли;
			СтруктураНастроек.Вставить(Настройка.Ключ, ЗначениеНастройки);
		КонецЕсли;
	КонецЦикла;
	
	Возврат СтруктураНастроек;
	
КонецФункции

Функция ЛокЯдро_ПолучитьПустуюТаблицуНастроек(КлючНастройки)
	
	ТаблицаНастроек = Новый ТаблицаЗначений;
	Для Каждого СтрокаШаблона Из СтруктураМетаданных.НастройкиMS[КлючНастройки] Цикл
		ТаблицаНастроек.Колонки.Добавить(СтрокаШаблона.Ключ, СтрокаШаблона.Значение);
	КонецЦикла;
	
	Возврат ТаблицаНастроек;
	
КонецФункции

Процедура ЛокЯдро_ЗаполнитьСтрокуНастроек(СтрокаНастройки, СтруктураНастройки)
	
	КоллекцияКолонок = СтрокаНастройки.Владелец().Колонки;
	Для Каждого Настройка Из СтруктураНастройки Цикл
		Если КоллекцияКолонок.Найти(Настройка.Ключ) <> Неопределено Тогда
			СтрокаНастройки[Настройка.Ключ] = Настройка.Значение;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Функция ЛокЯдро_ПолучитьИмяТабличнойЧастиДокумента(ИмяДокумента) Экспорт
	
	ИмяТабличнойЧасти = Неопределено;
	МетаданныеТабличныеЧастиДокумента = СтруктураМетаданных.Документы1С[ИмяДокумента].ТабличныеЧасти;
	
	Если МетаданныеТабличныеЧастиДокумента.Свойство("Товары") Тогда // Сначала попробуем найти самое используемое название в конфигурациях
		ИмяТабличнойЧасти = "Товары";
		
	ИначеЕсли МетаданныеТабличныеЧастиДокумента.Свойство("Состав") Тогда // Используется в Асторе
		ИмяТабличнойЧасти = "Состав";
		
	ИначеЕсли МетаданныеТабличныеЧастиДокумента.Количество() > 0 Тогда // Если среди популярных названий не нашлось, проверим, есть ли вообще ТЧ у документа и вернем первую попавшуюся
		Для Каждого КлючИЗначение Из МетаданныеТабличныеЧастиДокумента Цикл
			ИмяТабличнойЧасти = КлючИЗначение.Ключ;
			Прервать;
		КонецЦикла
	КонецЕсли;
	
	Возврат ИмяТабличнойЧасти;
	
КонецФункции

Функция ЛокЯдро_ПолучитьСписокРеквизитовВПредставленииДокумента(ИмяДокумента1С = Неопределено) Экспорт
	
	// Список реквизитов по умолчанию для всех конфигураций 	
	СписокРекв = Новый СписокЗначений;
	Если ИмяДокумента1С = Неопределено Тогда // Временное решение. Если не указано имя документа, то значит запрос пришел от формы обмена 
		СписокРекв.Добавить("Ссылка", "Название");
		СписокРекв.Добавить("Количество", "Количество строк");
		СписокРекв.Добавить("БизнесПроцесс","Бизнес процесс");
	Иначе
		СписокРекв.Добавить("Ссылка", "Ссылка");
		СписокРекв.Добавить("Количество", "Количество");
		//СписокРекв.Добавить("БизнесПроцесс","БизнесПроцесс");

	КонецЕсли;
	
	СписокРекв.Добавить("Дата", "Дата");
	СписокРекв.Добавить("Номер", "Номер");
	
	
	// дополнительные реквизиты, настроенные для подключенной конфигурации
	СтруктураВызова = Новый Структура;
	СтруктураВызова.Вставить("ТипМетода", "Функция");
	СтруктураВызова.Вставить("ИмяМетода", "ПолучитьДопРеквизитыПредставленияДокумента");
	ПараметрыМетода = Новый Структура;
	ПараметрыМетода.Вставить("ИмяДокумента1С", ИмяДокумента1С);
	СтруктураВызова.Вставить("ПараметрыМетода", ПараметрыМетода);
	
	СписокДопРеквизитов = Транзит_ВызватьГлобальныйМетодНаКлиенте(СтруктураВызова);
	Если СписокДопРеквизитов <> Неопределено Тогда
		Для Каждого ДопРеквизит из СписокДопРеквизитов Цикл
			СписокРекв.Добавить(ДопРеквизит.Значение, ДопРеквизит.Представление);
		КонецЦикла;
	КонецЕсли;
	
	Возврат СписокРекв;
	
КонецФункции

#КонецОбласти

#Область ЛокальныйКонтекст_Настройки_ЗаписьИЧтениеИзФалов

Процедура ЛокЯдро_СохранитьНастройкиВФайл(СтруктураНастройки, ИмяРаздела) Экспорт
	
	СтруктураНастройки.Вставить("_ИмяРазделаНастройки_", ИмяРаздела);
	
	ДиалогВыбораФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Сохранение);
	ДиалогВыбораФайла.ПолноеИмяФайла = "";
	ДиалогВыбораФайла.Фильтр 		 = "(*.xml)|*.xml";
	ДиалогВыбораФайла.Заголовок 	 = "Сохранить в файл";
	
	Если Не ДиалогВыбораФайла.Выбрать() Тогда
		Возврат;	
	КонецЕсли; 
	
	ПутьКФайлу = ДиалогВыбораФайла.ПолноеИмяФайла;		
	
	ОбъектXDTO = СериализаторXDTO.ЗаписатьXDTO(СтруктураНастройки);
	ЗаписьXML = Новый ЗаписьXML; 
	ЗаписьXML.ОткрытьФайл(ПутьКФайлу); 
	ФабрикаXDTO.ЗаписатьXML(ЗаписьXML, ОбъектXDTO);
	
	ЗаписьXML.Закрыть();	
	
КонецПроцедуры

Функция ЛокЯдро_ПолучитьНастройкиИзФайла(ИмяРаздела) Экспорт
	
	ДиалогВыбораФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	ДиалогВыбораФайла.ПолноеИмяФайла = "";
	ДиалогВыбораФайла.Фильтр 		 = "(*.xml)|*.xml";
	ДиалогВыбораФайла.Заголовок 	 = "Выберите файл настроек";
	
	Если Не ДиалогВыбораФайла.Выбрать() Тогда
		Возврат Неопределено;	
	КонецЕсли; 
		
	ПутьКФайлу 	  = ДиалогВыбораФайла.ПолноеИмяФайла;
	
	ЧтениеXML = Новый ЧтениеXML; 
	ЧтениеXML.ОткрытьФайл(ПутьКФайлу);
	ТипОбъектаXDTO = ФабрикаXDTO.Тип("http://v8.1c.ru/8.1/data/core", "Structure");
	ОбъектXDTO = ФабрикаXDTO.ПрочитатьXML(ЧтениеXML,ТипОбъектаXDTO); 
	ОбъектXDTO.Проверить();
	ЧтениеXML.Закрыть();
	
	СтруктураНастройки = СериализаторXDTO.ПрочитатьXDTO(ОбъектXDTO);	
	
	Если СтруктураНастройки.Свойство("_ИмяРазделаНастройки_") И СтруктураНастройки._ИмяРазделаНастройки_ = ИмяРаздела Тогда
		СтруктураНастройки.Удалить("_ИмяРазделаНастройки_");
	Иначе
		СтруктураНастройки = Неопределено;
	КонецЕсли;
	
	Возврат СтруктураНастройки;
	
КонецФункции

Функция ЛокЯдро_ПредложитьПользователюСохранитьНастройкиВФайл() Экспорт
	
	Ответ = Ложь;
	Если Вопрос("В данный момент сервер Mobile SMARTS недоступен для сохранения настроек. 
				|Сохранить настройки в файл?",РежимДиалогаВопрос.ДаНет,,КодВозвратаДиалога.Да,"Ошибка соединения") = КодВозвратаДиалога.Да Тогда
		Ответ = Истина;
	КонецЕсли;
	
	Возврат Ответ;
	
КонецФункции

#КонецОбласти

#Область ЛокальныйКонтекст_Настройки_ПрочиеМетоды

Функция ЛокЯдро_ПолучитьНастройкуБизнесПроцесса(НастройкиОбмена, ID_БизнесПроцесса, ИмяТипаДокумента, ДанныеДокументаMS) Экспорт
	
	Если НЕ ЗначениеЗаполнено(ID_БизнесПроцесса) И ЗначениеЗаполнено(ДанныеДокументаMS) Тогда
		Если ДанныеДокументаMS.ШапкаДокумента.Свойство("НастройкаБизнесПроцесса") Тогда
			ID_БизнесПроцесса = ДанныеДокументаMS.ШапкаДокумента.НастройкаБизнесПроцесса;
		КонецЕсли;
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(ИмяТипаДокумента) И ЗначениеЗаполнено(ДанныеДокументаMS) Тогда
		ИмяТипаДокумента = ДанныеДокументаMS.ШапкаДокумента.ИмяТипаДокумента;
	КонецЕсли;
	
	СтруктураВызова = Новый Структура;
	СтруктураВызова.Вставить("ТипМетода", "Функция");
	СтруктураВызова.Вставить("ИмяМетода", "ПолучитьНастройкуБизнесПроцесса");
	ПараметрыМетода = Новый Структура;
	ПараметрыМетода.Вставить("ID_БизнесПроцесса", ID_БизнесПроцесса);
	ПараметрыМетода.Вставить("ТипДокументаMS", ИмяТипаДокумента);
	ПараметрыМетода.Вставить("НастройкиОбмена", НастройкиОбмена);
	СтруктураВызова.Вставить("ПараметрыМетода", ПараметрыМетода);
	
	Возврат Транзит_ВызватьГлобальныйМетодНаКлиенте(СтруктураВызова);
	
КонецФункции

Функция ЛокЯдро_ПолучитьИнформациюОВнешнейОбработке(КлючИнформации) Экспорт
	
	СтруктураВызова = Новый Структура;
	СтруктураВызова.Вставить("ТипМетода", "Функция");
	СтруктураВызова.Вставить("ИмяМетода", "ПолучитьИнформациюОВнешнейОбработке");
	СтруктураВызова.Вставить("ПараметрыМетода", Новый Структура("КлючИнформации", КлючИнформации));
	
	Возврат Транзит_ВызватьГлобальныйМетодНаКлиенте(СтруктураВызова);
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область ЛокальныйКонтекст_СправочникиИТаблицы

Процедура ЛокЯдро_ВыгрузитьПодготовленнуюТаблицуНаСерверSMARTS(ИмяТаблицы, ТаблицаДляВыгрузки, ID_БазыSMARTS) Экспорт
	
	СтруктураВызова = Новый Структура;
	СтруктураВызова.Вставить("ТипМетода", "Функция");
	
	ПереписыватьНоменклатуруПриВыгрузке = ЛокЯдро_ПолучитьИзКэшаНастройкуSMARTS("ПереписыватьНоменклатуруПриВыгрузке");
	
	Если РасположениеКомпоненты = "НаСервере" Тогда
		СтруктураВызова.Вставить("ИмяМетода", "ВыгрузитьПодготовленнуюТаблицуНаСерверSMARTS");
		СтруктураВызова.Вставить("ПараметрыМетода", Новый Структура("ИмяТаблицы", ИмяТаблицы));
		СтруктураВызова.ПараметрыМетода.Вставить("ТаблицаДляВыгрузки", ТаблицаДляВыгрузки);
		СтруктураВызова.ПараметрыМетода.Вставить("ID_БазыSMARTS", ID_БазыSMARTS);
		СтруктураВызова.ПараметрыМетода.Вставить("ПереписыватьНоменклатуруПриВыгрузке", ПереписыватьНоменклатуруПриВыгрузке);		
		РезультатВыгрузки = Транзит_ВызватьГлобальныйМетодНаКлиенте(СтруктураВызова);
	Иначе
		Если ИмяТаблицы = "Номенклатура" Тогда
			СтруктураВызова.Вставить("ИмяМетода", "СформироватьМассивыДляВыгрузкиНоменклатуры");
			СтруктураВызова.Вставить("ПараметрыМетода", Новый Структура("ТаблицаДляВыгрузки", ТаблицаДляВыгрузки));
		Иначе
			СтруктураВызова.Вставить("ИмяМетода", "СформироватьМассивыДляВыгрузкиТаблиц");
			СтруктураВызова.Вставить("ПараметрыМетода", Новый Структура("ИмяТаблицы,ТаблицаДляВыгрузки", ИмяТаблицы, ТаблицаДляВыгрузки));
		КонецЕсли;
				
		ДанныеДляВыгрузки = Транзит_ВызватьГлобальныйМетодНаКлиенте(СтруктураВызова);
		РезультатВыгрузки = КомЯдро_ВыгрузитьТаблицуНаСерверSMARTS(ИмяТаблицы, ДанныеДляВыгрузки, ID_БазыSMARTS, ПереписыватьНоменклатуруПриВыгрузке);
		
	КонецЕсли;
	
	Сообщить(РезультатВыгрузки.Сообщение);
	
КонецПроцедуры

Процедура ЛокЯдро_ВыгрузитьТаблицыНаСерверSMARTS() Экспорт
	
	МетаданныеНСИ = ЛокЯдро_ПолучитьМетаданныеНСИ();
	
	Если ЛокЯдро_ПолучитьИзКэшаНастройкуSMARTS("ВыгружатьНоменклатуруСразу") Тогда
		РазмерПорцииНоменклатуры = ЛокЯдро_ПолучитьИзКэшаНастройкуSMARTS("РазмерПорцииНоменклатуры");
		Если РазмерПорцииНоменклатуры <> Ложь И ЗначениеЗаполнено(РазмерПорцииНоменклатуры) Тогда
			ЛокЯдро_ВыгрузитьТаблицуНаСерверSMARTSПорциями("Номенклатура");
		Иначе
			ЛокЯдро_ВыгрузитьТаблицуНаСерверSMARTS("Номенклатура");	
		КонецЕсли;	
	КонецЕсли;
	Если ЛокЯдро_ПолучитьИзКэшаНастройкуSMARTS("ВыгружатьКонтрагентовСразу") Тогда
		ЛокЯдро_ВыгрузитьТаблицуНаСерверSMARTS("Контрагенты");
	КонецЕсли;
	Если ЛокЯдро_ПолучитьИзКэшаНастройкуSMARTS("ВыгружатьХарактеристикиСразу") И МетаданныеНСИ.Характеристики.Использование Тогда
		ЛокЯдро_ВыгрузитьТаблицуНаСерверSMARTS("Характеристики");
	КонецЕсли;
	Если ЛокЯдро_ПолучитьИзКэшаНастройкуSMARTS("ВыгружатьСерииСразу") И МетаданныеНСИ.Серии.Использование  Тогда
		ЛокЯдро_ВыгрузитьТаблицуНаСерверSMARTS("Серии");
	КонецЕсли;
	Если ЛокЯдро_ПолучитьИзКэшаНастройкуSMARTS("ВыгружатьСкладыСразу") Тогда
		ЛокЯдро_ВыгрузитьТаблицуНаСерверSMARTS("Склады");
	КонецЕсли;
	Если ЛокЯдро_ПолучитьИзКэшаНастройкуSMARTS("ВыгружатьФормыАСразу") И МетаданныеНСИ.АлкоНоменклатура.Использование Тогда
		ЛокЯдро_ВыгрузитьТаблицуНаСерверSMARTS("ФормыА");
	КонецЕсли;
	Если ЛокЯдро_ПолучитьИзКэшаНастройкуSMARTS("ВыгружатьОстаткиСразу") Тогда
		ЛокЯдро_ВыгрузитьТаблицуНаСерверSMARTS("Остатки");
	КонецЕсли;
	Если ЛокЯдро_ПолучитьИзКэшаНастройкуSMARTS("ВыгружатьЦеныСразу") Тогда
		ЛокЯдро_ВыгрузитьТаблицуНаСерверSMARTS("Цены");
	КонецЕсли;
	Если ЛокЯдро_ПолучитьИзКэшаНастройкуSMARTS("ВыгружатьАкцизныеМаркиСразу") Тогда
		ЛокЯдро_ВыгрузитьТаблицуНаСерверSMARTS("БутылкиЕГАИС");
	КонецЕсли;
    Если ЛокЯдро_ПолучитьИзКэшаНастройкуSMARTS("ВыгружатьКоробкиСразу") Тогда
		ЛокЯдро_ВыгрузитьТаблицуНаСерверSMARTS("КоробкиЕГАИС");
	КонецЕсли;
	
КонецПроцедуры

Процедура ЛокЯдро_ВыгрузитьТаблицуНаСерверSMARTS(ИмяТаблицы, НастройкиКомпоновщика = "", ПараметрыКомпоновщика = Ложь, ID_БазыSMARTS = "") Экспорт
	
	Если НастройкиКомпоновщика = "" Тогда
		Отбор = Новый Структура("ИмяТаблицы", ИмяТаблицы);
		НастройкаКомпоновщикаСтрокой = ЛокЯдро_ПолучитьИзКэшаЗначениеТабличнойНастройкиSMARTS("НастройкиОбменаСправочников", Отбор, "НастройкаКомпоновщикаСтрокой");
		Если ЗначениеЗаполнено(НастройкаКомпоновщикаСтрокой) Тогда
			НастройкиКомпоновщика = ЗначениеИзСтрокиВнутр(НастройкаКомпоновщикаСтрокой);
		КонецЕслИ;
	КонецЕсли;
	
	Если ПараметрыКомпоновщика = Ложь Тогда
		ПараметрыКомпоновщика = ЛокЯдро_ПолучитьЗначенияГлобальныхПараметров();
	КонецЕсли;
	
	Если ID_БазыSMARTS = "" Тогда
		ID_БазыSMARTS = ДанныеТекущегоУзла.ID_БазыMS;
	КонецЕсли;
	
	ПереписыватьНоменклатуруПриВыгрузке = ЛокЯдро_ПолучитьИзКэшаНастройкуSMARTS("ПереписыватьНоменклатуруПриВыгрузке");		
	
	СтруктураВызова = Новый Структура;
	СтруктураВызова.Вставить("ТипМетода", "Функция");
	СтруктураВызова.Вставить("ПараметрыМетода", Новый Структура("ИмяТаблицы", ИмяТаблицы));
	СтруктураВызова.ПараметрыМетода.Вставить("НастройкиКомпоновщика", НастройкиКомпоновщика);
	СтруктураВызова.ПараметрыМетода.Вставить("ПараметрыКомпоновщика", ПараметрыКомпоновщика);
	
	Если РасположениеКомпоненты = "НаСервере" Тогда
		СтруктураВызова.Вставить("ИмяМетода", "ВыгрузитьТаблицуНаСерверSMARTS");
		СтруктураВызова.ПараметрыМетода.Вставить("ID_БазыSMARTS", ID_БазыSMARTS);
		СтруктураВызова.ПараметрыМетода.Вставить("ПереписыватьНоменклатуруПриВыгрузке", ПереписыватьНоменклатуруПриВыгрузке);		
		РезультатВыгрузки = Транзит_ВызватьГлобальныйМетодНаКлиенте(СтруктураВызова);
		ПодробноеСообщение = РезультатВыгрузки.Сообщение;
	Иначе
		СтруктураВызова.Вставить("ИмяМетода", "ПолучитьМассивыТаблицыДляВыгрузкиНаСерверSMARTS");		
		
		// *****************************************************************************************************************************
		
		НачалоПолученияДанныхИз1С 		= ТекущаяДата();
		
		ДанныеДляВыгрузки 				= Транзит_ВызватьГлобальныйМетодНаКлиенте(СтруктураВызова);			
		
		ОкончаниеПолученияДанныхИз1С 	= ТекущаяДата();
		ВремяПолученияДанныхИз1С 		= ОкончаниеПолученияДанныхИз1С - НачалоПолученияДанныхИз1С;
		
		// *****************************************************************************************************************************
		
		НачалоВыгрузкиДанныхНаСерверSMARTS 		= ТекущаяДата();
		
		РезультатВыгрузки 						= КомЯдро_ВыгрузитьТаблицуНаСерверSMARTS(ИмяТаблицы, ДанныеДляВыгрузки, ID_БазыSMARTS, ПереписыватьНоменклатуруПриВыгрузке);		
		
		ОкончаниеВыгрузкиДанныхНаСерверSMARTS 	= ТекущаяДата();
		ВремяВыгрузкиДанныхНаСерверSMARTS		= ОкончаниеВыгрузкиДанныхНаСерверSMARTS - НачалоВыгрузкиДанныхНаСерверSMARTS;
		
		ОбщееВремяВыгрузки						= ВремяПолученияДанныхИз1С + ВремяВыгрузкиДанныхНаСерверSMARTS; 
		
		// *****************************************************************************************************************************
		
		ПодробноеСообщение = РезультатВыгрузки.Сообщение;
		
		// Если выгрузка прошла успешно, добавляем в сообщение дополнительную информацию о выгрузке
		Если РезультатВыгрузки.Статус Тогда									
			
			ПредставлениеВремени1С 		= ЛокЯдро_ПредставлениеВремени(ВремяПолученияДанныхИз1С);
			ПредставлениеВремениMS 		= ЛокЯдро_ПредставлениеВремени(ВремяВыгрузкиДанныхНаСерверSMARTS);
			ПредставлениеВремениОбщее 	= ЛокЯдро_ПредставлениеВремени(ОбщееВремяВыгрузки);			
			
			ПодробноеСообщение = ЛокЯдро_СформироватьПодробноеСообщениеОВыгрузкеТаблицы(ПодробноеСообщение, ПредставлениеВремениОбщее, ПредставлениеВремени1С, ПредставлениеВремениMS);
			
		КонецЕсли;	
		
	КонецЕсли;		
	
	Сообщить(ПодробноеСообщение);
	
КонецПроцедуры

// Михайлов 2018-05-10
// Метод выгружает на сервер Mobile SMARTS данные таблицы порциями. Работает только для справочника "Номенклатура"
// Некорректен с точки зрения инкапсуляции - в одном методе смешался функционал получения данных из базы 1С и функционал выгрузки данных в Mobile SMARTS
// Это вынужденная реализация, потому что методы "TerminalConnector.НачатьВыгрузкуТоваров()" и "TerminalConnector.ЗавершитьВыгрузкуТоваров()"
// можно вызывать только по 1 разу во время всего процесса выгрузки справочника номенклатуры
Процедура ЛокЯдро_ВыгрузитьТаблицуНаСерверSMARTSПорциями(ИмяТаблицы, НастройкиКомпоновщика = "", ПараметрыКомпоновщика = Ложь, ID_БазыSMARTS = "") Экспорт
	
	Если НастройкиКомпоновщика = "" Тогда
		Отбор = Новый Структура("ИмяТаблицы", ИмяТаблицы);
		НастройкаКомпоновщикаСтрокой = ЛокЯдро_ПолучитьИзКэшаЗначениеТабличнойНастройкиSMARTS("НастройкиОбменаСправочников", Отбор, "НастройкаКомпоновщикаСтрокой");
		Если ЗначениеЗаполнено(НастройкаКомпоновщикаСтрокой) Тогда
			НастройкиКомпоновщика = ЗначениеИзСтрокиВнутр(НастройкаКомпоновщикаСтрокой);
		КонецЕслИ;
	КонецЕсли;
	
	Если ПараметрыКомпоновщика = Ложь Тогда
		ПараметрыКомпоновщика = ЛокЯдро_ПолучитьЗначенияГлобальныхПараметров();
	КонецЕсли;
	
	Если ID_БазыSMARTS = "" Тогда
		ID_БазыSMARTS = ДанныеТекущегоУзла.ID_БазыMS;
	КонецЕсли;
	
	РазмерПорцииНоменклатуры = ЛокЯдро_ПолучитьИзКэшаНастройкуSMARTS("РазмерПорцииНоменклатуры");
	Если РазмерПорцииНоменклатуры = Ложь ИЛИ НЕ ЗначениеЗаполнено(РазмерПорцииНоменклатуры) Тогда
		РазмерПорцииНоменклатуры = 1000;
	КонецЕсли;
	
	ПереписыватьНоменклатуруПриВыгрузке = ЛокЯдро_ПолучитьИзКэшаНастройкуSMARTS("ПереписыватьНоменклатуруПриВыгрузке");
	
	СтруктураВызова = Новый Структура;
	СтруктураВызова.Вставить("ТипМетода", "Функция");
	СтруктураВызова.Вставить("ПараметрыМетода", Новый Структура("ИмяТаблицы", ИмяТаблицы));
	СтруктураВызова.ПараметрыМетода.Вставить("НастройкиКомпоновщика", НастройкиКомпоновщика);
	СтруктураВызова.ПараметрыМетода.Вставить("ПараметрыКомпоновщика", ПараметрыКомпоновщика);
	СтруктураВызова.ПараметрыМетода.Вставить("ID_БазыSMARTS", ID_БазыSMARTS);	
	
	Если РасположениеКомпоненты = "НаСервере" Тогда
		СтруктураВызова.ПараметрыМетода.Вставить("ПереписыватьНоменклатуруПриВыгрузке", ПереписыватьНоменклатуруПриВыгрузке);
		СтруктураВызова.ПараметрыМетода.Вставить("РазмерПорцииНоменклатуры", 			РазмерПорцииНоменклатуры);
		СтруктураВызова.Вставить("ИмяМетода", "ВыгрузитьТаблицуНаСерверSMARTSПорциями");
		РезультатВыгрузки = Транзит_ВызватьГлобальныйМетодНаКлиенте(СтруктураВызова);
	Иначе									
	
		РезультатВыгрузки = Новый Структура;
		Сообщение = "Начало выгрузки таблицы [" + ИмяТаблицы + "] порциями";
		РезультатВыгрузки.Вставить("Сообщение"	, Сообщение);
		РезультатВыгрузки.Вставить("Статус"		, Истина);	
		Сообщить(Сообщение);
		
		Если НЕ КомЯдро_ПодключитьсяКСерверуSMARTS(ID_БазыSMARTS) Тогда		
			
			Сообщение = "База Mobile SMARTS недоступна!";
			РезультатВыгрузки.Вставить("Статус"		, Ложь);				
			РезультатВыгрузки.Вставить("Сообщение"	, Сообщение);
			Сообщить(Сообщение);
			Возврат;		
			
		КонецЕсли;
		
		МассивСсылокНоменклатуры 			= ЛокЯдро_ПолучитьМассивСсылокНоменклатуры();		
		
		КоличествоСтрок 					= МассивСсылокНоменклатуры.Количество();
		КоличествоПорций 					= (КоличествоСтрок - КоличествоСтрок % РазмерПорцииНоменклатуры) / РазмерПорцииНоменклатуры + ?(КоличествоСтрок % РазмерПорцииНоменклатуры <> 0, 1, 0);							
		
		ВсегоСтрок 							= 0;
		ОтборПоНоменклатуре 				= Новый Массив;
		НачатаВыгрузкаТаблицы 				= Ложь;
		КоличествоРазличныхТоваров 			= 0;
		ВремяПолученияДанныхИз1С			= 0;
		ВремяВыгрузкиДанныхНаСерверSMARTS 	= 0;
		СоответствиеРазличныхТоваров		= Новый Соответствие;
		ИндексИдТовара						= -1;
		
		СтруктураВызова.ПараметрыМетода.Вставить("ОтборПоНоменклатуре", ОтборПоНоменклатуре);
		СтруктураВызова.Вставить("ИмяМетода", "ПолучитьПорциюДанныхДляВыгрузки");
		
		Для НомерПорции = 1 По КоличествоПорций Цикл				
			
			НачалоВыгрузкиПорции 		= ТекущаяДата();
			НачалоПолученияДанныхИз1С 	= ТекущаяДата();
			
			ОтборПоНоменклатуре.Очистить();
			
			Для Сч = 1 По РазмерПорцииНоменклатуры Цикл
				
				ИндексСтроки = (НомерПорции - 1) * РазмерПорцииНоменклатуры + Сч - 1;
				
				Если ИндексСтроки > КоличествоСтрок - 1 Тогда
					Прервать;
				КонецЕсли;	
				
				ОтборПоНоменклатуре.Добавить(МассивСсылокНоменклатуры[ИндексСтроки]);
				
			КонецЦикла;							
			
			ДанныеДляВыгрузки = Транзит_ВызватьГлобальныйМетодНаКлиенте(СтруктураВызова);			
			
			ОкончаниеПолученияДанныхИз1С 	= ТекущаяДата();
			ВремяПолученияДанныхИз1С 		= ВремяПолученияДанныхИз1С + (ОкончаниеПолученияДанныхИз1С - НачалоПолученияДанныхИз1С);			
			
			НачалоВыгрузкиДанныхНаСерверSMARTS = ТекущаяДата();
			
			КоличествоСтрокВПорции = ДанныеДляВыгрузки.МассивыСтрок.Количество();
			// Если данных в порции нет, то и выгружать нечего
			Если КоличествоСтрокВПорции = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			// Для того чтобы искать индекс только один раз, а не на каждой итерации
			Если ИмяТаблицы = "Номенклатура" И ИндексИдТовара = -1 Тогда
				ИндексИдТовара = ЛокЯдро_НайтиИндексИдТовараВМассивеИмен(ДанныеДляВыгрузки.МассивИмен);
			КонецЕсли;	
			
			// Если выгружается первая порция (до этого не было порций с данными), содержащая ненулевое количество строк, то используем флаг из настроек, иначе - дописываем номенклатуру
			ПереписыватьНоменклатуруПриВыгрузке = ?(ВсегоСтрок = 0 И КоличествоСтрокВПорции > 0, ПереписыватьНоменклатуруПриВыгрузке, Ложь);
			
			// При получении из 1С первой непустой порции данных вызываем соответствующий метод для начала выгрузки таблицы
			Если НЕ НачатаВыгрузкаТаблицы Тогда
				
				Если ИмяТаблицы = "Номенклатура" Тогда
					СтруктураПодключенияMS.TerminalConnector.ПерезаписыватьНоменклатуру(ПереписыватьНоменклатуруПриВыгрузке);
					РезультатПопытки = СтруктураПодключенияMS.TerminalConnector.НачатьВыгрузкуТоваров(ДанныеДляВыгрузки.МассивИмен);
				Иначе
					РезультатПопытки = СтруктураПодключенияMS.TerminalConnector.НачатьВыгрузкуТаблицы(ИмяТаблицы, ДанныеДляВыгрузки.МассивИмен, Истина);
				КонецЕсли;
				
				Если НЕ РезультатПопытки Тогда
					
					ОписаниеОшибки = КомЯдро_ПолучитьОшибку();		
					Сообщение = "Таблица [" + ИмяТаблицы + "] не выгружается!" + Символы.ВК + ОписаниеОшибки;
					РезультатВыгрузки.Вставить("Статус"		, Ложь);				
					РезультатВыгрузки.Вставить("Сообщение"	, Сообщение);
					Сообщить(Сообщение);					
					Возврат;
					
				Иначе
					НачатаВыгрузкаТаблицы = РезультатПопытки; 
				КонецЕсли;		
				
			КонецЕсли;
			
			ВсегоСтрок = ВсегоСтрок + КоличествоСтрокВПорции;										
			
			Если РезультатВыгрузки.Статус Тогда
	
				Для Каждого МассивСтрокиВыгрузки из ДанныеДляВыгрузки.МассивыСтрок Цикл
					
					Если ИмяТаблицы = "Номенклатура" Тогда
						РезультатПопытки = СтруктураПодключенияMS.TerminalConnector.ДобавитьВВыгрузкуТоваров(МассивСтрокиВыгрузки);
						// Подсчет количества различных товаров в выгрузке
						Если ИндексИдТовара <> -1 Тогда
							СоответствиеРазличныхТоваров.Вставить(МассивСтрокиВыгрузки[ИндексИдТовара]);
						КонецЕсли;	
					Иначе
						РезультатПопытки = СтруктураПодключенияMS.TerminalConnector.ДобавитьВВыгрузкуТаблицы(МассивСтрокиВыгрузки);
					КонецЕсли;
					
					Если НЕ РезультатПопытки Тогда
						
						ОписаниеОшибки = КомЯдро_ПолучитьОшибку();		
						Сообщение = "Ошибка выгрузки таблицы [" + ИмяТаблицы + "]." + Символы.ВК + ОписаниеОшибки;
						РезультатВыгрузки.Вставить("Статус"		, Ложь);				
						РезультатВыгрузки.Вставить("Сообщение"	, Сообщение);
						Сообщить(Сообщение);																	
						СтруктураПодключенияMS.TerminalConnector.ПрерватьВыгрузкуТаблицы();			
						Прервать;
						
					КонецЕсли;
					
				КонецЦикла;
				
			КонецЕсли;		
			
			ОкончаниеВыгрузкиДанныхНаСерверSMARTS 	= ТекущаяДата();
			ВремяВыгрузкиДанныхНаСерверSMARTS		= ВремяВыгрузкиДанныхНаСерверSMARTS + (ОкончаниеВыгрузкиДанныхНаСерверSMARTS - НачалоВыгрузкиДанныхНаСерверSMARTS);			
			
			ОкончаниеВыгрузкиПорции = ТекущаяДата();
			ВремяВыгрузкиПорции		= ОкончаниеВыгрузкиПорции - НачалоВыгрузкиПорции;			
			
			ПредставлениеВремениВыгрузки = ЛокЯдро_ПредставлениеВремени(ВремяВыгрузкиПорции);
			
			Сообщить("Выгрузка таблицы [" + ИмяТаблицы + "] порциями. Выгружена порция №" + СокрЛП(НомерПорции) + " из " + СокрЛП(КоличествоПорций) + ", содержащая " + СокрЛП(КоличествоСтрокВПорции) + " строк. Всего выгружено " + СокрЛП(ВсегоСтрок) + " строк. Затраченное время: " + ПредставлениеВремениВыгрузки);		
			
		КонецЦикла;			
		
		Если РезультатВыгрузки.Статус Тогда
			
			НачалоЗавершенияВыгрузкиНаСерверSMARTS = ТекущаяДата();
			
			Если ИмяТаблицы = "Номенклатура" Тогда
				РезультатПопытки = СтруктураПодключенияMS.TerminalConnector.ЗавершитьВыгрузкуТоваров();	
			Иначе
				РезультатПопытки = СтруктураПодключенияMS.TerminalConnector.ЗавершитьВыгрузкуТаблицы();	
			КонецЕсли;
			
			ОкончаниеЗавершенияВыгрузкиНаСерверSMARTS 	= ТекущаяДата();
			ВремяЗавершенияВыгрузкиНаСерверSMARTS		= ОкончаниеЗавершенияВыгрузкиНаСерверSMARTS - НачалоЗавершенияВыгрузкиНаСерверSMARTS;
			
			ВремяВыгрузкиДанныхНаСерверSMARTS 			= ВремяВыгрузкиДанныхНаСерверSMARTS + ВремяЗавершенияВыгрузкиНаСерверSMARTS;
			
			Если НЕ РезультатПопытки Тогда
				ОписаниеОшибки = КомЯдро_ПолучитьОшибку();		
				Сообщение = "Не удалось закончить выгрузку таблицы [" + ИмяТаблицы + "]." + Символы.ВК + ОписаниеОшибки;
				РезультатВыгрузки.Вставить("Статус"		, Ложь);				
				РезультатВыгрузки.Вставить("Сообщение"	, Сообщение);
				Сообщить(Сообщение);										
			Иначе
				
				ПредставлениеВремениЗавершенияВыгрузкиНаСерверSMARTS = ЛокЯдро_ПредставлениеВремени(ВремяЗавершенияВыгрузкиНаСерверSMARTS);
				
				Сообщить("Завершение выгрузки таблицы [" + ИмяТаблицы + "] порциями. Затраченное время: " + ПредставлениеВремениЗавершенияВыгрузкиНаСерверSMARTS);		
				
				ПодробноеСообщение = Символы.ВК + "Таблица [" + ИмяТаблицы + "] успешно выгружена порциями по " + СокрЛП(РазмерПорцииНоменклатуры) + " позиций. Выгружено:"
								   + Символы.ВК + Символы.Таб + "- " + Формат(ВсегоСтрок, "ЧН=0; ЧГ=3,0") + " строк";
							
				Если ИмяТаблицы = "Номенклатура" Тогда																					
					ПодробноеСообщение = ПодробноеСообщение 
										+ Символы.ВК + Символы.Таб + "- " + Формат(СоответствиеРазличныхТоваров.Количество(), "ЧН=0; ЧГ=3,0") + " товаров";
				КонецЕсли;																				
				
				ОбщееВремяВыгрузки 			= ВремяПолученияДанныхИз1С + ВремяВыгрузкиДанныхНаСерверSMARTS; 				
				
				ПредставлениеВремени1С 		= ЛокЯдро_ПредставлениеВремени(ВремяПолученияДанныхИз1С);
				ПредставлениеВремениMS 		= ЛокЯдро_ПредставлениеВремени(ВремяВыгрузкиДанныхНаСерверSMARTS);
				ПредставлениеВремениОбщее 	= ЛокЯдро_ПредставлениеВремени(ОбщееВремяВыгрузки);			
				
				ПодробноеСообщение = ЛокЯдро_СформироватьПодробноеСообщениеОВыгрузкеТаблицы(ПодробноеСообщение, ПредставлениеВремениОбщее, ПредставлениеВремени1С, ПредставлениеВремениMS);				
				
				РезультатВыгрузки.Вставить("Статус"		, Истина);				
				РезультатВыгрузки.Вставить("Сообщение"	, ПодробноеСообщение);
				Сообщить(ПодробноеСообщение);
				
			КонецЕсли;
			
		КонецЕсли;	
		
		СтруктураПодключенияMS.TerminalConnector.ОсвободитьРесурсы();		
		
	КонецЕсли;	
	
КонецПроцедуры

Функция ЛокЯдро_ПолучитьМассивСсылокНоменклатуры()
	
	СтруктураВызова = Новый Структура;
	СтруктураВызова.Вставить("ТипМетода", "Функция");
	СтруктураВызова.Вставить("ИмяМетода", "ПолучитьМассивСсылокНоменклатуры");	
	РезультатВыгрузки = Транзит_ВызватьГлобальныйМетодНаКлиенте(СтруктураВызова);	
	
	Возврат РезультатВыгрузки;
	
КонецФункции	

Процедура ЛокЯдро_ОчиститьТаблицуНаСервереSMARTS(ИмяТаблицы) Экспорт

	Если РасположениеКомпоненты = "НаСервере" Тогда
		СтруктураВызова = Новый Структура;
		СтруктураВызова.Вставить("ТипМетода", "Функция");
		СтруктураВызова.Вставить("ИмяМетода", "ОчиститьТаблицуНаСервереSMARTS");
		СтруктураВызова.Вставить("ПараметрыМетода", Новый Структура("ИмяТаблицы", ИмяТаблицы));
		РезультатВыгрузки = Транзит_ВызватьГлобальныйМетодНаКлиенте(СтруктураВызова);	
	Иначе
		РезультатВыгрузки = КомЯдро_ОчиститьТаблицуНаСервереSMARTS(ИмяТаблицы);
		Сообщить(РезультатВыгрузки.Сообщение);
	КонецЕсли;		
	
КонецПроцедуры

Функция ЛокЯдро_ПолучитьСхемуСКДДляВыгрузкиСправочников(ИмяТаблицы) Экспорт
	
	СтруктураВызова = Новый Структура;
	СтруктураВызова.Вставить("ТипМетода", "Функция");
	СтруктураВызова.Вставить("ИмяМетода", "ПолучитьСхемуСКДДляВыгрузкиСправочников");
	ПараметрыКомпоновщика = ЛокЯдро_ПолучитьЗначенияГлобальныхПараметров();
	ПараметрыМетода = Новый Структура;
	ПараметрыМетода.Вставить("ИмяТаблицы", ИмяТаблицы);
	ПараметрыМетода.Вставить("ПараметрыКомпоновщика", ПараметрыКомпоновщика);
	СтруктураВызова.Вставить("ПараметрыМетода", ПараметрыМетода);
	
	СхемаСКД = Транзит_ВызватьГлобальныйМетодНаКлиенте(СтруктураВызова, Истина);	
	
	Возврат СхемаСКД;
	
КонецФункции

Функция ЛокЯдро_ПолучитьДанныеТаблицыДляВыгрузкиНаСерверSMARTS(ИмяТаблицы, НастройкиКомпоновщика, ПараметрыКомпоновщика) Экспорт

	СтруктураВызова = Новый Структура;
	СтруктураВызова.Вставить("ТипМетода", "Функция");
	СтруктураВызова.Вставить("ИмяМетода", "ПолучитьДанныеТаблицыДляВыгрузкиНаСерверSMARTS");
	СтруктураВызова.Вставить("ПараметрыМетода", Новый Структура("ИмяТаблицы,НастройкиКомпоновщика,ПараметрыКомпоновщика", ИмяТаблицы, НастройкиКомпоновщика, ПараметрыКомпоновщика));
	
	ДанныеДляВыгрузки = Транзит_ВызватьГлобальныйМетодНаКлиенте(СтруктураВызова);	
	
	Возврат ДанныеДляВыгрузки;
	
КонецФункции

Функция ЛокЯдро_ПолучитьСписокИспользуемыхСправочников() Экспорт
	
	СтруктураВызова = Новый Структура;
	СтруктураВызова.Вставить("ТипМетода", "Функция");
	СтруктураВызова.Вставить("ИмяМетода", "ПолучитьСписокИспользуемыхСправочников");	
	
	Возврат Транзит_ВызватьГлобальныйМетодНаКлиенте(СтруктураВызова);
	
КонецФункции

Функция ЛокЯдро_НайтиИндексИдТовараВМассивеИмен(МассивИмен) Экспорт
	
	СтруктураВызова = Новый Структура;
	СтруктураВызова.Вставить("ТипМетода"		, "Функция");
	СтруктураВызова.Вставить("ИмяМетода"		, "НайтиИндексИдТовараВМассивеИмен");	
	СтруктураВызова.Вставить("ПараметрыМетода"	, Новый Структура("МассивИмен", МассивИмен));
	
	Возврат Транзит_ВызватьГлобальныйМетодНаКлиенте(СтруктураВызова);
		
КонецФункции	

Процедура ЛокЯдро_ВыгрузитьНоменклатуруИзДокумента(Документ1С, НастройкаБП)
			
	МетаданныеНСИ = ЛокЯдро_ПолучитьМетаданныеНСИ();
	НазваниеРеквизитаНоменклатуры = МетаданныеНСИ.Номенклатура.ИмяСправочника;
	
	//Найдем настройку выгрузки ТЧ с номенклатурой и название ТЧ с номенклатурой
	ИмяТЧДокумента = "";
	НастройкиВыгрузкиТЧ = НастройкаБП.НастройкаВыгрузкиТЧ;
	Для Каждого НастройкаВыгрузкиТЧ из НастройкиВыгрузкиТЧ Цикл
		тчСопоставленияРеквизитов = НастройкаВыгрузкиТЧ.ТабличнаяЧастьДокумента1С;
		НайденныеСтрокиНастройки = тчСопоставленияРеквизитов.НайтиСтроки(Новый Структура("ИмяПриемника","ИдТовара"));
		Если НайденныеСтрокиНастройки.Количество() >0 Тогда
			ИмяТЧДокумента = НастройкаВыгрузкиТЧ.НастройкаТЧСтрокой;
			Если СтруктураМетаданных.Документы1С[НастройкаБП.ТипИсходногоДокумента1С].ТабличныеЧасти[ИмяТЧДокумента].Реквизиты.НайтиПоЗначению(НазваниеРеквизитаНоменклатуры) <> Неопределено Тогда
				Прервать;
			Иначе
				ИмяТЧДокумента = "";
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Если  ИмяТЧДокумента <> ""  Тогда
		
		МассивНоменклатуры = Документ1С[ИмяТЧДокумента].ВыгрузитьКолонку(НазваниеРеквизитаНоменклатуры);
		//ПараметрыОнлайн = Новый Структура("ПараметрНоменклатуры,ПараметрУпаковки,Режим,СтруктураШтрихкода", ПараметрНоменклатуры, ПараметрУпаковки, Режим, СтруктураШтрихкода);
		НастройкиКомпоновщика = "";
		Отбор = Новый Структура("ИмяТаблицы", "Номенклатура");
		НастройкаКомпоновщикаСтрокой = ЛокЯдро_ПолучитьИзКэшаЗначениеТабличнойНастройкиSMARTS("НастройкиОбменаСправочников", Отбор, "НастройкаКомпоновщикаСтрокой");
		Если ЗначениеЗаполнено(НастройкаКомпоновщикаСтрокой) Тогда
			НастройкиКомпоновщика = ЗначениеИзСтрокиВнутр(НастройкаКомпоновщикаСтрокой);
		КонецЕслИ;

		//ПараметрУпаковки = "";
		//ПараметрыОнлайн = Новый Структура("ПараметрНоменклатуры,ПараметрУпаковки,Режим", МассивНоменклатуры, ПараметрУпаковки, "СписокНоменклатуры");
		ПараметрыУзлов = _ГлКонтекст.ГлЯдро_ПолучитьЗначенияГлобальныхПараметров();
		
		//ТаблицаТоваров = _ГлКонтекст.ГлЯдро_ПолучитьДанныеТаблицыДляВыгрузкиНаСерверSMARTS("Номенклатура", НастройкиКомпоновщика, ПараметрыУзлов, ПараметрыОнлайн);	
		
		ДанныеДляВыгрузки = _ГлКонтекст.ГлЯдро_ПолучитьПорциюДанныхДляВыгрузки("Номенклатура", НастройкиКомпоновщика, ПараметрыУзлов, "",МассивНоменклатуры);	
		СтруктураПодключенияMS.TerminalConnector.ПерезаписыватьНоменклатуру(Ложь);
		РезультатПопытки = СтруктураПодключенияMS.TerminalConnector.НачатьВыгрузкуТоваров(ДанныеДляВыгрузки.МассивИмен);
		
		Если НЕ РезультатПопытки Тогда
					
			ОписаниеОшибки = КомЯдро_ПолучитьОшибку();		
			Сообщение = "Таблица [Номеклатура] не выгружается!" + Символы.ВК + ОписаниеОшибки;
			Сообщить(Сообщение);					
			Возврат;			
		КонецЕсли;
			
		Для Каждого МассивСтрокиВыгрузки из ДанныеДляВыгрузки.МассивыСтрок Цикл
						
			РезультатПопытки = СтруктураПодключенияMS.TerminalConnector.ДобавитьВВыгрузкуТоваров(МассивСтрокиВыгрузки);
						
			Если НЕ РезультатПопытки Тогда
				
				ОписаниеОшибки = КомЯдро_ПолучитьОшибку();		
				Сообщение = "Ошибка выгрузки таблицы [Номеклатура]." + Символы.ВК + ОписаниеОшибки;
				Сообщить(Сообщение);																	
				СтруктураПодключенияMS.TerminalConnector.ПрерватьВыгрузкуТаблицы();			
				Прервать;				
			КонецЕсли;
			
		КонецЦикла;			
		
		
		РезультатПопытки = СтруктураПодключенияMS.TerminalConnector.ЗавершитьВыгрузкуТоваров();	
									
		Если НЕ РезультатПопытки Тогда
			ОписаниеОшибки = КомЯдро_ПолучитьОшибку();		
			Сообщение = "Не удалось закончить выгрузку таблицы [Номеклатура]." + Символы.ВК + ОписаниеОшибки;		
			Сообщить(Сообщение);														
		КонецЕсли;			
		
		СтруктураПодключенияMS.TerminalConnector.ОсвободитьРесурсы();	
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ЛокальныйКонтекст_Документы

Функция ЛокЯдро_ПолучитьСписокДокументовНаСервереSMARTS(ID_БазыSMARTS = "") Экспорт
	
	Если РасположениеКомпоненты = "НаСервере" Тогда
		СтруктураВызова = Новый Структура;
		СтруктураВызова.Вставить("ТипМетода", "Функция");
		СтруктураВызова.Вставить("ИмяМетода", "ПолучитьСписокДокументовНаСервереSMARTS");		
		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("ID_БазыSMARTS", ID_БазыSMARTS);	
		СтруктураВызова.Вставить("ПараметрыМетода", СтруктураПараметров);				
		СписокДокументов = Транзит_ВызватьГлобальныйМетодНаКлиенте(СтруктураВызова);	
	Иначе
		ПустаяТаблица = ЛокЯдро_ПолучитьПустуюТаблицуДокументовSMARTS();
		СписокДокументов = КомЯдро_ПолучитьСписокДокументовНаСервереSMARTS(ПустаяТаблица, ID_БазыSMARTS);
	КонецЕсли;
	
	Возврат СписокДокументов;
	
КонецФункции

Процедура ЛокЯдро_ВыгрузитьДокументВБазуSMARTS(Документ1С, ID_БизнесПроцесса) Экспорт
	
	ДанныеНастроекИзКэша = Новый Структура();
	
	Отбор = Новый Структура("Используется,ТипИсходногоДокумента1С,ID_БизнесПроцесса", Истина, ЛокЯдро_ПолучитьТипДокументаПоСсылке(Документ1С), ID_БизнесПроцесса);
	ОтобранныеБизнесПроцессы = ЛокЯдро_ПолучитьИзКэшаЗначениеТабличнойНастройкиSMARTS("НастройкиБизнесПроцессов", Отбор, "");
	ДанныеНастроекИзКэша.Вставить("СписокБизнесПроцессов",  ОтобранныеБизнесПроцессы);
	ДанныеНастроекИзКэша.Вставить("ПроизвольныеКодыШапки", ЛокЯдро_ПолучитьИзКэшаНастройкуSMARTS("ПроизвольныеКоды_Выгрузка_ШапкаДокумента"));
	ДанныеНастроекИзКэша.Вставить("ПроизвольныеКодыТабличнойЧасти", ЛокЯдро_ПолучитьИзКэшаНастройкуSMARTS("ПроизвольныеКоды_Выгрузка_ТабличнаяЧастьДокумента"));		
		
	флУказатьПользователя = ДанныеНастроекИзКэша.СписокБизнесПроцессов[0].НазначитьПользователю =  "Спрашивать при выгрузке";	
	флКопияДляКаждогоПользователя = ?(флУказатьПользователя, ДанныеНастроекИзКэша.СписокБизнесПроцессов[0].КопияДокументаДляКаждогоПользователя, Ложь);
	НазначенныеПользователи = "";
	
	Если флУказатьПользователя Тогда
		
		ФормаРедактирования = _ГлКонтекст.ПолучитьФорму("ФормаСлужебная_ВыборПользователяИлиГруппы", ЭтаФорма, ЭтаФорма);
		
		ФормаРедактирования.Заголовок = "Выберите пользователя для документа "+  Строка(Документ1С);
		ФормаРедактирования.ЭлементыФормы.ПользователиMS.РежимВыделения = ?(флКопияДляКаждогоПользователя,РежимВыделенияТабличногоПоля.Множественный,РежимВыделенияТабличногоПоля.Одиночный);
		ФормаРедактирования._ЛокКонтекст 			= ЭтаФорма;
		
		СписокИсключений = Новый Массив;
		СписокИсключений.Добавить("Выгружать всем");
		СписокИсключений.Добавить("Спрашивать при выгрузке");
		
		ПользователиДляВыбора = СтруктураМетаданных.ПользователиMS.Скопировать();
		Для Каждого ПользовательИсключение Из СписокИсключений Цикл
			СтрокиКУдалению = ПользователиДляВыбора.Строки.НайтиСтроки(Новый структура("ГруппаПользователь",ПользовательИсключение));
			Если СтрокиКУдалению.Количество()> 0 Тогда			
				ПользователиДляВыбора.Строки.Удалить(СтрокиКУдалению[0]);
			КонецЕсли;
		КонецЦикла;
		
		ФормаРедактирования.ПользователиMS			= ПользователиДляВыбора;
		РезультатРедактирования 						= ФормаРедактирования.ОткрытьМодально();	
		
		Если РезультатРедактирования <> Неопределено И ТипЗнч(РезультатРедактирования) = Тип("Массив") Тогда		
			НазначенныеПользователи = РезультатРедактирования;
		Иначе
			Сообщить("Не выбран пользователь для работы с документом! Документ не выгружен в тсд.");
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	// Выгрузка номенклатуры из документа перед выгрузкой 
	флВыгрузитьНоменклатуруДокумента = ТекущиеНастройкиMS.ВыгружатьНоменклатуруДокументаПередВыгрузкойДокумента;
	Если флВыгрузитьНоменклатуруДокумента Тогда
		ЛокЯдро_ВыгрузитьНоменклатуруИзДокумента(Документ1С, ДанныеНастроекИзКэша.СписокБизнесПроцессов[0]);	
	КонецЕсли;
	
	Если ЭтаФорма.РасположениеКомпоненты = "НаСервере" Тогда
		ЛокЯдро_СформироватьИЗаписатьДокументВБазуSMARTS(Документ1С, ДанныеНастроекИзКэша, ID_БизнесПроцесса, ДанныеТекущегоУзла.ID_БазыMS,НазначенныеПользователи,флКопияДляКаждогоПользователя);
	Иначе
		Если ТипЗнч(Документ1С) = Тип("Массив") Тогда
			МассивДанныхДокументовКОбъединению = Новый Массив;
			СтрокаИдИсходныхДокументов = "";
			Для Каждого ДокументКОбъединению Из Документ1С Цикл
				ДанныеДокумента = ЛокЯдро_ПолучитьДанныеДокумента1СДляВыгрузки(ДокументКОбъединению, ДанныеНастроекИзКэша);
				МассивДанныхДокументовКОбъединению.Добавить(ДанныеДокумента);
				СтрокаИдИсходныхДокументов = СтрокаИдИсходныхДокументов +?(СтрокаИдИсходныхДокументов="","",";")+ ДанныеДокумента.ШапкаДокумента.Ид;
			КонецЦикла;
			
			// В шапке будет информация из первого выбранного документа+ список Ид объединенных документов
			ШапкаДокумента = МассивДанныхДокументовКОбъединению[0].ШапкаДокумента;
			ШапкаДокумента.Вставить("ИдИсходныхДокументов",СтрокаИдИсходныхДокументов);
			
			// добавим ключи всех выгружаемых ТЧ по полученной структуре из первого документа
			ТабличныеЧастиОбъединенные = Новый Структура;			
			Для Каждого ТабличнаяЧасть Из МассивДанныхДокументовКОбъединению[0].ТабличныеЧасти Цикл
				ТабличныеЧастиОбъединенные.Вставить(ТабличнаяЧасть.Ключ, Новый Массив);	
			КонецЦикла;
			
			Для Каждого ДокументКОбъединению Из МассивДанныхДокументовКОбъединению Цикл
				Для Каждого ТабличнаяЧасть Из ДокументКОбъединению.ТабличныеЧасти Цикл 
					Для Каждого СтрокаТЧ Из  ТабличнаяЧасть.Значение Цикл
						СтрокаСтруктурой = СтрокаТЧ;
						СтрокаСтруктурой.Вставить("ИдДокумента",ДокументКОбъединению.ШапкаДокумента.Ид);
						ТабличныеЧастиОбъединенные[ТабличнаяЧасть.Ключ].Добавить(СтрокаСтруктурой);
					КонецЦикла;
				КонецЦикла;
			КонецЦикла;
			
			ДанныеОбъединенногоДокумента = Новый Структура;			
			ДанныеОбъединенногоДокумента.Вставить("ШапкаДокумента",ШапкаДокумента);
			ДанныеОбъединенногоДокумента.Вставить("ТабличныеЧасти", ТабличныеЧастиОбъединенные);
			ДанныеДокумента = ДанныеОбъединенногоДокумента;
		Иначе
			ДанныеДокумента = ЛокЯдро_ПолучитьДанныеДокумента1СДляВыгрузки(Документ1С, ДанныеНастроекИзКэша);
		КонецЕсли;
		
		Если НазначенныеПользователи <> "" Тогда		
			Если   флКопияДляКаждогоПользователя Тогда
				Для Каждого НазначенныйПользователь ИЗ НазначенныеПользователи Цикл
					ДокументSMARTS  = КомЯдро_СформироватьНовыйДокументSMARTS(ДанныеДокумента,НазначенныйПользователь.Ид);		
					КомЯдро_ЗаписатьДокументВБазуSMARTS(ДокументSMARTS, ДанныеТекущегоУзла.ID_БазыMS);	
				КонецЦикла;
			Иначе
				НазначенныеПользователиСтрокой = "";
				Для Каждого НазначенныйПользователь ИЗ НазначенныеПользователи Цикл
					НазначенныеПользователиСтрокой = НазначенныеПользователиСтрокой+?(НазначенныеПользователиСтрокой = "","","|")+НазначенныйПользователь.Ид;
				КонецЦикла;
				ДокументSMARTS  = КомЯдро_СформироватьНовыйДокументSMARTS(ДанныеДокумента,НазначенныеПользователиСтрокой);		
				КомЯдро_ЗаписатьДокументВБазуSMARTS(ДокументSMARTS, ДанныеТекущегоУзла.ID_БазыMS);	
			КонецЕсли;			
		Иначе
			ДокументSMARTS  = КомЯдро_СформироватьНовыйДокументSMARTS(ДанныеДокумента);
			КомЯдро_ЗаписатьДокументВБазуSMARTS(ДокументSMARTS, ДанныеТекущегоУзла.ID_БазыMS);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ЛокЯдро_СформироватьИЗаписатьДокументВБазуSMARTS(Документ1С, СписокПередаваемыхНастроек, ID_БизнесПроцесса, ID_БазыSMARTS = "",НазначенныеПользователи = "",КопияДляКаждогоПользователя = Ложь)
	
	СтруктураВызова = Новый Структура;
	СтруктураВызова.Вставить("ТипМетода", "Процедура");
	СтруктураВызова.Вставить("ИмяМетода", "СформироватьИЗаписатьДокументВБазуSMARTS");
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("Документ1С", Документ1С);
	СтруктураПараметров.Вставить("СписокПередаваемыхНастроек", СписокПередаваемыхНастроек);
	СтруктураПараметров.Вставить("ID_БизнесПроцесса", ID_БизнесПроцесса);	
	СтруктураПараметров.Вставить("ID_БазыSMARTS", ID_БазыSMARTS);	
	СтруктураПараметров.Вставить("НазначенныеПользователи",НазначенныеПользователи);
	СтруктураПараметров.Вставить("КопияДляКаждогоПользователя",КопияДляКаждогоПользователя);
	СтруктураВызова.Вставить("ПараметрыМетода", СтруктураПараметров);
	
	Транзит_ВызватьГлобальныйМетодНаКлиенте(СтруктураВызова);	
	
КонецПроцедуры

Функция ЛокЯдро_ПолучитьКомпоновкуСКДДляОтбораДокументов1С(ТипДокумента1С, ID_Узла) Экспорт
	
	ПараметрыУзла = ЛокЯдро_ПолучитьЗначенияГлобальныхПараметров();
	
	СтруктураВызова = Новый Структура;
	СтруктураВызова.Вставить("ТипМетода", "Функция");
	СтруктураВызова.Вставить("ИмяМетода", "ПолучитьКомпоновкуСКДДляОтбораДокументов1С");
	СтруктураВызова.Вставить("ПараметрыМетода", Новый Структура("ТипДокумента1С,ПараметрыУзла", ТипДокумента1С, ПараметрыУзла));
	
	Результат = Транзит_ВызватьГлобальныйМетодНаКлиенте(СтруктураВызова);	
	
	Возврат Результат;
	
КонецФункции

Функция ЛокЯдро_СформироватьИЗаписатьДокументВБазу1С_ПоID(ID_Документа, ТипДокументаMS, ID_БизнесПроцесса, НастройкаБП, ДокументДляЗаполнения = Неопределено, Онлайн = Ложь, ФильтрТЧПоИдДокумента = Неопределено) Экспорт
	
	СтруктураДанныхДокументаMS = СтруктураМетаданных.ДокументыMS[ТипДокументаMS];
	
	ДанныеНастроекИзКэша = Новый Структура;
	ДанныеНастроекИзКэша.Вставить("НастройкиДляОбмена", ЛокЯдро_ПолучитьИзКэшаНастройкуSMARTS("НастройкиБизнесПроцессов"));
	ДанныеНастроекИзКэша.Вставить("ЗначенияПараметров", ЛокЯдро_ПолучитьЗначенияГлобальныхПараметров());
	ДанныеНастроекИзКэша.Вставить("ПроизвольныеКодыШапки", ЛокЯдро_ПолучитьИзКэшаНастройкуSMARTS("ПроизвольныеКоды_Загрузка_ШапкаДокумента"));
	ДанныеНастроекИзКэша.Вставить("ПроизвольныеКодыТабличнойЧасти", ЛокЯдро_ПолучитьИзКэшаНастройкуSMARTS("ПроизвольныеКоды_Загрузка_ТабличнаяЧастьДокумента"));	
	
	
	Если РасположениеКомпоненты = "НаСервере" Тогда
		СтруктураВызова = Новый Структура;
		СтруктураВызова.Вставить("ТипМетода", "Функция");
		СтруктураВызова.Вставить("ИмяМетода", "СформироватьИЗаписатьДокументВБазу1С_ПоID");
		ПараметрыМетода = Новый Структура;
		ПараметрыМетода.Вставить("ID_Документа", ID_Документа);
		ПараметрыМетода.Вставить("СтруктураДанныхДокументаMS", СтруктураДанныхДокументаMS);
		ПараметрыМетода.Вставить("ID_БизнесПроцесса", ID_БизнесПроцесса);
		ПараметрыМетода.Вставить("ДанныеНастроекИзКэша", ДанныеНастроекИзКэша);
		ПараметрыМетода.Вставить("ID_БазыMS", ДанныеТекущегоУзла.ID_БазыMS);
		ПараметрыМетода.Вставить("НастройкаБП", НастройкаБП);
		ПараметрыМетода.Вставить("ДокументДляЗаполнения", ДокументДляЗаполнения);
		ПараметрыМетода.Вставить("Онлайн", Онлайн);
		ПараметрыМетода.Вставить("ФильтрТЧПоИдДокумента",ФильтрТЧПоИдДокумента);
		СтруктураВызова.Вставить("ПараметрыМетода", ПараметрыМетода);
		РезультатЗаписи = Транзит_ВызватьГлобальныйМетодНаКлиенте(СтруктураВызова);	
	Иначе
		ДанныеДокументаMS = ЛокЯдро_ПолучитьДанныеДокументаMS(ID_Документа, ТипДокументаMS,,,ФильтрТЧПоИдДокумента);
		РезультатЗаписи = ЛокЯдро_СформироватьИЗаписатьДокументВБазу1С(ДанныеДокументаMS, ДанныеНастроекИзКэша, НастройкаБП, ДокументДляЗаполнения, Онлайн, ФильтрТЧПоИдДокумента);
	КонецЕсли;
	
	Возврат РезультатЗаписи;
	
КонецФункции

Функция ЛокЯдро_СформироватьИЗаписатьДокументВБазу1С(ДанныеДокументаMS, ДанныеНастроекИзКэша = Неопределено, НастройкаБП = Неопределено, ДокументДляЗаполнения = Неопределено, Онлайн = Ложь,ФильтрТЧПоИдДокумента = Неопределено) Экспорт	
		
	Если ДанныеНастроекИзКэша = Неопределено Тогда
		ДанныеНастроекИзКэша = Новый Структура;
	КонецЕсли;
	Если НЕ ДанныеНастроекИзКэша.Свойство("ЗначенияПараметров") Тогда
		ДанныеНастроекИзКэша.Вставить("ЗначенияПараметров", ЛокЯдро_ПолучитьЗначенияГлобальныхПараметров());
	КонецЕсли;
	Если НЕ ДанныеНастроекИзКэша.Свойство("ПроизвольныеКодыШапки") Тогда
		ДанныеНастроекИзКэша.Вставить("ПроизвольныеКодыШапки", ЛокЯдро_ПолучитьИзКэшаНастройкуSMARTS("ПроизвольныеКоды_Загрузка_ШапкаДокумента"));
	КонецЕсли;
	Если НЕ ДанныеНастроекИзКэша.Свойство("ПроизвольныеКодыТабличнойЧасти") Тогда
		ДанныеНастроекИзКэша.Вставить("ПроизвольныеКодыТабличнойЧасти", ЛокЯдро_ПолучитьИзКэшаНастройкуSMARTS("ПроизвольныеКоды_Загрузка_ТабличнаяЧастьДокумента"));
	КонецЕсли;
	
	СтруктураВызова = Новый Структура;
	СтруктураВызова.Вставить("ТипМетода", "Функция");
	СтруктураВызова.Вставить("ИмяМетода", "СформироватьИЗаписатьДокументВБазу1С");
	ПараметрыМетода = Новый Структура;
	ПараметрыМетода.Вставить("ДанныеДокументаMS", ДанныеДокументаMS);
	ПараметрыМетода.Вставить("НастройкаБП", НастройкаБП);
	ПараметрыМетода.Вставить("ДанныеНастроекИзКэша", ДанныеНастроекИзКэша);
	ПараметрыМетода.Вставить("ДокументДляЗаполнения", ДокументДляЗаполнения);
	ПараметрыМетода.Вставить("Онлайн", Онлайн);
	ПараметрыМетода.Вставить("ФильтрТЧПоИдДокумента",ФильтрТЧПоИдДокумента);
	СтруктураВызова.Вставить("ПараметрыМетода", ПараметрыМетода);
	РезультатЗаписи = Транзит_ВызватьГлобальныйМетодНаКлиенте(СтруктураВызова);	
	
	Возврат РезультатЗаписи;
	
КонецФункции

Функция ЛокЯдро_ЗаписатьИПровестиДокумент1С(РезультатЗаписи, НастройкаБизнесПроцесса, ИмяТипаДокумента, ИмяДокумента)
	
	СтруктураВызова = Новый Структура;
	СтруктураВызова.Вставить("ТипМетода", "Функция");
	СтруктураВызова.Вставить("ИмяМетода", "ЗаписатьИПровестиДокумент1С");
	ПараметрыМетода = Новый Структура;	
	ПараметрыМетода.Вставить("РезультатЗаписи", РезультатЗаписи);
	ПараметрыМетода.Вставить("НастройкаБизнесПроцесса", НастройкаБизнесПроцесса);
	ПараметрыМетода.Вставить("ИмяТипаДокумента", ИмяТипаДокумента);
	ПараметрыМетода.Вставить("ИмяДокумента", ИмяДокумента);
	СтруктураВызова.Вставить("ПараметрыМетода", ПараметрыМетода);
	РезультатЗаписи = Транзит_ВызватьГлобальныйМетодНаКлиенте(СтруктураВызова);	
	
	Возврат РезультатЗаписи;
	
КонецФункции	

Функция ЛокЯдро_ПолучитьДанныеДокументаMS(ID_Документа, ТипДокументаMS, ID_БазыSMARTS = "", ДополнятьВычислимымиПолями = Ложь,ФильтрТЧПоИдДокумента = Неопределено) Экспорт
	
	Если ID_БазыSMARTS = "" Тогда
		ID_БазыSMARTS = ДанныеТекущегоУзла.ID_БазыMS;
	КонецЕсли;
	СтруктураДанныхДокументаMS = СтруктураМетаданных.ДокументыMS[ТипДокументаMS];
	
	Если РасположениеКомпоненты = "НаСервере" Тогда
		СтруктураВызова = Новый Структура;
		СтруктураВызова.Вставить("ТипМетода", "Функция");
		СтруктураВызова.Вставить("ИмяМетода", "ПолучитьДанныеДокументаMS");
		ПараметрыМетода = Новый Структура;
		ПараметрыМетода.Вставить("ID_Документа", ID_Документа);
		ПараметрыМетода.Вставить("СтруктураДанныхДокументаMS", СтруктураДанныхДокументаMS);
		ПараметрыМетода.Вставить("ID_БазыSMARTS", ID_БазыSMARTS);
		ПараметрыМетода.Вставить("ФильтрТЧПоИдДокумента",ФильтрТЧПоИдДокумента);
		СтруктураВызова.Вставить("ПараметрыМетода", ПараметрыМетода);
		ДанныеДокументаMS = Транзит_ВызватьГлобальныйМетодНаКлиенте(СтруктураВызова);
	Иначе
		ДанныеДокументаMS = КомЯдро_ПолучитьДанныеДокументаНаСервереSMARTS(ID_Документа, СтруктураДанныхДокументаMS, ID_БазыSMARTS,ФильтрТЧПоИдДокумента);
		СтруктураВызова = Новый Структура;
		СтруктураВызова.Вставить("ТипМетода", "Функция");
		СтруктураВызова.Вставить("ИмяМетода", "ЗаполнитьВычислимыеПоляДокументаMS");
		СтруктураВызова.Вставить("ПараметрыМетода", Новый Структура("ДанныеДокументаMS,СтруктураДанныхДокументаMS", ДанныеДокументаMS, СтруктураДанныхДокументаMS));
		ДанныеДокументаMS = Транзит_ВызватьГлобальныйМетодНаКлиенте(СтруктураВызова);
	КонецЕсли;
	
	Возврат ДанныеДокументаMS;
	
КонецФункции
	
Функция ЛокЯдро_УдалитьДокументНаСервереSMARTS(ID_Документа) Экспорт
	
	Если РасположениеКомпоненты = "НаСервере" Тогда
		СтруктураВызова = Новый Структура;
		СтруктураВызова.Вставить("ТипМетода", "Функция");
		СтруктураВызова.Вставить("ИмяМетода", "УдалитьДокументНаСервереSMARTS");
		ПараметрыМетода = Новый Структура("ID_Документа,ID_БазыMS", ID_Документа, ДанныеТекущегоУзла.ID_БазыMS);
		СтруктураВызова.Вставить("ПараметрыМетода", ПараметрыМетода);
		РезультатУдаления = Транзит_ВызватьГлобальныйМетодНаКлиенте(СтруктураВызова);	
	Иначе
		ДокументУдален = КомЯдро_УдалитьДокументНаСервереSMARTS(ID_Документа, ДанныеТекущегоУзла.ID_БазыMS);
		Если ДокументУдален Тогда
			РезультатУдаления = Новый Структура("Сообщение,Статус", "Документ удален с ТСД!", Истина);
		Иначе
			РезультатУдаления = Новый Структура("Сообщение,Статус", "Не удалось удалить документ с ТСД!", Ложь);
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат РезультатУдаления;
	
КонецФункции

Функция ЛокЯдро_УстановитьСтатусДокументаНаСервереSMARTS(ID_Документа, Статус) Экспорт
	
	Если РасположениеКомпоненты = "НаСервере" Тогда
		СтруктураВызова = Новый Структура;
		СтруктураВызова.Вставить("ТипМетода", "Функция");
		СтруктураВызова.Вставить("ИмяМетода", "УстановитьСтатусДокументаНаСервереSMARTS");
		ПараметрыМетода = Новый Структура("ID_Документа,ID_БазыMS,Статус", ID_Документа, ДанныеТекущегоУзла.ID_БазыMS, Статус);
		СтруктураВызова.Вставить("ПараметрыМетода", ПараметрыМетода);
		РезультатУстановкиСтатуса = Транзит_ВызватьГлобальныйМетодНаКлиенте(СтруктураВызова);	
	Иначе
		СтатусУстановлен = КомЯдро_УстановитьСтатусДокументаНаСервереSMARTS(ID_Документа, ДанныеТекущегоУзла.ID_БазыMS, Статус);
				
		Если СтатусУстановлен Тогда
			РезультатУстановкиСтатуса = Новый Структура("Сообщение,Статус", "Успешно установлен статус [" + Статус + "]!", Истина);
		Иначе
			РезультатУстановкиСтатуса = Новый Структура("Сообщение,Статус", "Не удалось установить статус [" + Статус + "]!", Ложь);
		КонецЕсли;		
			
	КонецЕсли;
	
	Возврат РезультатУстановкиСтатуса;
	
КонецФункции

Функция ЛокЯдро_ПолучитьДанныеДокумента1СДляВыгрузки(Документ1С, ДанныеНастроекИзКэша)
	
	СтруктураВызова = Новый Структура;
	СтруктураВызова.Вставить("ТипМетода", "Функция");
	СтруктураВызова.Вставить("ИмяМетода", "ПолучитьДанныеДокумента1СДляВыгрузки");
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("Документ1С", Документ1С);
	СтруктураПараметров.Вставить("ДанныеНастроекИзКэша", ДанныеНастроекИзКэша);
	СтруктураВызова.Вставить("ПараметрыМетода", СтруктураПараметров);
	
	Возврат Транзит_ВызватьГлобальныйМетодНаКлиенте(СтруктураВызова);	
	
КонецФункции

Функция ЛокЯдро_ПолучитьПустуюТаблицуДокументовSMARTS()
	
	СтруктураВызова = Новый Структура;
	СтруктураВызова.Вставить("ТипМетода", "Функция");
	СтруктураВызова.Вставить("ИмяМетода", "ПолучитьПустуюТаблицуДокументовSMARTS");
	
	Возврат Транзит_ВызватьГлобальныйМетодНаКлиенте(СтруктураВызова);	
	
КонецФункции

Функция ЛокЯдро_ПолучитьСписокДокументов1С(РежимОбмена) Экспорт
	
	СтруктураВызова = Новый Структура;
	СтруктураВызова.Вставить("ТипМетода", "Функция");
	СтруктураВызова.Вставить("ИмяМетода", "ПолучитьСписокДокументов1С");
	
	ПараметрыМетода = Новый Структура;
	ПараметрыМетода.Вставить("БизнесПроцессы", ЛокЯдро_ПолучитьИзКэшаНастройкуSMARTS("НастройкиБизнесПроцессов"));
	НастройкиОтборов = ЛокЯдро_ПолучитьИзКэшаНастройкуSMARTS("НастройкиОтборовУзлов_" + РежимОбмена);
	Если ТипЗнч(НастройкиОтборов) <> Тип("ТаблицаЗначений") Тогда
		НастройкиОтборов = ЛокЯдро_ПолучитьНастройкуНаСервереSMARTS("НастройкиОтборовУзлов_" + РежимОбмена);
	КонецЕсли;
	ПараметрыМетода.Вставить("НастройкиОтборов", НастройкиОтборов);
	ПараметрыМетода.Вставить("ПараметрыУзлов", ЛокЯдро_ПолучитьЗначенияГлобальныхПараметров());
	ПараметрыМетода.Вставить("РежимОбмена", РежимОбмена);
	
	СтруктураВызова.Вставить("ПараметрыМетода", Новый Структура("НастройкиДляМетода", ПараметрыМетода));
	
	Возврат Транзит_ВызватьГлобальныйМетодНаКлиенте(СтруктураВызова);	
	
КонецФункции

Функция ЛокЯдро_ПолучитьТипДокументаПоСсылке(СсылкаДокумента) 
	
	СтруктураВызова = Новый Структура;
	СтруктураВызова.Вставить("ТипМетода", "Функция");
	СтруктураВызова.Вставить("ИмяМетода", "ПолучитьТипДокументаПоСсылке");
	СтруктураВызова.Вставить("ПараметрыМетода", Новый Структура("СсылкаДокумента", СсылкаДокумента));
	
	Возврат Транзит_ВызватьГлобальныйМетодНаКлиенте(СтруктураВызова);	
	
КонецФункции

// +++ Денвик
// Функция используется на форме настройки отбора документов, для предпросмотра выборки.
Функция ЛокЯдро_ПолучитьДокументыПоЗапросуСКД(НастройкиКомпоновщика, ТипДокумента1С) Экспорт
	СтруктураВызова = Новый Структура;
	СтруктураВызова.Вставить("ТипМетода", "Функция");
	СтруктураВызова.Вставить("ИмяМетода", "ОтобратьДокументы1СЧерезСКД");

	ПараметрыМетода = Новый Структура;
	ПараметрыМетода.Вставить("НастройкиКомпоновки",НастройкиКомпоновщика);
	ПараметрыМетода.Вставить("ТипДокумента1С", ТипДокумента1С);
	ПараметрыМетода.Вставить("ПараметрыУзлов", ЛокЯдро_ПолучитьЗначенияГлобальныхПараметров());
	СтруктураВызова.Вставить("ПараметрыМетода", ПараметрыМетода);
	
	Возврат Транзит_ВызватьГлобальныйМетодНаКлиенте(СтруктураВызова);
КонецФункции
// --- Денвик

// Функция используется на форме настройки отбора документов, для предпросмотра выборки по произвольному отбору.
Функция ЛокЯдро_ПолучитьДокументыПоПроизвольномуОтбору(ID_ПроизвольногоОтбора) Экспорт
	СтруктураВызова = Новый Структура;
	СтруктураВызова.Вставить("ТипМетода", "Функция");
	СтруктураВызова.Вставить("ИмяМетода", "ОтобратьДокументы1СЧерезПроизвольныйОтбор");

	ПараметрыМетода = Новый Структура;
	ПараметрыМетода.Вставить("ID_ПроизвольногоОтбора", ID_ПроизвольногоОтбора);
	СтруктураВызова.Вставить("ПараметрыМетода", ПараметрыМетода);
	
	Возврат Транзит_ВызватьГлобальныйМетодНаКлиенте(СтруктураВызова);
КонецФункции

#КонецОбласти

#Область УниверсальныеМеханизмы

Функция ЛокЯдро_ПолучитьНовыйID(Префикс) Экспорт
	
	Возврат Префикс + СтрЗаменить(Строка(Новый УникальныйИдентификатор()), "-", "");
	
КонецФункции

Процедура ЛокЯдро_ЗаполнитьФормуЗначениямиИзСтруктуры(ФормаДляЗаполнения, СтруктураСДанными) Экспорт
	
	Для Каждого ЭлементСтруктуры Из СтруктураСДанными Цикл
		Если ФормаДляЗаполнения.ЭлементыФормы.Найти(ЭлементСтруктуры.Ключ) = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		Если ТипЗнч(ЭлементСтруктуры.Значение) = Тип("ТаблицаЗначений") Тогда
			ФормаДляЗаполнения[ЭлементСтруктуры.Ключ].Очистить();
			Для Каждого СтрокаТЗ Из ЭлементСтруктуры.Значение Цикл
				ЗаполнитьЗначенияСвойств(ФормаДляЗаполнения[ЭлементСтруктуры.Ключ].Добавить(), СтрокаТЗ);
			КонецЦикла;
		Иначе
			ФормаДляЗаполнения[ЭлементСтруктуры.Ключ] = ЭлементСтруктуры.Значение;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Функция ЛокЯдро_ПолучитьМетаданныеНСИ() Экспорт
	
	СтруктураВызова = Новый Структура;
	СтруктураВызова.Вставить("ТипМетода", "Функция");
	СтруктураВызова.Вставить("ИмяМетода", "ПолучитьМетаданныеНСИ");
	
	МетаданныеНСИ = Транзит_ВызватьГлобальныйМетодНаКлиенте(СтруктураВызова);	
	
	Возврат МетаданныеНСИ;
	
КонецФункции

Функция ЛокЯдро_ПолучитьМакетОбработки(ИмяМакета) Экспорт
	
	СтруктураВызова = Новый Структура;
	СтруктураВызова.Вставить("ТипМетода", "Функция");
	СтруктураВызова.Вставить("ИмяМетода", "ПолучитьМакетОбработки");
	СтруктураВызова.Вставить("ПараметрыМетода", Новый Структура("ИмяМакета", ИмяМакета));
	
	Возврат Транзит_ВызватьГлобальныйМетодНаКлиенте(СтруктураВызова);
	
КонецФункции

Функция ЛокЯдро_ШтрихКодЕстьВБазе1С(Штрихкод, СтруктураХраненияШК) Экспорт
	
	СтруктураВызова = Новый Структура;
	СтруктураВызова.Вставить("ТипМетода", "Функция");
	СтруктураВызова.Вставить("ИмяМетода", "ШтрихКодЕстьВБазе1С");
	
	ПараметрыМетода = Новый Структура;
	ПараметрыМетода.Вставить("Штрихкод", Штрихкод);
	ПараметрыМетода.Вставить("СтруктураХраненияШК", СтруктураХраненияШК);
	
	СтруктураВызова.Вставить("ПараметрыМетода", ПараметрыМетода);
	
	РезультатФункции = Транзит_ВызватьГлобальныйМетодНаКлиенте(СтруктураВызова);	
	
	Возврат РезультатФункции;
	
КонецФункции

Функция ЛокЯдро_ПолучитьДанныеШтрихКода(Штрихкод) Экспорт
	
	ПараметрыМетода = Новый Структура;
	ПараметрыМетода.Вставить("Штрихкод", Штрихкод);
	
	СтруктураВызова = Новый Структура;
	СтруктураВызова.Вставить("ТипМетода", "Функция");
	СтруктураВызова.Вставить("ИмяМетода", "ПолучитьДанныеШтрихКода");
	СтруктураВызова.Вставить("ПараметрыМетода", ПараметрыМетода);

	Возврат Транзит_ВызватьГлобальныйМетодНаКлиенте(СтруктураВызова);
	
КонецФункции

Функция ЛокЯдро_ПолучитьУниверсальноеИмяОбработчика(ТипОбработчика, ТипДокумента = "") Экспорт
	
	СтруктураВызова = Новый Структура;
	СтруктураВызова.Вставить("ТипМетода", "Функция");
	СтруктураВызова.Вставить("ИмяМетода", "ПолучитьУниверсальноеИмяОбработчика");
	ПараметрыМетода = Новый Структура;
	ПараметрыМетода.Вставить("ТипОбработчика", ТипОбработчика);
	ПараметрыМетода.Вставить("ТипДокумента", ТипДокумента);
	СтруктураВызова.Вставить("ПараметрыМетода", ПараметрыМетода);
	
	УниверсальноеИмяОбработчика = Транзит_ВызватьГлобальныйМетодНаКлиенте(СтруктураВызова);	
	
	Возврат УниверсальноеИмяОбработчика;
	
КонецФункции

Функция ЛокЯдро_ПроверитьДоступностьОбработчика(ИмяОбработчика, СтруктураПараметров) Экспорт
	
	РезультатПроверки = Новый Структура("Статус,Сообщение", Истина, "");
	
	СтруктураВызова = Новый Структура;
	СтруктураВызова.Вставить("ТипМетода", "Функция");
	СтруктураВызова.Вставить("ИмяМетода", "ПроверитьДоступностьОбработчика");
	ПараметрыМетода = Новый Структура;
	ПараметрыМетода.Вставить("ИмяОбработчика", ИмяОбработчика);
	ПараметрыМетода.Вставить("СтруктураПараметров", СтруктураПараметров);
	СтруктураВызова.Вставить("ПараметрыМетода", ПараметрыМетода);
	
	РезультатВызова = Транзит_ВызватьГлобальныйМетодНаКлиенте(СтруктураВызова);	
	
	РезультатПроверки.Вставить("Статус", РезультатВызова.Статус);
	
	Если РезультатВызова.Статус Тогда
		РезультатПроверки.Вставить("Сообщение", "В качестве колонки ограничения будет использована колонка с именем [" + РезультатВызова.Сообщение + "]");
	Иначе
		РезультатПроверки.Вставить("Сообщение", "Для данного документа не создан обработчик с именем [" + ИмяОбработчика + "()]");
	КонецЕсли;
	
	Возврат РезультатПроверки;
	
КонецФункции

Функция ЛокЯдро_ПолучитьЕдиницуИзмеренияПоУмолчанию(ТоварСсылка) Экспорт
	
	ПараметрыМетода = Новый Структура;
	ПараметрыМетода.Вставить("ТоварСсылка", ТоварСсылка);
	
	СтруктураВызова = Новый Структура;
	СтруктураВызова.Вставить("ТипМетода", "Функция");
	СтруктураВызова.Вставить("ИмяМетода", "ПолучитьЕдиницуИзмеренияПоУмолчанию");
	СтруктураВызова.Вставить("ПараметрыМетода", ПараметрыМетода);

	Возврат Транзит_ВызватьГлобальныйМетодНаКлиенте(СтруктураВызова);
	
КонецФункции

Функция ЛокЯдро_РазложитьСтрокуВМассивПодстрок(Знач Стр, Разделитель = ",") Экспорт
	
	МассивСтрок = Новый Массив();
	Если Разделитель = " " Тогда
		Стр = СокрЛП(Стр);
		Пока 1 = 1 Цикл
			Поз = Найти(Стр, Разделитель);
			Если Поз = 0 Тогда
				МассивСтрок.Добавить(Стр);
				Возврат МассивСтрок;
			КонецЕсли;
			МассивСтрок.Добавить(Лев(Стр, Поз - 1));
			Стр = СокрЛ(Сред(Стр, Поз));
		КонецЦикла;
	Иначе
		ДлинаРазделителя = СтрДлина(Разделитель);
		Пока 1 = 1 Цикл
			Поз = Найти(Стр, Разделитель);
			Если Поз = 0 Тогда
				Если (СокрЛП(Стр) <> "") Тогда
					МассивСтрок.Добавить(Стр);
				КонецЕсли;
				Возврат МассивСтрок;
			КонецЕсли;
			МассивСтрок.Добавить(Лев(Стр,Поз - 1));
			Стр = Сред(Стр, Поз + ДлинаРазделителя);
		КонецЦикла;
	КонецЕсли;
	
КонецФункции

Функция ЛокЯдро_ПредставлениеВремени(Время) Экспорт

	СтруктураВызова = Новый Структура;
	СтруктураВызова.Вставить("ТипМетода", "Функция");
	СтруктураВызова.Вставить("ИмяМетода", "ПредставлениеВремени");	
	СтруктураВызова.Вставить("ПараметрыМетода", Новый Структура("Время", Время));
	
	Возврат Транзит_ВызватьГлобальныйМетодНаКлиенте(СтруктураВызова);

КонецФункции

Функция ЛокЯдро_СформироватьПодробноеСообщениеОВыгрузкеТаблицы(Знач Сообщение, ПредставлениеВремениОбщее, ПредставлениеВремени1С, ПредставлениеВремениMS) Экспорт

	СтруктураВызова = Новый Структура;
	СтруктураВызова.Вставить("ТипМетода"		, "Функция");
	СтруктураВызова.Вставить("ИмяМетода"		, "СформироватьПодробноеСообщениеОВыгрузкеТаблицы");	
	СтруктураВызова.Вставить("ПараметрыМетода"	, Новый Структура);
	
	СтруктураВызова.ПараметрыМетода.Вставить("Сообщение"				, Сообщение);
	СтруктураВызова.ПараметрыМетода.Вставить("ПредставлениеВремениОбщее", ПредставлениеВремениОбщее);
	СтруктураВызова.ПараметрыМетода.Вставить("ПредставлениеВремени1С"	, ПредставлениеВремени1С);
	СтруктураВызова.ПараметрыМетода.Вставить("ПредставлениеВремениMS"	, ПредставлениеВремениMS);
	
	Возврат Транзит_ВызватьГлобальныйМетодНаКлиенте(СтруктураВызова);

КонецФункции 

// +++ Денвик
#Область ПечатьЦенников
Процедура ПечатьЦенников(ДанныеДляПечати) Экспорт
	ПрефиксКонфигурации = _ГлКонтекст.ГлЯдро_ПолучитьПрефиксКонфигурации();
	Выполнить(ПрефиксКонфигурации+"_ПечатьЦенников(ДанныеДляПечати)");
КонецПроцедуры

Процедура УТ_10_3_ПечатьЦенников(ДанныеДляПечати)
	мОбработка = Обработки.ПечатьЦенников.Создать();
	
	Для Каждого мСтрока Из ДанныеДляПечати Цикл
		Если Не мСтрока.Флаг Тогда
			Продолжить;			
		КонецЕсли;
		                                                                   
		мСтрокаПечати = мОбработка.Товары.Добавить();
		мСтрокаПечати.Номенклатура 				 = мСтрока.Номенклатура;    
		//мСтрокаПечати.ХарактеристикаНоменклатуры = Справочники.ХарактеристикиНоменклатуры.НайтиПоНаименованию(мСтрока.ИмяХарактеристики,,, мСтрока.Номенклатура); //  Справочники.ХарактеристикиНоменклатуры.ПолучитьСсылку(Новый УникальныйИдентификатор(мСтрока.ИдХарактеристики));
		мСтрокаПечати.ЕдиницаИзмерения 			 = Справочники.ЕдиницыИзмерения.НайтиПоНаименованию(мСтрока.ИдУпаковки,,, мСтрока.Номенклатура);		
		мСтрокаПечати.Количество 				 = 1;
		Цена = мСтрока.Цена;
		НоваяЦена = ?(мСтрока.НоваяЦена = 0,мСтрока.ЦенаПриемки,мСтрока.НоваяЦена);
		мСтрокаПечати.Цена 						 = ?(НоваяЦена = 0,Цена,НоваяЦена);
		мСтрокаПечати.Печать 					 = Истина;
	КонецЦикла;
	
	мОбработка.ПолучитьФорму("Форма").Открыть();
	
КонецПроцедуры

Процедура ДалионУМ_ПечатьЦенников(ДанныеДляПечати)
	Перем ШаблонЦенника;
	
	//Оповещение = Новый ОписаниеОповещения("ДалионУМ_ПослеВыбораШаблона", ЭтаФорма, ДанныеДляПечати);
	ШаблонЦенника = ПредопределенноеЗначение("Справочник.ПечатныеФормы.ПустаяСсылка");
	Если ВвестиЗначение(ШаблонЦенника, "Выберите печатную форму ценника", Тип("СправочникСсылка.ПечатныеФормы")) Тогда			
		ДалионУМ_ПослеВыбораШаблона(ШаблонЦенника, ДанныеДляПечати);
	КонецЕсли; 
КонецПроцедуры

Процедура ДалионУМ_ПослеВыбораШаблона(ШаблонЦенника, ДанныеДляПечати) Экспорт
	
	Если ЗначениеЗаполнено(ШаблонЦенника) Тогда
		ТаблицаДляПечати = Новый ТаблицаЗначений;
		ПараметрыФормы = ДалионУМ_ДанныеДляПечати(ДанныеДляПечати, ШаблонЦенника, ТаблицаДляПечати);
		Если ПараметрыФормы <> Неопределено Тогда			
			Попытка						
				ФормаПечатьЦенников = ПолучитьФорму(ПараметрыФормы.ИмяФормыПечати, ПараметрыФормы);				
			Исключение
				ЗаписьЖурналаРегистрации("Ошибка получения формы ""ПараметрыФормы.ИмяФормыПечати""", УровеньЖурналаРегистрации.Ошибка, , "ВнешняяОбработка.КлеверенсСофтТерминалыСбораДанных.Обычная_ФормаЗагрузкиДанныхСТСД", "Причина: " + ОписаниеОшибки());
			КонецПопытки;						
			Если ПараметрыФормы.Свойство("ИмяВОбъектеФормы") Тогда
				Для каждого Стр из ТаблицаДляПечати Цикл
					ЗаполнитьЗначенияСвойств(ФормаПечатьЦенников.ОбработкаОбъект[ПараметрыФормы.ИмяВОбъектеФормы].Добавить(), Стр);
				КонецЦикла;	
			КонецЕсли;
			ФормаПечатьЦенников.ВладелецФормы = ЭтаФорма;
			ФормаПечатьЦенников.Открыть();
		КонецЕсли;
		
	КонецЕсли;
			
КонецПроцедуры

Функция ДалионУМ_ДанныеДляПечати(ДанныеДляПечати, Шаблон, ТаблицаДляПечати)
	
	Перем РезультатЗаполнения;
		
	//Возврат ПодготовитьСтруктуруПечати(План.Выгрузить().ВыгрузитьКолонку("Номенклатура"));
	ТаблицаДанных = ДанныеДляПечати.Скопировать();
	ТаблицаДанных.Колонки.Добавить("ХарактеристикиИспользуются", Новый ОписаниеТипов("Булево"));
	ТаблицаДанных.Колонки.Добавить("_Цена", Новый ОписаниеТипов("Число"));
		
	УчетПоХарактеристикам = Ложь; 
	Выполнить("УчетПоХарактеристикам = Константы.ИспользоватьХарактеристикиНоменклатуры.Получить()");
	
	Для Каждого СтрокаТаблицы Из ТаблицаДанных Цикл
		Если Не ТаблицаДанных.Колонки.Найти("ЦенаПечать") = Неопределено
			И ЗначениеЗаполнено(СтрокаТаблицы.ЦенаПечать) 
		Тогда
			СтрокаТаблицы._Цена = СтрокаТаблицы.ЦенаПечать;
		ИначеЕсли Не ТаблицаДанных.Колонки.Найти("Цена") = Неопределено
			И ЗначениеЗаполнено(СтрокаТаблицы.Цена) 
		Тогда
			СтрокаТаблицы._Цена = СтрокаТаблицы.Цена;
			Если Не ТаблицаДанных.Колонки.Найти("НоваяЦена") = Неопределено
				И ЗначениеЗаполнено(СтрокаТаблицы.НоваяЦена) Тогда
				СтрокаТаблицы._Цена = СтрокаТаблицы.НоваяЦена;
			ИначеЕсли Не ТаблицаДанных.Колонки.Найти("ЦенаПриемки") = Неопределено
				И ЗначениеЗаполнено(СтрокаТаблицы.ЦенаПриемки) Тогда
			     СтрокаТаблицы._Цена = СтрокаТаблицы.ЦенаПриемки;
			КонецЕсли;
		КонецЕсли;
		Если Не УчетПоХарактеристикам Тогда
			СтрокаТаблицы.ИмяХарактеристики = "";
		КонецЕсли;
		СтрокаТаблицы.ХарактеристикиИспользуются = ЗначениеЗаполнено(СтрокаТаблицы.ИмяХарактеристики);
	КонецЦикла;
		
	ТаблицаДляПечати = Новый ТаблицаЗначений;	
	ТаблицаДляПечати.Колонки.Добавить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	ТаблицаДляПечати.Колонки.Добавить("ХарактеристикаНоменклатуры", Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
	ТаблицаДляПечати.Колонки.Добавить("ЕдиницаИзмерения", Новый ОписаниеТипов("СправочникСсылка.ЕдиницыИзмерения"));
	ТаблицаДляПечати.Колонки.Добавить("ТипШтрихКода", Новый ОписаниеТипов("ПланВидовХарактеристикСсылка.ТипыШтрихкодов"));
	ТаблицаДляПечати.Колонки.Добавить("Штрихкод");
	ТаблицаДляПечати.Колонки.Добавить("Цена", Новый ОписаниеТипов("Число"));		
	ТаблицаДляПечати.Колонки.Добавить("Коэффициент", Новый ОписаниеТипов("Число"));		
	ТаблицаДляПечати.Колонки.Добавить("Макет", Новый ОписаниеТипов("СправочникСсылка.ПечатныеФормы"));
	ТаблицаДляПечати.Колонки.Добавить("Количество", Новый ОписаниеТипов("Число"));
	ТаблицаДляПечати.Колонки.Добавить("СрокГодности", Новый ОписаниеТипов("Дата"));
	ТаблицаДляПечати.Колонки.Добавить("ПредыдущаяЦена", Новый ОписаниеТипов("Число"));		
	ТаблицаДляПечати.Колонки.Добавить("ВнутреннийКодТовараПоставщика", Новый ОписаниеТипов("Число"));
	ТаблицаДляПечати.Колонки.Добавить("КоличествоТовараИзШК", Новый ОписаниеТипов("Число"));					
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
		|ВЫБРАТЬ *
		|ПОМЕСТИТЬ ВременнаяТаблица
		|ИЗ &ВнешнийИсточник КАК Таблица
		|ГДЕ Таблица.Флаг
		|;
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		//|	ИСТИНА КАК Выбран,
		|	Док.Номенклатура КАК Номенклатура,
		//|	Док.ХарактеристикиИспользуются КАК ХарактеристикиИспользуются,
		|	ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка) КАК ХарактеристикаНоменклатуры,
		|	ЕдиницыИзмерения.Ссылка КАК ЕдиницаИзмерения,
		|	ЕдиницыИзмерения.Коэффициент КАК Коэффициент,		
		|	Док._Цена КАК Цена,		
		|	ВЫРАЗИТЬ(Док.ШК КАК СТРОКА(200)) КАК Штрихкод,
		|	ВЫБОР КОГДА Док.Номенклатура.МакетЦенника = ЗНАЧЕНИЕ(Справочник.ПечатныеФормы.ПустаяСсылка) 
		|		ТОГДА &ШаблонПоУмолчанию
		|		ИНАЧЕ Док.Номенклатура.МакетЦенника
		|	КОНЕЦ КАК Макет,
		|	1 КАК Количество
		|ИЗ
		|	ВременнаяТаблица КАК Док
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ЕдиницыИзмерения КАК ЕдиницыИзмерения
		|			ПО Док.Номенклатура = ЕдиницыИзмерения.Владелец
		|";	
		
//		мШаблон = Справочники.ХранилищеШаблонов.НайтиПоРеквизиту("ТипШаблона", Перечисления.ТипыШаблонов.ЭтикеткаЦенник); 
	Запрос.УстановитьПараметр("ВнешнийИсточник", ТаблицаДанных);	
	Запрос.Параметры.Вставить("ШаблонПоУмолчанию", Шаблон);
	ТаблицаЗапроса = Запрос.Выполнить().Выгрузить();
	
	Для каждого Стр из ТаблицаЗапроса Цикл 
		ЗаполнитьЗначенияСвойств(ТаблицаДляПечати.Добавить(), Стр);
	КонецЦикла;	
	
	//мЗапрос.Текст = "ВЫБРАТЬ
	//			   |	ЦеныНоменклатуры.Цена КАК Цена,
	//			   |	ЦеныНоменклатуры.Упаковка
	//			   |ИЗ
	//			   |	РегистрСведений.ЦеныНоменклатуры.СрезПоследних(, Номенклатура = &Номенклатура И
	//			   |			ВидЦены = &ВидЦены И Характеристика = &Характеристика И Упаковка = &Упаковка) КАК ЦеныНоменклатуры";

	//мЗапрос.УстановитьПараметр("Номенклатура", 	мНоменклатура);
	//мЗапрос.УстановитьПараметр("ВидЦены", 		мВидЦены);
	//мЗапрос.УстановитьПараметр("Характеристика",мХарактеристика);
	//мЗапрос.УстановитьПараметр("Упаковка", 		мУпаковка);
	//
	//Выборка = мЗапрос.Выполнить().Выбрать();
	//
	//Если Выборка.Количество() = 0 Тогда
	//	мЗапрос.УстановитьПараметр("Упаковка", Справочники[ИмяСправочникаУпаковки].ПустаяСсылка());
	//	Выборка = мЗапрос.Выполнить().Выбрать();
	//КонецЕсли;
	СтруктураДействий = Новый Структура;
	//СтруктураДействий.Вставить("ЗаполнитьМагазин"               , Вычислить("ОбщегоНазначенияРТ.ОпределитьТекущийМагазин()"));
	//СтруктураДействий.Вставить("УстановитьРежим"                , "ПечатьЦенников");
	//СтруктураДействий.Вставить("ПоказыватьКолонкуКоличествоВДокументе", Ложь);
	//СтруктураДействий.Вставить("РежимПечатиИзОбработки", Ложь);
	СтруктураРезультат = Новый Структура;
	СтруктураРезультат.Вставить("СтруктураДействий", СтруктураДействий);
	СтруктураПараметры = Новый Структура();
	СтруктураПараметры.Вставить("АдресВХранилище", ПоместитьВоВременноеХранилище(СтруктураРезультат));
	СтруктураПараметры.Вставить("ИмяФормыПечати", "Обработка.ПечатьЦенниковЭтикеток.Форма");
	СтруктураПараметры.Вставить("ИмяВОбъектеФормы", "Товары");
	РезультатЗаполнения = СтруктураПараметры;

	Возврат РезультатЗаполнения;
	
КонецФункции

Процедура ШтрихМ_ПечатьЦенников(ДанныеДляПечати)
	ШаблонЦенника = ШтрихМ_ПолучитьШаблонЦенника();
	Если Не ЗначениеЗаполнено(ШаблонЦенника) 
		ИЛИ ШаблонЦенника = ПредопределенноеЗначение("Справочник.ТипыЦенников.ПустаяСсылка") Тогда
		Возврат;
	КонецЕсли;
	мОбработка = Обработки.ПечатьЦенников.Создать();		
	Для Каждого мСтрока Из ДанныеДляПечати Цикл
		Если Не мСтрока.Флаг Тогда
			Продолжить;			
		КонецЕсли;
		                                                                   
		мСтрокаПечати = мОбработка.Товары.Добавить();
		мСтрокаПечати.Номенклатура 				 = мСтрока.Номенклатура;    
		мСтрокаПечати.ХарактеристикаНоменклатуры = Справочники.ХарактеристикиНоменклатуры.НайтиПоНаименованию(мСтрока.ИмяХарактеристики,,, мСтрока.Номенклатура); //  Справочники.ХарактеристикиНоменклатуры.ПолучитьСсылку(Новый УникальныйИдентификатор(мСтрока.ИдХарактеристики));
		мСтрокаПечати.Единица 			 		 = Справочники.ЕдиницыИзмерения.НайтиПоНаименованию(мСтрока.ИдУпаковки,,, мСтрока.Номенклатура);		
		мСтрокаПечати.Количество 				 = 1;
		Цена = мСтрока.Цена;
		НоваяЦена = ?(мСтрока.НоваяЦена = 0,мСтрока.ЦенаПриемки,мСтрока.НоваяЦена);
		мСтрокаПечати.РозничнаяЦена 						 = ?(НоваяЦена = 0,Цена,НоваяЦена);
		мСтрокаПечати.Отметка 					 = Истина;
		мСтрокаПечати.Тип = ШаблонЦенника;
		мСтрокаПечати.ШтрихКод =  Справочники.ШтрихКоды.НайтиПоНаименованию(мСтрока.ШК,,мСтрока.Номенклатура);
	КонецЦикла;
	мОбработка.ТипЦенника = ШаблонЦенника;
	мОбработка.ПолучитьФорму("Форма").Открыть();
	
КонецПроцедуры

Функция ШтрихМ_ПолучитьШаблонЦенника()
	ШаблонЦенника = Неопределено;
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	НастройкиПользователей.Пользователь,
	|	НастройкиПользователей.Настройка,
	|	НастройкиПользователей.Значение
	|ИЗ
	|	РегистрСведений.НастройкиПользователей КАК НастройкиПользователей
	|ГДЕ
	|	НастройкиПользователей.Пользователь = &Пользователь
	|	И НастройкиПользователей.Настройка = ЗНАЧЕНИЕ(ПланВидовХарактеристик.НастройкиПользователей.ОсновнойЦенник)";
	Запрос.УстановитьПараметр("Пользователь", ПараметрыСеанса.глТекущийПользователь);
	тзРезультат = Запрос.Выполнить().Выгрузить();
	Если тзРезультат.Количество() > 0 Тогда
		ШаблонЦенника = тзРезультат[0].Значение;		 
	КонецЕсли;
	Если Не ЗначениеЗаполнено(ШаблонЦенника) 
		ИЛИ ШаблонЦенника = ПредопределенноеЗначение("Справочник.ТипыЦенников.ПустаяСсылка") Тогда		
		ШаблонЦенника = ПредопределенноеЗначение("Справочник.ТипыЦенников.ПустаяСсылка");
		ВвестиЗначение(ШаблонЦенника, "Выберите печатную форму ценника", Тип("СправочникСсылка.ТипыЦенников"))			 
	КонецЕсли;
	Возврат ШаблонЦенника;
КонецФункции

Процедура Астор_ПечатьЦенников(ДанныеДляПечати)
	_ГлКонтекст.ГлЯдро_ПечатьЦенников(ДанныеДляПечати);
КонецПроцедуры

#КонецОбласти
// --- Денвик

#КонецОбласти

#Область КомпонентаMobileSMARTS

#Область КомпонентаMobileSMARTS_Подключение

Функция КомЯдро_ПодключитьсяКСерверуSMARTS(IdBaseSMARTS = "", mXmlDoc = Неопределено)
	
	Если ЗначениеЗаполнено(IdBaseSMARTS) Тогда
		ID_ПодключаемойБазы = IdBaseSMARTS;
	Иначе
		ID_ПодключаемойБазы = ?(ТипЗнч(ПараметрыПодключенияMS) = Тип("Структура"), ПараметрыПодключенияMS.Ид, "");
	КонецЕсли;
	
	Если СтруктураПодключенияMS = Неопределено 
		 ИЛИ НЕ ЗначениеЗаполнено(СтруктураПодключенияMS.IdBaseSMARTS)
		 ИЛИ СтруктураПодключенияMS.IdBaseSMARTS <> ID_ПодключаемойБазы
		 ИЛИ Строка(СтруктураПодключенияMS.TerminalConnector) <> "COMОбъект" 
		 ИЛИ (mXmlDoc <> Неопределено И СтруктураПодключенияMS.SessionSMARTS = Неопределено)
		 ИЛИ НЕ СтруктураПодключенияMS.StorageConnector.ПроверитьСоединение() Тогда
		СтруктураПодключенияMS = КомЯдро_ПолучитьСтруктуруПодключенияБазыСМАРТС(ID_ПодключаемойБазы, mXmlDoc);
	КонецЕсли;
	
	// закомментировали, потому что при первом запуске обработки в конфигурации нет подключенной базы 
	// и в форме настройки подключения, методе "ПолучитьСписокБаз" вызывается данный метод и выбрасывает исключение
	Если СтруктураПодключенияMS = Неопределено Тогда
		ЕстьПодключение = Ложь;
	Иначе
		ЕстьПодключение = Строка(СтруктураПодключенияMS.TerminalConnector) = "COMОбъект";
	//	Если ЗначениеЗаполнено(СтруктураПодключенияMS.StorageConnector.ИдПодключеннойБазы) тогда
	//		ЕстьПодключение = СтруктураПодключенияMS.StorageConnector.ПроверитьСоединение();
	//	Иначе
	//		ЕстьПодключение = Ложь;
	//	КонецЕсли;
	КонецЕсли;	
	
	//Если НЕ ЕстьПодключение Тогда
	//	ВызватьИсключение "Отсутствует соединение с базой Mobile SMARTS";
	//Иначе
		Возврат ЕстьПодключение;
	//КонецЕсли;				
	
КонецФункции

Функция КомЯдро_ПолучитьСтруктуруПодключенияБазыСМАРТС(ID_ПодключаемойБазы, mXmlDoc)
	
	TerminalConnector = Неопределено;
	Попытка
		TerminalConnector = Новый COMОбъект("AddIn.Cl.TerminalConnector");
		КОМсоздан = Истина;
	Исключение
		КОМсоздан = Ложь;
	КонецПопытки;
	
	Если TerminalConnector = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	TerminalConnector.SetOneCVersion("v8");
	StorageConnector  = TerminalConnector.StorageConnector;
	
	Если mXmlDoc = Неопределено Тогда
		SessionSMARTS = Неопределено;
	Иначе
		SessionSMARTS = StorageConnector.FromXml(mXmlDoc);		
		ID_ПодключаемойБазы  = SessionSMARTS.ServerAppInstanceId;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ID_ПодключаемойБазы) Тогда 
		СписокБаз = Новый Массив;
		СписокБаз.Добавить(ID_ПодключаемойБазы);
		TerminalConnector.Подключить(СписокБаз,"");
	КонецЕсли;
	
	СтруктураПодключенияMSСМАРТС = Новый Структура;
	СтруктураПодключенияMSСМАРТС.Вставить("TerminalConnector", TerminalConnector);
	СтруктураПодключенияMSСМАРТС.Вставить("StorageConnector", StorageConnector);
	СтруктураПодключенияMSСМАРТС.Вставить("SessionSMARTS", SessionSMARTS);
	СтруктураПодключенияMSСМАРТС.Вставить("IdBaseSMARTS", ID_ПодключаемойБазы);
	
	Возврат СтруктураПодключенияMSСМАРТС;
	
КонецФункции

Функция КомЯдро_ПолучитьОшибку()
	ОписаниеОшибки = "";
	Ошибка = СтруктураПодключенияMS.TerminalConnector.ПолучитьОшибку(ОписаниеОшибки);
	Возврат ОписаниеОшибки;
КонецФункции

Функция КомЯдро_ПроверитьСоединениеССерверомSMARTS(ИдБазы = Неопределено, ИнициализироватьНастройки = Истина) Экспорт
	
	//ВОЗВРАТ ИСТИНА; // Временное решение
	Если ИдБазы = Неопределено Тогда
		ИдБазы = ПараметрыПодключенияMS.Ид;
	КонецЕсли;
		
	Если НЕ КомЯдро_ПодключитьсяКСерверуSMARTS(ИдБазы) Тогда
		Оповестить("СменаСтатуса","КоннекторMSСозданПроверяемДоступностьБазы");
		Возврат Ложь;
	КонецЕсли;	
	
	Если СтруктураПодключенияMS = Неопределено Тогда
		ЕстьПодключение = Ложь;
	Иначе
	
		Если ЗначениеЗаполнено(СтруктураПодключенияMS.StorageConnector.ИдПодключеннойБазы) тогда
			ЕстьПодключение = СтруктураПодключенияMS.StorageConnector.ПроверитьСоединение();
		Иначе
			ЕстьПодключение = Ложь;
		КонецЕсли;
	КонецЕсли;	
	
	Если ЕстьПодключение Тогда
		Если НЕ НастройкиИнициализированы 
			И ИнициализироватьНастройки Тогда
			ЛокЯдро_Инициализация(ИдБазы);
		КонецЕсли;
		Оповестить("СменаСтатуса","БезОшибок");
	Иначе
		НастройкиИнициализированы = Ложь;
		//Сообщить("База Mobile SMARTS недоступна");
		Оповестить("СменаСтатуса",Новый Структура("Статус,Параметр","РаботаССерверомБазаНедоступна",ИдБазы)); 
	КонецЕсли;
		
	Возврат ЕстьПодключение;
	
КонецФункции

Функция ЛокЯдро_ПроверитьСозданиеКОМОбъекта(Компонента = Неопределено) Экспорт
	
	Если Компонента = Неопределено Тогда
		Компонента = ЛокЯдро_ПолучитьДанныеИзХранилища1С("Cleverence_РасположениеКомпоненты");
	КонецЕсли;
	
	Если Компонента = "НаКлиенте" Тогда
		Возврат КОМсоздан;			
	ИначеЕсли Компонента = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	СтруктураВызова = Новый Структура;
	СтруктураВызова.Вставить("ТипМетода", "Функция");
	СтруктураВызова.Вставить("ИмяМетода", "ПроверитьСозданиеКОМОбъекта");
	
	Возврат  Транзит_ВызватьГлобальныйМетодНаКлиенте(СтруктураВызова);
	
КонецФункции

#КонецОбласти

#Область КомпонентаMobileSMARTS_БазыSMARTS

Функция КомЯдро_ПолучитьСписокБазНаСервереSMARTS()
	
	Если НЕ КомЯдро_ПодключитьсяКСерверуSMARTS() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Результат = Новый ТаблицаЗначений;
	Результат.Колонки.Добавить("Ид");
	Результат.Колонки.Добавить("Имя");
	Результат.Колонки.Добавить("Комментарий");
	Результат.Колонки.Добавить("СтрокаПодключения");
	Результат.Колонки.Добавить("РабочийКаталог");
	Результат.Колонки.Добавить("ИдПриложения");
	Результат.Колонки.Добавить("ИдОсновногоПриложения");
	Результат.Колонки.Добавить("ИмяПриложения");
	Результат.Колонки.Добавить("УровеньПриложения");
	Результат.Колонки.Добавить("ПапкаОбмена");
	Результат.Колонки.Добавить("РаботаСУстройствомНапрямую");
	Результат.Колонки.Добавить("РаботаСКаталогом");
	Результат.Колонки.Добавить("РаботаССервером");
	Результат.Колонки.Добавить("РаботаСЛокальнымСервером");
	Результат.Колонки.Добавить("РаботаСУдаленнымСервером");
	Результат.Колонки.Добавить("ИмяИнтеграционнойОбработки");
	Результат.Колонки.Добавить("ПутьИнтеграционнойОбработки");

	СписокБазНаСервере = СтруктураПодключенияMS.TerminalConnector.ПолучитьСписокБазСМАРТС("");
	Для Индекс = 0 По СписокБазНаСервере.Количество - 1 Цикл
		ВыбраннаяБазаSMARTS = СписокБазНаСервере.Элемент(Индекс);
		НастройкиБазыСМАРТС = ВыбраннаяБазаSMARTS.ПолучитьНастройки();   	
		
		СтрокаСписка = Результат.Добавить();
		СтрокаСписка.Ид                = ВыбраннаяБазаSMARTS.Ид;
		СтрокаСписка.Имя               = ВыбраннаяБазаSMARTS.Имя;
		СтрокаСписка.Комментарий       = ВыбраннаяБазаSMARTS.Комментарий;
		СтрокаСписка.СтрокаПодключения = ВыбраннаяБазаSMARTS.СтрокаПодключения;
		СтрокаСписка.РабочийКаталог    = ВыбраннаяБазаSMARTS.РабочийКаталог;
		СтрокаСписка.ИдПриложения      = ВыбраннаяБазаSMARTS.Приложение.Id;		
		СтрокаСписка.ИмяПриложения     = ВыбраннаяБазаSMARTS.Приложение.Name;
		СтрокаСписка.УровеньПриложения = ВыбраннаяБазаSMARTS.Приложение.Level;
		СтрокаСписка.ИдОсновногоПриложения	 	= ВыбраннаяБазаSMARTS.Приложение.ParentId;
		СтрокаСписка.РаботаСУстройствомНапрямую = НастройкиБазыСМАРТС.РаботаСУстройствомНапрямую;
		СтрокаСписка.РаботаСКаталогом           = НастройкиБазыСМАРТС.РаботаСКаталогом;
		СтрокаСписка.РаботаССервером            = НастройкиБазыСМАРТС.РаботаССервером;
		СтрокаСписка.РаботаСЛокальнымСервером   = НастройкиБазыСМАРТС.РаботаСЛокальнымСервером;
		СтрокаСписка.РаботаСУдаленнымСервером   = НастройкиБазыСМАРТС.РаботаСУдаленнымСервером;
		СтрокаСписка.ПапкаОбмена = НастройкиБазыСМАРТС.ПолучитьТекущуюПапкуОбмена();
		
		Попытка // Если нет связи с удаленной базой смартс, то платформа выдает ошибку
			ИмяИнтеграционнойОбработки 	= НастройкиБазыСМАРТС.Получить("ИмяИнтеграционнойОбработкиКонфигурации1С");
			ПутьИнтеграционнойОбработки = НастройкиБазыСМАРТС.Получить("ПутьИнтеграционнойОбработкиКонфигурации1С");
		Исключение
			ИмяИнтеграционнойОбработки 	= Неопределено;
			ПутьИнтеграционнойОбработки = Неопределено;
		КонецПопытки;
		
		СтрокаСписка.ИмяИнтеграционнойОбработки  = ?(ИмяИнтеграционнойОбработки = Неопределено,"ИнтеграционнаяОбработка.epf",ИмяИнтеграционнойОбработки);
		СтрокаСписка.ПутьИнтеграционнойОбработки = ?(ИмяИнтеграционнойОбработки = Неопределено,"\Обработки 1С\Обработки интеграции\",ПутьИнтеграционнойОбработки);
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция КомЯдро_ПолучитьБазуНаСервереSMARTS(ИдентификаторБазы = "")
	
	Если ИдентификаторБазы = "" Тогда
		БазаSMARTS = СтруктураПодключенияMS.TerminalConnector.ПолучитьБазуСМАРТСПоИД(СтруктураПодключенияMS.IdBaseSMARTS);
	Иначе
	    БазаSMARTS = СтруктураПодключенияMS.TerminalConnector.ПолучитьБазуСМАРТСПоИД(ИдентификаторБазы);
	КонецЕсли;
	
	Возврат БазаSMARTS;
	
КонецФункции

#КонецОбласти

#Область КомпонентаMobileSMARTS_НастройкиSMARTS

Функция КомЯдро_ПолучитьНастройкиНаСервереSMARTS(ИдентификаторБазы = Неопределено)
	
	НастройкиБазыSMARTS = Неопределено;
	Если ИдентификаторБазы = Неопределено Тогда 
		БазаSMARTS = КомЯдро_ПолучитьБазуНаСервереSMARTS(СтруктураПодключенияMS.IdBaseSMARTS);
	Иначе
		БазаSMARTS = КомЯдро_ПолучитьБазуНаСервереSMARTS(ИдентификаторБазы);
	КонецЕсли;
	Если БазаSMARTS <> Неопределено Тогда
		НастройкиБазыSMARTS = БазаSMARTS.ПолучитьНастройки();
	КонецЕсли;
	
	Возврат НастройкиБазыSMARTS;
	
КонецФункции

Функция КомЯдро_ЗаполнитьНастройкиSMARTS(СтруктураНастроек, УзловыеНастройки, ID_Узла = "")
	
	Если НЕ КомЯдро_ПодключитьсяКСерверуSMARTS() Тогда
		Возврат СтруктураНастроек;
	КонецЕсли;
	
	НастройкиБазыSMARTS = КомЯдро_ПолучитьНастройкиНаСервереSMARTS();
	Если НастройкиБазыSMARTS = Неопределено Тогда
		Возврат СтруктураНастроек;
	КонецЕсли;
	
	Для Каждого Настройка Из СтруктураНастроек Цикл
		ИтоговыйКлючНастройки = Настройка.Ключ;
		Если УзловыеНастройки.Найти(Настройка.Ключ) <> Неопределено Тогда
			ИтоговыйКлючНастройки = ИтоговыйКлючНастройки + ?(ID_Узла = "", "", "_"+ ID_Узла);
		КонецЕсли;
		ЗначениеНастройки = НастройкиБазыSMARTS.Получить(ИтоговыйКлючНастройки);
		// Для совместимости со старыми настройками
		Если ЗначениеНастройки = "Да" Тогда
			ЗначениеНастройки = Истина;
		ИначеЕсли ЗначениеНастройки = "Нет" Тогда
			ЗначениеНастройки = Ложь;	
		КонецЕсли;
		СтруктураНастроек.Вставить(Настройка.Ключ, ?(ЗначениеНастройки = Неопределено, Ложь, ЗначениеНастройки));
	КонецЦикла;
	
	Возврат СтруктураНастроек;
	
КонецФункции

Процедура КомЯдро_ЗаписатьНастройкиSMARTS(СтруктураНастроек, УзловыеНастройки, ID_Узла = "")
	
	Если НЕ КомЯдро_ПодключитьсяКСерверуSMARTS() Тогда
		Возврат;
	КонецЕсли;
	
	БазаSMARTS = КомЯдро_ПолучитьБазуНаСервереSMARTS(СтруктураПодключенияMS.IdBaseSMARTS); 
	Если БазаSMARTS = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	НастройкиБазыSMARTS = БазаSMARTS.ПолучитьНастройки();
	Если НастройкиБазыSMARTS = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого Настройка Из СтруктураНастроек Цикл
		ИтоговыйКлючНастройки = Настройка.Ключ;
		Если УзловыеНастройки.Найти(Настройка.Ключ) <> Неопределено Тогда
			ИтоговыйКлючНастройки = ИтоговыйКлючНастройки + ?(ID_Узла = "", "", "_"+ ID_Узла);
		КонецЕсли;
		НастройкиБазыSMARTS.Настройка(ИтоговыйКлючНастройки).Значение = Настройка.Значение;
	КонецЦикла;
	
	БазаSMARTS.СохранитьНастройки(НастройкиБазыSMARTS);
	
	StorageConnector 	= СтруктураПодключенияMS.StorageConnector;
	ConnectorID 		= "OneC_Connector";
	
	Попытка
		StorageConnector.DeinitializeConnector(ConnectorID);	
	Исключение	
	КонецПопытки; 	
	
	// StorageConnector явно можно не инициализировать, т.к. это долго ( ~8 сек),
	// а количество интерактивных сохранений настроек может быть много
	// Данная инициализация будет выполняться при запросе с терминала
	
	//StorageConnector.InitializeConnector(ConnectorID);	
	
КонецПроцедуры

Процедура КомЯдро_УдалитьНастройкиSMARTS(СтруктураНастроек, УзловыеНастройки, ID_Узла = "")
	
	Если НЕ КомЯдро_ПодключитьсяКСерверуSMARTS() Тогда
		Возврат;
	КонецЕсли;
	
	БазаSMARTS = КомЯдро_ПолучитьБазуНаСервереSMARTS(СтруктураПодключенияMS.IdBaseSMARTS); 
	Если БазаSMARTS = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	НастройкиБазыSMARTS = БазаSMARTS.ПолучитьНастройки();
	Если НастройкиБазыSMARTS = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого Настройка Из СтруктураНастроек Цикл
		ИтоговыйКлючНастройки = Настройка.Ключ;
		Если УзловыеНастройки.Найти(Настройка.Ключ) <> Неопределено Тогда
			ИтоговыйКлючНастройки = ИтоговыйКлючНастройки + ?(ID_Узла = "", "", "_"+ ID_Узла);
		КонецЕсли;
		НастройкиБазыSMARTS.Удалить(ИтоговыйКлючНастройки);
	КонецЦикла;
	
	БазаSMARTS.СохранитьНастройки(НастройкиБазыSMARTS);
	
КонецПроцедуры

#КонецОбласти

#Область КомпонентаMobileSMARTS_EnironmentSMARTS

Функция КомЯдро_ПолучитьМетаданныеДокументовMS()
	
	Если НЕ КомЯдро_ПодключитьсяКСерверуSMARTS() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если НЕ СтруктураПодключенияMS.Свойство("Окружение") ИЛИ СтруктураПодключенияMS.Окружение = Неопределено Тогда
		СтруктураПодключенияMS.Вставить("Окружение", СтруктураПодключенияMS.TerminalConnector.GetEnvironment());
	КонецЕсли;
	
	МетаданныеДокументовMS = Новый Структура;
	
	СписокОбязательныхПолей = Новый СписокЗначений;
	СписокОбязательныхПолей.Добавить("Ид", "Идентификатор");
	СписокОбязательныхПолей.Добавить("СозданНаТСД", "Создан на ТСД");
	СписокОбязательныхПолей.Добавить("Имя", "Имя");
	СписокОбязательныхПолей.Добавить("Назначение", "Назначение");
	СписокОбязательныхПолей.Добавить("ДатаСоздания", "Дата создания");
	СписокОбязательныхПолей.Добавить("ИмяТипаДокумента", "Имя типа документа");
	СписокОбязательныхПолей.Добавить("ИдСклада", "Идентификатор склада");
	СписокОбязательныхПолей.Добавить("Штрихкод", "Штрихкод");
	СписокОбязательныхПолей.Добавить("Приоритет", "Приоритет");
	СписокОбязательныхПолей.Добавить("Описание", "Описание");
	СписокОбязательныхПолей.Добавить("ВыдаватьПоШтрихкоду", "Выдавать по штрихкоду");
	СписокОбязательныхПолей.Добавить("ИсполняемыйНаСервере", "Исполняемый на сервере");
	СписокОбязательныхПолей.Добавить("Завершен", "Завершен");
	СписокОбязательныхПолей.Добавить("ВОбработке", "В обработке");
	СписокОбязательныхПолей.Добавить("Изменен", "Изменен");
	СписокОбязательныхПолей.Добавить("ИдПользователя", "Идентификатор пользователя");
	
	СписокОбязательныхПолейТЧ = Новый СписокЗначений;
	СписокОбязательныхПолейТЧ.Добавить("ИдТовара", "Идентификатор номенклатуры");
	СписокОбязательныхПолейТЧ.Добавить("ИдУпаковки", "Идентификатор упаковки");
	СписокОбязательныхПолейТЧ.Добавить("КоличествоПлан", "Количество (План)");
	СписокОбязательныхПолейТЧ.Добавить("КоличествоФакт", "Количество (Факт)");
	СписокОбязательныхПолейТЧ.Добавить("ИдПервогоМеста", "Ид первого места");
	СписокОбязательныхПолейТЧ.Добавить("ИдВторогоМеста", "Ид второго места");
	СписокОбязательныхПолейТЧ.Добавить("ШтрихкодПервогоМеста", "Штрихкод первого места");
	СписокОбязательныхПолейТЧ.Добавить("ШтрихкодВторогоМеста", "Штрихкод второго места");
	СписокОбязательныхПолейТЧ.Добавить("КодЕдиницыХранения", "Код единицы хранения");
	СписокОбязательныхПолейТЧ.Добавить("ДатаРегистрации", "Дата регистрации");
	СписокОбязательныхПолейТЧ.Добавить("СрокГодности", "Срок годности");
	СписокОбязательныхПолейТЧ.Добавить("Переполнение", "Переполнение");
	СписокОбязательныхПолейТЧ.Добавить("Недобор", "Недобор");
	СписокОбязательныхПолейТЧ.Добавить("ЕстьНедоборИлиПереполнение", "Есть недобор или переполнение");
	СписокОбязательныхПолейТЧ.Добавить("Остаток", "Остаток");
	//СписокОбязательныхПолейТЧ.Добавить("СвязаннаяСтрока", "Связанная строка");
	СписокОбязательныхПолейТЧ.Добавить("BindedLine", "Связанная строка");
	
	РеквизитыСерии = Новый СписокЗначений;
	РеквизитыСерии.Добавить("ИдСерии", "Идентификатор Серии");
	РеквизитыСерии.Добавить("ИмяСерии", "Имя серии");
	РеквизитыСерии.Добавить("ДатаСерии", "Дата серии");
	РеквизитыСерии.Добавить("НомерСерии", "Номер серии");
	//РеквизитыСерии.Добавить("СерияДополнительно", "Дополнительно");
	РеквизитыСерии.Добавить("ИдТовара", "Идентификатор Номенклатуры");
	РеквизитыСерии.Добавить("КоличествоФакт", "Количество (Факт)");
	РеквизитыСерии.Добавить("Характеристика", "Характеристика");
	
	РеквизитыСерийныеНомера = Новый СписокЗначений;
	РеквизитыСерийныеНомера.Добавить("СН", "Серийный номер");
	РеквизитыСерийныеНомера.Добавить("ИдСерии", "Идентификатор Серии");
	РеквизитыСерийныеНомера.Добавить("ИдТовара", "Идентификатор Номенклатуры");
	РеквизитыСерийныеНомера.Добавить("КоличествоФакт", "Количество (факт)");
	РеквизитыСерийныеНомера.Добавить("Характеристика", "Характеристика");
	
	Для Каждого ТипДокумента из СтруктураПодключенияMS.Окружение.DocumentTypes Цикл
		
		Если ТипДокумента.Virtual ИЛИ ТипДокумента.RemoveAfterFinish Тогда    //  Виртуальный, УдалятьСразуПослеЗавершения	
			Продолжить;
		КонецЕсли;
		
		СтруктураДокумента = Новый Структура();
		СтруктураДокумента.Вставить("Имя", ТипДокумента.Name);
		СтруктураДокумента.Вставить("Синоним", ТипДокумента.Alias);
		// реквизиты документа
		СписокРеквизитов = КомЯдро_ПолучитьСписокРеквизитовСущностиMS(ТипДокумента.Fields, СписокОбязательныхПолей);
		СтруктураДокумента.Вставить("Реквизиты", СписокРеквизитов);
		// реквизиты табличной части
		СписокРеквизитов = КомЯдро_ПолучитьСписокРеквизитовСущностиMS(ТипДокумента.Columns, СписокОбязательныхПолейТЧ);
		СтруктураДокумента.Вставить("РеквизитыТЧ", СписокРеквизитов);
		// серии и серийные номера
		СтруктураДокумента.Вставить("РеквизитыСерии", РеквизитыСерии);
		СтруктураДокумента.Вставить("РеквизитыСерийныеНомера", РеквизитыСерийныеНомера);
		
		// + ZHKN 12.09.2017
		// Дополнительные таблицы
		СписокДополнительныхТаблиц = Новый СписокЗначений();
			
		Для ИндексТаблицы = 0 По ТипДокумента.Tables.Count-1 Цикл 
			ДопТаблица = ТипДокумента.Tables.Item(ИндексТаблицы); 	
			СписокПолейДопТаблицы = КомЯдро_ПолучитьСписокРеквизитовСущностиMS(ДопТаблица.Fields);
			СписокДополнительныхТаблиц.Добавить(СписокПолейДопТаблицы, ДопТаблица.Name);
		КонецЦикла;
									
		СтруктураДокумента.Вставить("ДополнительныеТаблицы", СписокДополнительныхТаблиц);									
		// - ZHKN 12.09.2017
		
		МетаданныеДокументовMS.Вставить(ТипДокумента.Name, СтруктураДокумента);
		
	КонецЦикла; 
	
	Возврат МетаданныеДокументовMS;
	
КонецФункции

Функция КомЯдро_ПолучитьСписокРеквизитовСущностиMS(СущностьMS, ДополнительныйСписок = Неопределено)
	
	СписокРеквизитов = Новый СписокЗначений;
	Для Индекс = 0 По СущностьMS.Количество - 1 Цикл
		ДанныеРеквизита = СущностьMS.Элемент(Индекс);
		Если НЕ ДанныеРеквизита.ReadOnly Тогда
			СписокРеквизитов.Добавить(ДанныеРеквизита.ИмяПоля, ДанныеРеквизита.ИмяПоля);
		КонецЕсли;
	КонецЦикла;
	
	Если ДополнительныйСписок <> Неопределено Тогда
		Для Каждого ДополнительныйЭлемент Из ДополнительныйСписок Цикл
			СписокРеквизитов.Добавить(ДополнительныйЭлемент.Значение, ДополнительныйЭлемент.Значение);
		КонецЦикла;
	КонецЕсли;
	
	СписокРеквизитов.СортироватьПоЗначению();
	
	Возврат СписокРеквизитов;
	
КонецФункции

Процедура КомЯдро_ОбновитьШаблоныВесовогоТовараMS(ТаблицаШаблонов)
	
	Если НЕ КомЯдро_ПодключитьсяКСерверуSMARTS() Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ СтруктураПодключенияMS.Свойство("Окружение") ИЛИ СтруктураПодключенияMS.Окружение = Неопределено Тогда
		СтруктураПодключенияMS.Вставить("Окружение", СтруктураПодключенияMS.TerminalConnector.GetEnvironment());
	КонецЕсли;
	
	КоллекцияШаблонов = СтруктураПодключенияMS.Окружение.ProductSchema.CommonTemplates;
	
	// Удаление существующих шаблонов
	КоличествоШаблоновКУдалению = КоллекцияШаблонов.Количество;
	Для Счетчик = -(КоличествоШаблоновКУдалению-1) По 0 Цикл
		ТекущийШаблон = КоллекцияШаблонов.Элемент(-Счетчик);
		Если Найти(ТекущийШаблон, "OneC:1") > 0 Тогда
			КоллекцияШаблонов.Удалить(ТекущийШаблон);
		КонецЕсли;
	КонецЦикла;
	
	// Добавление новых шаблонов
	Для Каждого Шаблон из ТаблицаШаблонов Цикл
		ЦелаяЧасть = Шаблон.ЦелаяЧасть - СтрДлина(Шаблон.Префикс);
		Если Шаблон.ПрефиксВключенВКод Тогда
			КоллекцияШаблонов.Добавить("{Barcode:@" + Шаблон.Префикс + ".{" + Шаблон.ДлинаКодаВесовогоТовара + "}}{Quantity:" + ЦелаяЧасть + "." + Шаблон.ДробнаяЧасть + "}{OneC:1}");
		Иначе
			КоллекцияШаблонов.Добавить(Шаблон.Префикс + "{Barcode:" + Шаблон.ДлинаКодаВесовогоТовара + "}{Quantity:" + ЦелаяЧасть + "." + Шаблон.ДробнаяЧасть + "}{OneC:1}");
		КонецЕсли;
	КонецЦикла;
	
	СтруктураПодключенияMS.TerminalConnector.SetEnvironment(СтруктураПодключенияMS.Окружение);
	
КонецПроцедуры

Функция КомЯдро_ПолучитьПользователейMS()
	
	Если НЕ КомЯдро_ПодключитьсяКСерверуSMARTS() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если НЕ СтруктураПодключенияMS.Свойство("Окружение") ИЛИ СтруктураПодключенияMS.Окружение = Неопределено Тогда
		СтруктураПодключенияMS.Вставить("Окружение", СтруктураПодключенияMS.TerminalConnector.GetEnvironment());
	КонецЕсли;
	
	СписокПользователейMS = Новый СписокЗначений;
	
	СписокПользователейMS.Добавить("Выгружать всем;Выгружать всем"); 	
	СписокПользователейMS.Добавить("Спрашивать при выгрузке;Спрашивать при выгрузке");	
	
	Для Инд = 0 По СтруктураПодключенияMS.Окружение.Users.count - 1 Цикл
		ТекущийПользователь = СтруктураПодключенияMS.Окружение.Users.Item(Инд);
		СписокПользователейMS.Добавить(ТекущийПользователь.Id + ";" + ТекущийПользователь.Name, ТекущийПользователь.GroupId + ";" + ТекущийПользователь.GroupName);
	КонецЦикла;	
	
	ПользователиMS = Новый ДеревоЗначений;
	ПользователиMS.Колонки.Добавить("Выгружать", 			Новый ОписаниеТипов("Булево"), "Выгружать");
	ПользователиMS.Колонки.Добавить("ГруппаПользователь", 	Новый ОписаниеТипов("Строка"), "Группа/пользователь");
	ПользователиMS.Колонки.Добавить("ИдГруппыПользователя", Новый ОписаниеТипов("Строка"), "Ид группы/пользователя");	
	
	Для Каждого Пользователь из СписокПользователейMS Цикл
		
		ИдИИмяПользователя 	= ЛокЯдро_РазложитьСтрокуВМассивПодстрок(Пользователь.Значение, 		";");
		ИдИИмяГруппы 		= ЛокЯдро_РазложитьСтрокуВМассивПодстрок(Пользователь.Представление, ";");
		
		Если ИдИИмяГруппы.Количество() >= 2 Тогда
			ИдГруппы  	= ИдИИмяГруппы[0];
			ИмяГруппы 	= ИдИИмяГруппы[1];			
		Иначе
			ИдГруппы 	= Неопределено;
			ИмяГруппы 	= Неопределено;			
		КонецЕсли;	
		
		ИдПользователя  = ИдИИмяПользователя[0];
		ИмяПользователя = ИдИИмяПользователя[1];		
		
		// Если у элемента нет группы, значит, элемент сам является группой, добавляем его в корень дерева пользователей MS
		Если ИдГруппы = Неопределено Тогда
			
			СтрокаДерева 						= ПользователиMS.Строки.Добавить();
			СтрокаДерева.ИдГруппыПользователя 	= ИдПользователя;
			СтрокаДерева.ГруппаПользователь 	= ИмяПользователя;					
			
		Иначе	
			
			// иначе - ищем группу в корне дерева
			СтрокаПоискаГруппы = ПользователиMS.Строки.Найти(ИдГруппы, "ИдГруппыПользователя");			
			
			// если не нашли, добавляем группу в корень дерева, а в группу - пользователя
			Если СтрокаПоискаГруппы = Неопределено Тогда
				
				СтрокаГруппы 						= ПользователиMS.Строки.Добавить();
				СтрокаГруппы.ИдГруппыПользователя 	= ИдГруппы;
				СтрокаГруппы.ГруппаПользователь 	= ИмяГруппы;
				
				СтрокаПользователя 						= СтрокаГруппы.Строки.Добавить();
				СтрокаПользователя.ИдГруппыПользователя = ИдПользователя;
				СтрокаПользователя.ГруппаПользователь 	= ИмяПользователя;			
				
			Иначе
				
				// иначе - добавляем в найденную группу пользователя
				СтрокаДерева 						= СтрокаПоискаГруппы.Строки.Добавить();
				СтрокаДерева.ИдГруппыПользователя 	= ИдПользователя;
				СтрокаДерева.ГруппаПользователь 	= ИмяПользователя;			
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;	
	
	Возврат ПользователиMS;
	
КонецФункции

#КонецОбласти

#Область КомпонентаMobileSMARTS_ДокументыSMARTS

Функция КомЯдро_СформироватьНовыйДокументSMARTS(ДанныеДокумента, НазначенныйПользователь = "")
	
	ДокументSMARTS = Новый COMОбъект("Cleverence.Warehouse.Document");
	
	Для Каждого РеквизитДокумента Из ДанныеДокумента.ШапкаДокумента Цикл
		Попытка
			ДокументSMARTS.SetField(РеквизитДокумента.Ключ, РеквизитДокумента.Значение);
		Исключение
		КонецПопытки;
	КонецЦикла;
	
	Если НазначенныйПользователь <> "" Тогда 
		ДокументSMARTS.SetField("Назначение", НазначенныйПользователь);
		ДокументSMARTS.SetField("Ид",ДокументSMARTS.Id+"#"+СтрЗаменить(НазначенныйПользователь,"|",""))
	КонецЕсли;

	Если ДанныеДокумента.Свойство("ТабличныеЧасти") И ДанныеДокумента.ТабличныеЧасти.Количество() > 0 Тогда
		Для Каждого ТабличнаяЧасть Из ДанныеДокумента.ТабличныеЧасти Цикл
			Если КомЯдро_ЭтоОсновнаяТаблица(ТабличнаяЧасть.Ключ) Тогда
				Для каждого СтрокаТЧ Из ТабличнаяЧасть.Значение Цикл												
					СтрокаДокументаSMARTS = Новый COMОбъект("Cleverence.Warehouse.DocumentItem");
					Для Каждого РеквизитСтроки Из СтрокаТЧ Цикл
						Попытка
							СтрокаДокументаSMARTS.SetField(РеквизитСтроки.Ключ, РеквизитСтроки.Значение);
						Исключение
						КонецПопытки;
					КонецЦикла;
					
					ДокументSMARTS[ТабличнаяЧасть.Ключ].Добавить(СтрокаДокументаSMARTS);					
				КонецЦикла; 
			Иначе
				ДопТаблицаSMARTS = Новый COMОбъект("Cleverence.Warehouse.Table");		
				ДопТаблицаSMARTS.Name = ТабличнаяЧасть.Ключ;
				
				Для каждого СтрокаТЧ Из ТабличнаяЧасть.Значение Цикл
					Row = Новый COMОбъект("Cleverence.Warehouse.Row");
					Для Каждого РеквизитСтроки Из СтрокаТЧ Цикл
						Попытка
							Row.SetField(РеквизитСтроки.Ключ, РеквизитСтроки.Значение);
						Исключение
						КонецПопытки;
					КонецЦикла;
					ДопТаблицаSMARTS.Rows.Add(Row);
				КонецЦикла;
				ДокументSMARTS.Tables.Add(ДопТаблицаSMARTS);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат ДокументSMARTS;
	
КонецФункции

Функция КомЯдро_ЭтоОсновнаяТаблица(ИмяТаблицы) 
	
	ОсновныеТЧ = Новый Массив;
	ОсновныеТЧ.Добавить("СтрокиПлан");
	ОсновныеТЧ.Добавить("СтрокиФакт");
	ОсновныеТЧ.Добавить("СерииПлан");
	ОсновныеТЧ.Добавить("СерииФакт");
	ОсновныеТЧ.Добавить("СерийныеНомераПлан");
	ОсновныеТЧ.Добавить("СерийныеНомераФакт");
	Если ОсновныеТЧ.Найти(ИмяТаблицы) <> Неопределено Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
КонецФункции

Процедура КомЯдро_ЗаписатьДокументВБазуSMARTS(ДокументSMARTS, ID_БазыSMARTS = "", mXmlDoc = Неопределено)
	
	Если НЕ КомЯдро_ПодключитьсяКСерверуSMARTS(ID_БазыSMARTS, mXmlDoc) Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураПодключенияMS.StorageConnector.SetDocument(ДокументSMARTS);
	
КонецПроцедуры

Функция КомЯдро_ПолучитьСписокДокументовНаСервереSMARTS(ТаблицаДокументов, ID_БазыSMARTS = "")
	
	Если НЕ КомЯдро_ПодключитьсяКСерверуSMARTS(ID_БазыSMARTS) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	// заполняем таблицу
	СписокДокументовSMARTS = СтруктураПодключенияMS.TerminalConnector.ПолучитьДокументы(Неопределено);
	Для ИндексДокумента = 0 По СписокДокументовSMARTS.Количество - 1 Цикл
		ТекущаяСтрокаТаблицы = ТаблицаДокументов.Добавить();
		ЗаполнитьЗначенияСвойств(ТекущаяСтрокаТаблицы, СписокДокументовSMARTS.Элемент(ИндексДокумента));
		ТекущаяСтрокаТаблицы.СтрокиПланКоличество = СписокДокументовSMARTS.Элемент(ИндексДокумента).СтрокиПлан.Количество;
		ТекущаяСтрокаТаблицы.СтрокиФактКоличество = СписокДокументовSMARTS.Элемент(ИндексДокумента).СтрокиФакт.Количество;
		// убрать, когда все поля из платформы можно будет получать по ключу - []
		ТекущаяСтрокаТаблицы.НастройкаБизнесПроцесса 			= СписокДокументовSMARTS.Элемент(ИндексДокумента).ПолучитьПоле("НастройкаБизнесПроцесса");
		ТекущаяСтрокаТаблицы.ПредставлениеИмениДокумента 	= СписокДокументовSMARTS.Элемент(ИндексДокумента).ПолучитьПоле("ПредставлениеИмениДокумента");
		ТекущаяСтрокаТаблицы.ИдИсходныхДокументов 			= СписокДокументовSMARTS.Элемент(ИндексДокумента).ПолучитьПоле("ИдИсходныхДокументов");
	КонецЦикла;
	
	Возврат ТаблицаДокументов;
	
КонецФункции

Функция КомЯдро_ПолучитьДанныеДокументаНаСервереSMARTS(ID_Документа, СтруктураДокументаMS, ID_БазыSMARTS = "",ФильтрТЧПоИдДокумента = Неопределено)
	
	Если НЕ КомЯдро_ПодключитьсяКСерверуSMARTS(ID_БазыSMARTS) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ДокументSMARTS = СтруктураПодключенияMS.StorageConnector.ПолучитьДокумент(ID_Документа);
	
	ДанныеДокументаMS = Новый Структура;
	
	// Шапка
	РеквизитыШапки = Новый Структура;
	Для Каждого РеквизитДокумента Из СтруктураДокументаMS.Реквизиты Цикл
		Попытка
			РеквизитыШапки.Вставить(РеквизитДокумента.Значение, ДокументSMARTS.GetField(РеквизитДокумента.Значение));
		Исключение
			Сообщить("Реквизит с именем [" + РеквизитДокумента.Значение + "] отсутствует в шапке документа");
		КонецПопытки; 		
	КонецЦикла;
	ДанныеДокументаMS.Вставить("ШапкаДокумента", РеквизитыШапки);
	
	// Подготовка табличных частей
	ТабличнаяЧастьФакт = Новый ТаблицаЗначений;
	ТабличнаяЧастьПлан = Новый ТаблицаЗначений;
	ТабличнаяЧастьСовмещенные = Новый ТаблицаЗначений;
	Для Каждого РеквизитТЧ Из СтруктураДокументаMS.РеквизитыТЧ Цикл
		ТабличнаяЧастьФакт.Колонки.Добавить(РеквизитТЧ.Значение);
		ТабличнаяЧастьПлан.Колонки.Добавить(РеквизитТЧ.Значение);
	КонецЦикла;
	
	Для Каждого РеквизитСерии Из СтруктураДокументаMS.РеквизитыСерии Цикл
		// данное поле будет добавлено при заполнении вычислимых полей
		Если Найти(ВРег(СокрЛП("Характеристика")), ВРег(СокрЛП(РеквизитСерии.Значение))) Тогда
			Продолжить;
		КонецЕсли;	
		Если ТабличнаяЧастьФакт.Колонки.Найти(РеквизитСерии.Значение) = Неопределено Тогда
			ТабличнаяЧастьФакт.Колонки.Добавить(РеквизитСерии.Значение);
		КонецЕсли;	
		Если ТабличнаяЧастьПлан.Колонки.Найти(РеквизитСерии.Значение) = Неопределено Тогда
			ТабличнаяЧастьПлан.Колонки.Добавить(РеквизитСерии.Значение);
		КонецЕсли;	
	КонецЦикла;
	
	Для Каждого РеквизитСерийныеНомера Из СтруктураДокументаMS.РеквизитыСерийныеНомера Цикл
		// данное поле будет добавлено при заполнении вычислимых полей
		Если Найти(ВРег(СокрЛП("Характеристика")), ВРег(СокрЛП(РеквизитСерийныеНомера.Значение))) Тогда
			Продолжить;
		КонецЕсли;	
		Если ТабличнаяЧастьФакт.Колонки.Найти(РеквизитСерийныеНомера.Значение) = Неопределено Тогда
			ТабличнаяЧастьФакт.Колонки.Добавить(РеквизитСерийныеНомера.Значение);
		КонецЕсли;
		Если ТабличнаяЧастьПлан.Колонки.Найти(РеквизитСерийныеНомера.Значение) = Неопределено Тогда
			ТабличнаяЧастьПлан.Колонки.Добавить(РеквизитСерийныеНомера.Значение);
		КонецЕсли;	
	КонецЦикла;	
	
	// План
	Для Индекс = 0 По ДокументSMARTS.СтрокиПлан.Количество - 1 Цикл
		// фильтр ТЧ если она была объединена из нескольких документов
		Если ЗначениеЗаполнено(ФильтрТЧПоИдДокумента) Тогда
			ИдДокументаВладелецСтроки = ДокументSMARTS.СтрокиПлан.Элемент(Индекс).GetField("ИдДокумента");
			Если ИдДокументаВладелецСтроки <> ФильтрТЧПоИдДокумента Тогда
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		
		НоваяСтрока = ТабличнаяЧастьПлан.Добавить();
		Для Каждого РеквизитТЧ Из ТабличнаяЧастьПлан.Колонки Цикл
			Попытка
				НоваяСтрока[РеквизитТЧ.Имя] = ДокументSMARTS.СтрокиПлан.Элемент(Индекс).GetField(РеквизитТЧ.Имя);
			Исключение
			    Сообщить("Реквизит с именем [" + РеквизитДокумента.Имя + "] отсутствует в табличной части [СтрокиПлан]");
			КонецПопытки; 			
		КонецЦикла;
	КонецЦикла;
	ДанныеДокументаMS.Вставить("СтрокиПлан", ТабличнаяЧастьПлан);
	
	// Факт
	Для Индекс = 0 По ДокументSMARTS.СтрокиФакт.Количество - 1 Цикл
		// фильтр ТЧ если она была объединена из нескольких документов
		Если ЗначениеЗаполнено(ФильтрТЧПоИдДокумента) Тогда
			ИдДокументаВладелецСтроки = ДокументSMARTS.СтрокиФакт.Элемент(Индекс).GetField("ИдДокумента");
			// Если ИдДокумента пустой, но не неопределено, то возможно это старая конфа и можно поискать в BindedLine
			Если ИдДокументаВладелецСтроки = "" Тогда
				СвязаннаяСтрокаИзФакта = ДокументSMARTS.СтрокиФакт.Элемент(Индекс).GetField("СвязаннаяСтрока");
				Если Найти(ВРег(СвязаннаяСтрокаИзФакта), ВРег(СокрЛП("COMОбъект")))  Тогда
					ИдДокументаВладелецСтроки = СвязаннаяСтрокаИзФакта.GetField("ИдДокумента")
				КонецЕсли;
			КонецЕсли;
			Если ИдДокументаВладелецСтроки <> ФильтрТЧПоИдДокумента 
				И НЕ (ID_Документа = ФильтрТЧПоИдДокумента И ИдДокументаВладелецСтроки = "") // Это условие нужно для загрузки всех строк, которых не было по плану в первый документ
				Тогда 
				Продолжить;
			КонецЕсли;
		КонецЕсли;

		НоваяСтрока = ТабличнаяЧастьФакт.Добавить();
		Для Каждого РеквизитТЧ Из ТабличнаяЧастьФакт.Колонки Цикл
			Попытка
				
				ЗначениеРеквизита = ДокументSMARTS.СтрокиФакт.Элемент(Индекс).GetField(РеквизитТЧ.Имя);
				
				Если Найти(ВРег(СокрЛП("BindedLine/СвязаннаяСтрока")), ВРег(СокрЛП(РеквизитТЧ.Имя))) Тогда
					
					СвязаннаяСтрока = Новый Структура;
					
					Для Каждого РеквизитСвязаннойСтроки Из ТабличнаяЧастьФакт.Колонки Цикл
																
						ЗначениеРеквизитаСвязаннойСтроки = ЗначениеРеквизита.GetField(РеквизитСвязаннойСтроки.Имя);					
						
						Если НЕ Найти(ВРег(СокрЛП(ЗначениеРеквизитаСвязаннойСтроки)), ВРег(СокрЛП("COMОбъект"))) Тогда
							
							СвязаннаяСтрока.Вставить(РеквизитСвязаннойСтроки.Имя, ЗначениеРеквизитаСвязаннойСтроки);
							
						КонецЕсли;							
						
						НоваяСтрока[РеквизитТЧ.Имя] = СвязаннаяСтрока;
					
					КонецЦикла;
					
				Иначе	
					
					НоваяСтрока[РеквизитТЧ.Имя] = ЗначениеРеквизита;
					
				КонецЕсли;	
											
			Исключение
			    //Сообщить("Реквизит с именем [" + РеквизитТЧ.Имя + "] отсутствует в табличной части [СтрокиФакт]");
			КонецПопытки; 			
		КонецЦикла;
	КонецЦикла;
	ДанныеДокументаMS.Вставить("СтрокиФакт", ТабличнаяЧастьФакт);
	
	// СовмещенныеСтроки
	Для Индекс = 0 По ДокументSMARTS.CombinedItems.Количество - 1 Цикл
		НоваяСтрока = ТабличнаяЧастьСовмещенные.Добавить();
		Для Каждого РеквизитТЧ Из ТабличнаяЧастьСовмещенные.Колонки Цикл
			Попытка
				
				ЗначениеРеквизита = ДокументSMARTS.CombinedItems.Элемент(Индекс).GetField(РеквизитТЧ.Имя);
				
				Если Найти(ВРег(СокрЛП("BindedLine/СвязаннаяСтрока")), ВРег(СокрЛП(РеквизитТЧ.Имя))) Тогда
					
					СвязаннаяСтрока = Новый Структура;
					
					Для Каждого РеквизитСвязаннойСтроки Из ТабличнаяЧастьСовмещенные.Колонки Цикл
																
						ЗначениеРеквизитаСвязаннойСтроки = ЗначениеРеквизита.GetField(РеквизитСвязаннойСтроки.Имя);					
						
						Если НЕ Найти(ВРег(СокрЛП(ЗначениеРеквизитаСвязаннойСтроки)), ВРег(СокрЛП("COMОбъект"))) Тогда
							
							СвязаннаяСтрока.Вставить(РеквизитСвязаннойСтроки.Имя, ЗначениеРеквизитаСвязаннойСтроки);
							
						КонецЕсли;																			
					
					КонецЦикла;
					
					НоваяСтрока[РеквизитТЧ.Имя] = СвязаннаяСтрока;
					
				Иначе	
					
					НоваяСтрока[РеквизитТЧ.Имя] = ЗначениеРеквизита;
					
				КонецЕсли;	
											
			Исключение
			    //Сообщить("Реквизит с именем [" + РеквизитТЧ.Имя + "] отсутствует в табличной части [СовмещенныеСтроки]");
			КонецПопытки; 			
		КонецЦикла;
	КонецЦикла;
	ДанныеДокументаMS.Вставить("СовмещенныеСтроки", ТабличнаяЧастьСовмещенные);	
	
	// Получение данных из доп.таблиц документа типа "ОплатыВозвраты", "Деньги" и т.д.
	Для каждого ДопТаблица Из СтруктураДокументаMS.ДополнительныеТаблицы Цикл		
		
		ИмяДопТаблицы			= ДопТаблица.Представление;
		СписокКолонокДопТаблицы = ДопТаблица.Значение;		
		ДопТабличнаяЧасть		= Новый ТаблицаЗначений;		
		
		Для каждого Колонка Из СписокКолонокДопТаблицы Цикл
			ДопТабличнаяЧасть.Колонки.Добавить(Колонка.Значение);					
		КонецЦикла; 
		
		СтрокиДокументаMS = ДокументSMARTS.ПолучитьПоле(ИмяДопТаблицы).Rows;				
		
		Для Индекс = 0 по СтрокиДокументаMS.Количество - 1 Цикл
			
			ТекущаяСтрокаMS	= СтрокиДокументаMS.Элемент(Индекс);			
			НоваяСтрока 	= ДопТабличнаяЧасть.Добавить();						
			
			Для Каждого Колонка из СписокКолонокДопТаблицы Цикл
				
				Попытка					
					ЗначениеРеквизита = ТекущаяСтрокаMS.ПолучитьПоле(Колонка.Значение);
				Исключение
					Попытка
						ЗначениеРеквизита = ТекущаяСтрокаMS[Колонка.Значение];											
					Исключение
						ЗначениеРеквизита = Неопределено;						
					КонецПопытки; 					
				КонецПопытки;		
								
				НоваяСтрока[Колонка.Значение] = ЗначениеРеквизита;				
				
			КонецЦикла;
							
			ПоляТекущейСтрокиMS = ТекущаяСтрокаMS.Поля;
			
			Для ИндексПоля = 0 По ПоляТекущейСтрокиMS.Количество - 1 Цикл
				
				ИмяПоля = ПоляТекущейСтрокиMS.Элемент(ИндексПоля).ИмяПоля;
				
				Если ДопТабличнаяЧасть.Колонки.Найти(ИмяПоля) = Неопределено Тогда							
					ДопТабличнаяЧасть.Колонки.Добавить(ИмяПоля);
				КонецЕсли;	
					
				Попытка					
					ЗначениеРеквизита = ТекущаяСтрокаMS.ПолучитьПоле(ИмяПоля);
				Исключение
					Попытка
						ЗначениеРеквизита = ТекущаяСтрокаMS[ИмяПоля];											
					Исключение
						ЗначениеРеквизита = Неопределено;						
					КонецПопытки; 					
				КонецПопытки;		
								
				НоваяСтрока[ИмяПоля] = ЗначениеРеквизита;										
				
			КонецЦикла;									
			
		КонецЦикла;	
		
		ДанныеДокументаMS.Вставить(ИмяДопТаблицы, ДопТабличнаяЧасть);	
		
	КонецЦикла;	
	
    // Получение данных доп.таблиц, которые не определены в метаданных документа, но существуют у самого экземпляра документа
    Для ИндексТаблицы = 0 По ДокументSMARTS.Таблицы.Количество - 1 Цикл
        
        ДопТаблицаMS = ДокументSMARTS.Таблицы.Элемент(ИндексТаблицы);
		
		Если ДопТаблицаMS.Строки.Количество = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		ДопТабличнаяЧасть 	= Новый ТаблицаЗначений;		
		ТекущаяСтрокаMS 	= ДопТаблицаMS.Строки.Элемент(0);				
		
		Для ИндексПоля = 0 По ТекущаяСтрокаMS.Поля.Количество - 1 Цикл		
			ДопТабличнаяЧасть.Колонки.Добавить(ТекущаяСтрокаMS.Поля.Элемент(ИндексПоля).ИмяПоля);					
		КонецЦикла; 				        
        
        Для ИндексСтроки = 0 По ДопТаблицаMS.Строки.Количество - 1 Цикл
            
            ТекущаяСтрокаMS = ДопТаблицаMS.Строки.Элемент(ИндексСтроки);            
            НоваяСтрока 	= ДопТабличнаяЧасть.Добавить();
            
            Для ИндексПоля = 0 По ТекущаяСтрокаMS.Поля.Количество - 1 Цикл
                
                ИмяПоля = ТекущаяСтрокаMS.Поля.Элемент(ИндексПоля).ИмяПоля;
                
                Попытка
                    ЗначениеРеквизита = ТекущаяСтрокаMS.ПолучитьПоле(ИмяПоля);
                Исключение
                    Попытка
                        ЗначениеРеквизита = ТекущаяСтрокаMS[ИмяПоля];
                    Исключение
                        ЗначениеРеквизита = Неопределено;
                    КонецПопытки;                 
                КонецПопытки;         	
                
                НоваяСтрока[ИмяПоля] = ЗначениеРеквизита;
                
            КонецЦикла;                                         
            
        КонецЦикла; 
        
        ДанныеДокументаMS.Вставить(ДопТаблицаMS.Имя, ДопТабличнаяЧасть);   
        
    КонецЦикла;	
	
	Возврат ДанныеДокументаMS;
	
КонецФункции

Функция КомЯдро_УдалитьДокументНаСервереSMARTS(ID_Документа, ID_БазыSMARTS = "")
	
	Если НЕ КомЯдро_ПодключитьсяКСерверуSMARTS(ID_БазыSMARTS) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	СтруктураПодключенияMS.StorageConnector.УдалитьДокумент(ID_Документа);
	
	Возврат Истина;
	
КонецФункции

Функция КомЯдро_УстановитьСтатусДокументаНаСервереSMARTS(ID_Документа, ID_БазыSMARTS = "", Статус)
	
	Если НЕ КомЯдро_ПодключитьсяКСерверуSMARTS(ID_БазыSMARTS) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ДокументSMARTS = СтруктураПодключенияMS.StorageConnector.ПолучитьДокумент(ID_Документа);			
	
	ДокументSMARTS.УстановитьПоле("Статус", Статус);
	ДокументSMARTS.Завершен = Ложь;
	ДокументSMARTS.ВОбработке = Ложь;
	
	Возврат Истина;
	
КонецФункции

#КонецОбласти

#Область КомпонентаMobileSMARTS_ТаблицыSMARTS

Функция КомЯдро_ВыгрузитьТаблицуНаСерверSMARTS(ИмяТаблицы, ДанныеДляВыгрузки, ID_БазыSMARTS = "", ПереписыватьНоменклатуруПриВыгрузке = Ложь)
	
	РезультатВыгрузки = Новый Структура;
	РезультатВыгрузки.Вставить("Статус"		, Истина);																			 
	РезультатВыгрузки.Вставить("Сообщение"	, "Таблица [" + ИмяТаблицы + "] успешно выгружена. Выгружено:" 
												+ Символы.ВК + Символы.Таб + "- " + Формат(ДанныеДляВыгрузки.МассивыСтрок.Количество(), "ЧН=0; ЧГ=3,0") + " строк");
												
	Если ИмяТаблицы = "Номенклатура" Тогда											
		
		КоличествоРазличныхТоваров = ДанныеДляВыгрузки.КоличествоТоваров;
		РезультатВыгрузки.Сообщение = РезультатВыгрузки.Сообщение 
										+ Символы.ВК + Символы.Таб + "- " + Формат(КоличествоРазличныхТоваров, "ЧН=0; ЧГ=3,0") + " товаров";
	КонецЕсли;													
												
	Если НЕ КомЯдро_ПодключитьсяКСерверуSMARTS(ID_БазыSMARTS) Тогда					
		РезультатВыгрузки.Вставить("Статус"		, Ложь);				
		РезультатВыгрузки.Вставить("Сообщение"	, "База Mobile SMARTS недоступна!");			
		Возврат РезультатВыгрузки;								
	КонецЕсли;
	
	Если ИмяТаблицы = "Номенклатура" Тогда
		СтруктураПодключенияMS.TerminalConnector.ПерезаписыватьНоменклатуру(ПереписыватьНоменклатуруПриВыгрузке);
		РезультатПопытки = СтруктураПодключенияMS.TerminalConnector.НачатьВыгрузкуТоваров(ДанныеДляВыгрузки.МассивИмен);
	Иначе
		РезультатПопытки = СтруктураПодключенияMS.TerminalConnector.НачатьВыгрузкуТаблицы(ИмяТаблицы, ДанныеДляВыгрузки.МассивИмен, Истина);
	КонецЕсли;
	
	Если НЕ РезультатПопытки Тогда				
		ОписаниеОшибки = КомЯдро_ПолучитьОшибку();								
		РезультатВыгрузки.Вставить("Статус"		, Ложь);				
		РезультатВыгрузки.Вставить("Сообщение"	, "Таблица [" + ИмяТаблицы + "] не выгружается!" + Символы.ВК + ОписаниеОшибки);		
		Возврат РезультатВыгрузки;				
	КонецЕсли;
	
	Если РезультатВыгрузки.Статус Тогда
		Для Каждого МассивСтрокиВыгрузки из ДанныеДляВыгрузки.МассивыСтрок Цикл
			Если ИмяТаблицы = "Номенклатура" Тогда
				РезультатПопытки = СтруктураПодключенияMS.TerminalConnector.ДобавитьВВыгрузкуТоваров(МассивСтрокиВыгрузки);
			Иначе
				РезультатПопытки = СтруктураПодключенияMS.TerminalConnector.ДобавитьВВыгрузкуТаблицы(МассивСтрокиВыгрузки);
			КонецЕсли;
			Если НЕ РезультатПопытки Тогда
				ОписаниеОшибки = КомЯдро_ПолучитьОшибку();								
				РезультатВыгрузки.Вставить("Статус"		, Ложь);				
				РезультатВыгрузки.Вставить("Сообщение"	, "Ошибка выгрузки таблицы [" + ИмяТаблицы + "]." + Символы.ВК + ОписаниеОшибки);						
				СтруктураПодключенияMS.TerminalConnector.ПрерватьВыгрузкуТаблицы();			
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если РезультатВыгрузки.Статус Тогда
		Если ИмяТаблицы = "Номенклатура" Тогда
			РезультатПопытки = СтруктураПодключенияMS.TerminalConnector.ЗавершитьВыгрузкуТоваров();	
		Иначе
			РезультатПопытки = СтруктураПодключенияMS.TerminalConnector.ЗавершитьВыгрузкуТаблицы();	
		КонецЕсли;
		
		Если НЕ РезультатПопытки Тогда
			РезультатВыгрузки.Вставить("Статус"		, Ложь);				
			РезультатВыгрузки.Вставить("Сообщение"	, "Не удалось закончить выгрузку таблицы [" + ИмяТаблицы + "]." + Символы.ВК + ОписаниеОшибки);
		КонецЕсли;
	КонецЕсли;

	СтруктураПодключенияMS.TerminalConnector.ОсвободитьРесурсы();
	
	Возврат РезультатВыгрузки;
	
КонецФункции

Функция КомЯдро_ОчиститьТаблицуНаСервереSMARTS(ИмяТаблицы, ID_БазыSMARTS = "") Экспорт
	
	РезультатВыгрузки = Новый Структура("Сообщение,Статус", "Таблица [" + ИмяТаблицы + "] успешно очищена", Истина);

	Если НЕ КомЯдро_ПодключитьсяКСерверуSMARTS(ID_БазыSMARTS) Тогда
		РезультатВыгрузки = Новый Структура("Сообщение,Статус", "Ошибка очистки таблицы [" + ИмяТаблицы + "]", Ложь);
		Возврат РезультатВыгрузки;
	КонецЕсли;
	
	Если ИмяТаблицы = "Номенклатура" Тогда
		СтруктураПодключенияMS.StorageConnector.ОчиститьСправочникТоваров();
	Иначе
		СтруктураПодключенияMS.StorageConnector.ОчиститьТаблицу(ИмяТаблицы);
	КонецЕсли;
	
	Возврат РезультатВыгрузки;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область Транзит

Функция Транзит_ВызватьГлобальныйМетодНаКлиенте(СтруктураВызова, ВозвращатьАдресХранилища = Ложь)
	ПередаваемыеПараметры = Транзит_ПоместитьЗначениеВХранилищеНаКлиенте(СтруктураВызова);
	АдресХранилища = Транзит_ВызватьГлобальныйМетодНаСервере(ПередаваемыеПараметры);
	Если ВозвращатьАдресХранилища Тогда
		Возврат АдресХранилища;
	Иначе
		Возврат Транзит_ПолучитьЗначениеИзХранилищаНаКлиенте(АдресХранилища);
	КонецЕсли;
КонецФункции

Функция Транзит_ВызватьГлобальныйМетодНаСервере(АдресХранилища)
	
	Результат = Неопределено;
	
	СтруктураВызова = Транзит_ПолучитьЗначениеИзХранилищаНаСервере(АдресХранилища);
	ТипМетода = СтруктураВызова.ТипМетода;
	ИмяМетода = СтруктураВызова.ИмяМетода;
	
	СтрокаПараметровМетода = "";
	Если СтруктураВызова.Свойство("ПараметрыМетода") Тогда
		ПараметрыМетода = СтруктураВызова.ПараметрыМетода;
		Для Каждого Параметр Из СтруктураВызова.ПараметрыМетода Цикл
			СтрокаПараметровМетода = СтрокаПараметровМетода + ", ПараметрыМетода." + Параметр.Ключ;
		КонецЦикла;
		СтрокаПараметровМетода = Сред(СтрокаПараметровМетода, 3);
	КонецЕсли;
	
	СтрокаВызова = "_ГлКонтекст.ГлЯдро_" + ИмяМетода + "(" + СтрокаПараметровМетода + ");";
	Если ТипМетода = "Функция" Тогда
		СтрокаВызова = "Результат = " + СтрокаВызова;
	КонецЕсли;
	
	Если _ГлКонтекст = Неопределено И ТекущийРежимЗапуска() = РежимЗапускаКлиентскогоПриложения.УправляемоеПриложение Тогда
		Выполнить("_ГлКонтекст = РеквизитФормыВЗначение(""Объект"")");
	КонецЕсли; 
	
	Выполнить(СтрокаВызова);
	
	Возврат Транзит_ПоместитьЗначениеВХранилищеНаСервере(Результат);
	
КонецФункции

Функция Транзит_ПоместитьЗначениеВХранилищеНаКлиенте(СохраняемоеЗначение)
	Возврат ПоместитьВоВременноеХранилище(СохраняемоеЗначение); 
КонецФункции

Функция Транзит_ПолучитьЗначениеИзХранилищаНаКлиенте(АдресХранилища)
	Возврат ПолучитьИзВременногоХранилища(АдресХранилища); 
КонецФункции

Функция Транзит_ПоместитьЗначениеВХранилищеНаСервере(СохраняемоеЗначение)
	Возврат ПоместитьВоВременноеХранилище(СохраняемоеЗначение); 
КонецФункции

Функция Транзит_ПолучитьЗначениеИзХранилищаНаСервере(АдресХранилища)
	Возврат ПолучитьИзВременногоХранилища(АдресХранилища); 
КонецФункции

#КонецОбласти

#Область РегламентныеЗадания

Функция ЛокЯдро_ВыгрузитьТаблицыНаСерверSMARTSПоРегламенту() Экспорт	
	
	Если РасположениеКомпоненты = "НаСервере" Тогда
		СтруктураВызова = Новый Структура;
		СтруктураВызова.Вставить("ТипМетода", "Функция");
		СтруктураВызова.Вставить("ИмяМетода", "ВыгрузитьТаблицыНаСерверSMARTSПоРегламенту");		
		Возврат Транзит_ВызватьГлобальныйМетодНаКлиенте(СтруктураВызова);	
	Иначе			
	
		ЗаписьЖурналаРегистрации("КлеверенсСофтТерминалыСбораДанных.Регламентный обмен справочниками", УровеньЖурналаРегистрации.Информация, , , "Началась выгрузка справочников на сервер Mobile SMARTS");
		
		// если сервер недоступен, то нам здесь делать нечего
		Если НЕ КомЯдро_ПодключитьсяКСерверуSMARTS() Тогда
			ЗаписьЖурналаРегистрации("КлеверенсСофтТерминалыСбораДанных.Регламентный обмен справочниками", УровеньЖурналаРегистрации.Ошибка, , , "Выгрузка прервана: не удалось подключиться к серверу Mobile SMARTS");
			Возврат Ложь;
		КонецЕсли;	
		
		Если НЕ НастройкиИнициализированы Тогда
			ЛокЯдро_Инициализация();
		КонецЕсли;			
		
		Если НЕ НастройкиИнициализированы Тогда
			ЗаписьЖурналаРегистрации("КлеверенсСофтТерминалыСбораДанных.Регламентный обмен справочниками", УровеньЖурналаРегистрации.Ошибка, , , "Выгрузка прервана: не удалось получить настройки базы Mobile SMARTS");	
			Возврат Ложь;
		КонецЕсли;	
		
		НастройкиОбменаСправочников = ЛокЯдро_ПолучитьИзКэшаНастройкуSMARTS("НастройкиОбменаСправочников");
		
		Если ТипЗнч(НастройкиОбменаСправочников) <> Тип("ТаблицаЗначений") Тогда
			НастройкиОбменаСправочников = ЛокЯдро_ПолучитьНастройкуНаСервереSMARTS("НастройкиОбменаСправочников", ДанныеТекущегоУзла.ID_Узла);
		КонецЕсли;
		
		Если ТипЗнч(НастройкиОбменаСправочников) <> Тип("ТаблицаЗначений") Тогда		
			ЗаписьЖурналаРегистрации("КлеверенсСофтТерминалыСбораДанных.Регламентный обмен справочниками", УровеньЖурналаРегистрации.Ошибка, , , "Выгрузка прервана: не найдены настройки регламентного обмена справочниками");
			Возврат Ложь;
		КонецЕсли;	
		
		Для каждого Настройка Из НастройкиОбменаСправочников Цикл
			
			Если НЕ Настройка.Выгружать Тогда		
				Продолжить;
			КонецЕсли; 
			
			// пока уберу условие
			
			НастройкиКомпоновщика = Неопределено;
			
			//Если НЕ ЗначениеЗаполнено(СокрЛП(Настройка.НастройкаКомпоновщикаСтрокой)) Тогда		
			//	Продолжить;
			//КонецЕсли; 
			//
			//Попытка
			//	НастройкиКомпоновщика = ЗначениеИзСтрокиВнутр(Настройка.НастройкаКомпоновщикаСтрокой);
			//Исключение			
			//	ЗаписьЖурналаРегистрации("КлеверенсСофтТерминалыСбораДанных.Регламентный обмен справочниками", УровеньЖурналаРегистрации.Ошибка, , , "Не удалось получить настройки справочника [" + Настройка.ИмяТаблицы + "]");
			//	Продолжить;
			//КонецПопытки; 						
			
			Попытка
			    ЛокЯдро_ВыгрузитьТаблицуНаСерверSMARTS(Настройка.ИмяТаблицы, НастройкиКомпоновщика);									
				ЗаписьЖурналаРегистрации("КлеверенсСофтТерминалыСбораДанных.Регламентный обмен справочниками", УровеньЖурналаРегистрации.Информация, , , "Справочник [" + Настройка.ИмяТаблицы + "] успешно выгружен на сервер Mobile SMARTS");
			Исключение			
				ЗаписьЖурналаРегистрации("КлеверенсСофтТерминалыСбораДанных.Регламентный обмен справочниками", УровеньЖурналаРегистрации.Ошибка, , , "Не удалось выгрузить справочник [" + Настройка.ИмяТаблицы + "] на сервер Mobile SMARTS");
				Продолжить;
			КонецПопытки; 		
				
		КонецЦикла; 
		
		ЗаписьЖурналаРегистрации("КлеверенсСофтТерминалыСбораДанных.Регламентный обмен справочниками", УровеньЖурналаРегистрации.Информация, , , "Завершена выгрузка справочников на сервер Mobile SMARTS");
		
		Возврат Истина;
	
	КонецЕсли;
	
КонецФункции
 
Функция ЛокЯдро_ВыполнитьОбменДокументамиНаСервереSMARTSПоРегламенту() Экспорт

	Если РасположениеКомпоненты = "НаСервере" Тогда
		СтруктураВызова = Новый Структура;
		СтруктураВызова.Вставить("ТипМетода", "Функция");
		СтруктураВызова.Вставить("ИмяМетода", "ВыполнитьОбменДокументамиНаСервереSMARTSПоРегламенту");		
		Результат = Транзит_ВызватьГлобальныйМетодНаКлиенте(СтруктураВызова);	
		Возврат Результат;
	Иначе	
	
		// если сервер недоступен, то нам здесь делать нечего
		Если НЕ КомЯдро_ПодключитьсяКСерверуSMARTS() Тогда
			ЗаписьЖурналаРегистрации("КлеверенсСофтТерминалыСбораДанных.Регламентный обмен документами", УровеньЖурналаРегистрации.Ошибка, , , "Не удалось подключиться к серверу Mobile SMARTS");
			Возврат Ложь;
		КонецЕсли;	
		
		Если НЕ НастройкиИнициализированы Тогда
			ЛокЯдро_Инициализация();
		КонецЕсли;				
		
		Если НЕ НастройкиИнициализированы Тогда
			ЗаписьЖурналаРегистрации("КлеверенсСофтТерминалыСбораДанных.Регламентный обмен документами", УровеньЖурналаРегистрации.Ошибка, , , "Не удалось получить настройки базы Mobile SMARTS");	
			Возврат Ложь;
		КонецЕсли;	
		
		// общие данные для загрузки и выгрузки	
		ID_БазыMS 					= ДанныеТекущегоУзла.ID_БазыMS;					
		НастройкиБизнесПроцессов 	= ЛокЯдро_ПолучитьИзКэшаНастройкуSMARTS("НастройкиБизнесПроцессов");
		ЗначенияПараметров 			= ЛокЯдро_ПолучитьЗначенияГлобальныхПараметров();
		ДокументыMS 				= ЛокЯдро_ПолучитьСписокДокументовНаСервереSMARTS(ID_БазыMS);
			
		Если ТипЗнч(НастройкиБизнесПроцессов) <> Тип("ТаблицаЗначений") Тогда
			ЗаписьЖурналаРегистрации("КлеверенсСофтТерминалыСбораДанных.Регламентный обмен документами", УровеньЖурналаРегистрации.Ошибка, , , "Не найдены настройки бизнес-процессов");
			Возврат Ложь;
		КонецЕсли;
		
		Если ТипЗнч(ЗначенияПараметров) <> Тип("ТаблицаЗначений") Тогда
			ЗаписьЖурналаРегистрации("КлеверенсСофтТерминалыСбораДанных.Регламентный обмен документами", УровеньЖурналаРегистрации.Ошибка, , , "Не найдены значения глобальных параметров");
			Возврат Ложь;
		КонецЕсли;			
		
		//- сначала делаем загрузку, чтобы повторно не выгрузить уже выгруженные и находящиеся в работе либо завершенные документы

		//- загрузить документы (аналог метода ЗагрузитьВыбранныеДокументыВБазу1С() в форме обмена документами):
		//	- цикл для каждого документа, где Состояние = Завершен
		//		- подбираем бп
		//		- что делать если нашлось <> 1 бп? продолжить
		//		- если бп не подразумевает загрузку в 1с, то продолжить
		//		- что делать если загружаем не в тот же документ? всегда создавать новый? да
		//		- удалить документ с сервера в случае успешной записи либо оставить в случае ошибки
		
		// ****************************************** +++ загрузка документов из Mobile SMARTS в 1С ******************************************
		
		ЗаписьЖурналаРегистрации("КлеверенсСофтТерминалыСбораДанных.Регламентный обмен документами", УровеньЖурналаРегистрации.Информация, , , "Началась загрузка документов с сервера Mobile SMARTS в 1С");
		
		ДанныеНастроекИзКэша = Новый Структура;
		ДанныеНастроекИзКэша.Вставить("НастройкиДляОбмена", 			НастройкиБизнесПроцессов);
		ДанныеНастроекИзКэша.Вставить("ЗначенияПараметров", 			ЗначенияПараметров);
		ДанныеНастроекИзКэша.Вставить("ПроизвольныеКодыШапки", 			ЛокЯдро_ПолучитьИзКэшаНастройкуSMARTS("ПроизвольныеКоды_Загрузка_ШапкаДокумента"));
		ДанныеНастроекИзКэша.Вставить("ПроизвольныеКодыТабличнойЧасти", ЛокЯдро_ПолучитьИзКэшаНастройкуSMARTS("ПроизвольныеКоды_Загрузка_ТабличнаяЧастьДокумента"));		
		
		ВыбранныеДокументы = ДокументыMS.НайтиСтроки(Новый Структура("Завершен", Истина));
		Для Каждого ДокументКЗагрузке Из ВыбранныеДокументы Цикл
			
			РезультатПодбораБП = ЛокЯдро_ПолучитьНастройкуБизнесПроцесса(НастройкиБизнесПроцессов, ДокументКЗагрузке.НастройкаБизнесПроцесса, ДокументКЗагрузке.ИмяТипаДокумента, Неопределено);
			
			// не найдено подходящей строки БП, либо их количество больше одной
			Если РезультатПодбораБП.Статус = Ложь Тогда			
				Сообщение = "Не удалось подобрать настройку бизнес-процесса для документа """ + ДокументКЗагрузке.Имя + """";
				Сообщить(Сообщение);
				ЗаписьЖурналаРегистрации("КлеверенсСофтТерминалыСбораДанных.Регламентный обмен документами", УровеньЖурналаРегистрации.Ошибка, , , Сообщение);
				Продолжить;									
			КонецЕсли;	
			
			НастройкаБП = РезультатПодбораБП.Данные;		
			Если НЕ ЗначениеЗаполнено(СокрЛП(НастройкаБП.ТипРезультирующегоДокумента1С)) ИЛИ (НастройкаБП.ЗагружатьВТотЖе И НЕ ЗначениеЗаполнено(СокрЛП(НастройкаБП.ТипИсходногоДокумента1С))) Тогда
				Сообщение = "Данный бизнес-процесс не подразумевает загрузку документа в 1С, т.к. у него не заполнен результирующий документ 1С";
				Сообщить(Сообщение);
				ЗаписьЖурналаРегистрации("КлеверенсСофтТерминалыСбораДанных.Регламентный обмен документами", УровеньЖурналаРегистрации.Ошибка, , , Сообщение);
				Продолжить;
			КонецЕсли;	
					
			Если НЕ РезультатПодбораБП.Данные.ЗагружатьВТотЖе Тогда			
				ДокументДляЗаполнения = Документы[РезультатПодбораБП.Данные.ТипРезультирующегоДокумента1С].ПустаяСсылка();
			Иначе
				ДокументДляЗаполнения = Неопределено;	
			КонецЕсли;												
			
			РезультатЗаписи = ЛокЯдро_СформироватьИЗаписатьДокументВБазу1С_ПоID(ДокументКЗагрузке.Ид, ДокументКЗагрузке.ИмяТипаДокумента, ДокументКЗагрузке.НастройкаБизнесПроцесса, РезультатПодбораБП.Данные, ДокументДляЗаполнения);
			
			Если РезультатЗаписи.Статус = Ложь Тогда
				Сообщить(РезультатЗаписи.Сообщение);
				ЗаписьЖурналаРегистрации("КлеверенсСофтТерминалыСбораДанных.Регламентный обмен документами", УровеньЖурналаРегистрации.Ошибка, , , РезультатЗаписи.Сообщение);
			Иначе			
				РезультатЗаписи.Данные.Комментарий = РезультатЗаписи.Данные.Комментарий + " комментарий отсечения ";
				
				// запись и проведение документа в 1С. Сделано по аналогии с онлайн-записью			
				РезультатЗаписи = ЛокЯдро_ЗаписатьИПровестиДокумент1С(РезультатЗаписи, ДокументКЗагрузке.НастройкаБизнесПроцесса, ДокументКЗагрузке.ИмяТипаДокумента, ДокументКЗагрузке.Имя);
				ЗаписьЖурналаРегистрации("КлеверенсСофтТерминалыСбораДанных.Регламентный обмен документами", УровеньЖурналаРегистрации.Информация, , , РезультатЗаписи.Сообщение);
				
				// Удаление опционально. Сделать отдельную галку для этой опции
				//РезультатУдаления = ГлЯдро_УдалитьДокументНаСервереSMARTS(ДокументКЗагрузке.Ид, ID_БазыMS);
				//Сообщение = РезультатУдаления.Сообщение + " [" + ДокументКЗагрузке.Имя + "]";
				//Сообщить(Сообщение);			
				//ЗаписьЖурналаРегистрации("КлеверенсСофтТерминалыСбораДанных.Регламентный обмен документами", УровеньЖурналаРегистрации.Информация, , , Сообщение);
			КонецЕсли;
			
		КонецЦикла;	
		
		ЗаписьЖурналаРегистрации("КлеверенсСофтТерминалыСбораДанных.Регламентный обмен документами", УровеньЖурналаРегистрации.Информация, , , "Завершена загрузка документов с сервера Mobile SMARTS в 1С");
		
		// ****************************************** --- загрузка документов из Mobile SMARTS в 1С ******************************************		
		
		// ****************************************** +++ выгрузка документов из 1С в Mobile SMARTS ******************************************
		
		ЗаписьЖурналаРегистрации("КлеверенсСофтТерминалыСбораДанных.Регламентный обмен документами", УровеньЖурналаРегистрации.Информация, , , "Началась выгрузка документов из 1С на сервер Mobile SMARTS");
		
		//- выгрузить документы - как тут отбирать, какие выгружать? по комментарию отсечения???	
		//- получить из настроек таблицу отборов (глобальную или узловую) для регламентного обмена, для каждой строки:
		//		- получить программную скд, накладывать на неё настройки компоновщика + комментарий отсечения
		//		- скомпоновать скд, выгрузить ссылки на документы
		//		- подобрать БП для выгрузки
		//		- если их количество <> 1, то сообщение в лог и продолжить;
		// 		- из каждого документа 1С создать документ SMARTS по правилам обмена из найденного бп
		//		- выгрузить документ SMARTS на сервер		
		
		СтруктураНастроек = Новый Структура;
		СтруктураНастроек.Вставить("БизнесПроцессы", НастройкиБизнесПроцессов);
		СтруктураНастроек.Вставить("ПараметрыУзлов", ЗначенияПараметров);
		
		НастройкиОтборов = ЛокЯдро_ПолучитьИзКэшаНастройкуSMARTS("НастройкиОтборовУзлов_Автообмен");
		
		Если ТипЗнч(НастройкиОтборов) <> Тип("ТаблицаЗначений") Тогда
			НастройкиОтборов = ЛокЯдро_ПолучитьНастройкуНаСервереSMARTS("НастройкиОтборовУзлов_Автообмен");
		КонецЕсли;
		
		Если ТипЗнч(НастройкиОтборов) <> Тип("ТаблицаЗначений") Тогда
			ЗаписьЖурналаРегистрации("КлеверенсСофтТерминалыСбораДанных.Регламентный обмен документами", УровеньЖурналаРегистрации.Ошибка, , , "Не найдены настройки отборов документов для регламентного обмена");
			Возврат Ложь;
		КонецЕсли;
		
		СтруктураНастроек.Вставить("НастройкиОтборов", НастройкиОтборов);	
		
		ОтобранныеДокументы = ЛокЯдро_ПолучитьСписокДокументов1С(СтруктураНастроек);			
		
		Если ТипЗнч(ОтобранныеДокументы) <> Тип("ТаблицаЗначений") Тогда
			ЗаписьЖурналаРегистрации("КлеверенсСофтТерминалыСбораДанных.Регламентный обмен документами", УровеньЖурналаРегистрации.Ошибка, , , "Не найдены документы для выгрузки на сервер Mobile SMARTS");
			Возврат Ложь;
		КонецЕсли;					
		
		ДанныеНастроекИзКэша = Новый Структура;		
		ДанныеНастроекИзКэша.Вставить("ПроизвольныеКодыШапки", 			ЛокЯдро_ПолучитьИзКэшаНастройкуSMARTS("ПроизвольныеКоды_Выгрузка_ШапкаДокумента"));
		ДанныеНастроекИзКэша.Вставить("ПроизвольныеКодыТабличнойЧасти", ЛокЯдро_ПолучитьИзКэшаНастройкуSMARTS("ПроизвольныеКоды_Выгрузка_ТабличнаяЧастьДокумента"));			
		
		ДокументыКВыгрузке = ОтобранныеДокументы.ВыгрузитьКолонку("Ссылка");
		
		Для Каждого Документ1С Из ДокументыКВыгрузке Цикл
			
			Если Найти(ВРег(СокрЛП(Документ1С.Комментарий)), ВРег(СокрЛП("комментарий отсечения"))) Тогда
				Продолжить;		
			ИначеЕсли ДокументыMS.Найти(Строка(Документ1С), "Имя") <> Неопределено Тогда // этот документ уже выгружен в MS	
				Продолжить;
			КонецЕсли;			
					
			// Вставить интерактивную форму выбора БП если их больше 1	
			МетаданныеДокумента1С = Документ1С.Метаданные();
			СтруктураОтбора = Новый Структура("ТипИсходногоДокумента1С, Используется", СокрЛП(МетаданныеДокумента1С.Имя), Истина); 
			НайденныеСтроки = НастройкиБизнесПроцессов.НайтиСтроки(СтруктураОтбора);
			
			Если НЕ НайденныеСтроки.Количество() Тогда
				
				Сообщение = "Не удалось подобрать настройку бизнес-процесса для документа """ + СокрЛП(Документ1С) + """";
				Сообщить(Сообщение);		
				ЗаписьЖурналаРегистрации("КлеверенсСофтТерминалыСбораДанных.Регламентный обмен документами", УровеньЖурналаРегистрации.Ошибка, , , Сообщение);			
				Продолжить;		
				
			ИначеЕсли НайденныеСтроки.Количество() = 1 Тогда
				
				ID_БизнесПроцесса = НайденныеСтроки[0].ID_БизнесПроцесса;
				
			ИначеЕсли НайденныеСтроки.Количество() > 1 Тогда
				
				Сообщение = "Слишком много настроек бизнес-процесса для документа """ + СокрЛП(Документ1С) + """";
				Сообщить(Сообщение);		
				ЗаписьЖурналаРегистрации("КлеверенсСофтТерминалыСбораДанных.Регламентный обмен документами", УровеньЖурналаРегистрации.Ошибка, , , Сообщение);			
				Продолжить;
			КонецЕсли;		
			
			Отбор = Новый Структура;
			
			Отбор.Вставить("Используется", Истина);
			Отбор.Вставить("ТипИсходногоДокумента1С", ЛокЯдро_ПолучитьТипДокументаПоСсылке(Документ1С));
			Отбор.Вставить("ID_БизнесПроцесса", ID_БизнесПроцесса);
			
			ДанныеНастроекИзКэша.Вставить("СписокБизнесПроцессов",  ЛокЯдро_ПолучитьИзКэшаЗначениеТабличнойНастройкиSMARTS("НастройкиБизнесПроцессов", Отбор, ""));
			
			ЛокЯдро_СформироватьИЗаписатьДокументВБазуSMARTS(Документ1С, ДанныеНастроекИзКэша, ID_БизнесПроцесса, ID_БазыMS);				
			
			ЗаписьЖурналаРегистрации("КлеверенсСофтТерминалыСбораДанных.Регламентный обмен документами", УровеньЖурналаРегистрации.Информация, , , "Документ """ + СокрЛП(Документ1С) + """ выгружен из 1С на сервер Mobile SMARTS");
			
		КонецЦикла;
			
		ЗаписьЖурналаРегистрации("КлеверенсСофтТерминалыСбораДанных.Регламентный обмен документами", УровеньЖурналаРегистрации.Информация, , , "Завершена выгрузка документов из 1С на сервер Mobile SMARTS");
		
		// ****************************************** --- выгрузка документов из 1С в Mobile SMARTS ******************************************

		Возврат Истина;
	
	КонецЕсли;
	
КонецФункции

#КонецОбласти



#КонецОбласти
