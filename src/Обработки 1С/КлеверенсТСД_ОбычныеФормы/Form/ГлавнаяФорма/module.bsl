Перем ОбщиеНастройкиИзменены;
Перем НастройкиВыгрузкиИзменены;

Перем ТекущаяБазаСуществует;

Перем СерверДоступен;

Перем РегламентныеЗаданияВыполнены;

Перем ПроверкаБезопасностиПрошла;

#Область ОбработчикиСобытийФормы

Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)
	
	ОчиститьСообщения();	
	ПроверкаБезопасностиПрошла = Ложь;
	 
	_ЛокКонтекст = ПолучитьФорму("ЛокальныйКонтекст");
	_ЛокКонтекст._ГлКонтекст = ОбработкаОбъект;
	
	Если ЗначениеЗаполнено(ПараметрЗапуска) 
		И НЕ ПараметрЗапускаИсключение(ПараметрЗапуска) Тогда
		// Первый запуск
		// Получаем ID базы из параметра
		Поз = Найти(НРег(ПараметрЗапуска), "/c");
		Если Поз > 0 Тогда
	    	ПараметрЗапуска = СокрЛП(Прав(ПараметрЗапуска, СтрДлина(ПараметрЗапуска)-Поз-2));
			Если Лев(ПараметрЗапуска, 1) = """" Тогда
	    		ПараметрЗапуска = Прав(ПараметрЗапуска, СтрДлина(ПараметрЗапуска)-1);
	  		КонецЕсли;
	  	КонецЕсли;
		БазаИзПараметров = "";
		Поз = Найти(ПараметрЗапуска, "|");
		Если Поз > 0 И Лев(ПараметрЗапуска, Поз-1) <> "" Тогда
			БазаИзПараметров = Лев(ПараметрЗапуска, Поз-1);
		Иначе
			БазаИзПараметров = СтрЗаменить(ПараметрЗапуска,"|","");
		КонецЕсли; 
		
		// ищем базу на клиенте и на сервере
		СписокБазSMARTS = Неопределено;
		РасположениеКомпоненты = "НаКлиенте";
		Если ЗначениеЗаполнено(БазаИзПараметров) Тогда
			// Ищем на сервере
			СписокБазSMARTS = _ЛокКонтекст.ЛокЯдро_ПолучитьСписокБазНаСервереSMARTS(РасположениеКомпоненты);
			
			ПроверкаБезопасностиПрошла = Истина;
			
			Если СписокБазSMARTS.Найти(БазаИзПараметров, "Ид") <> Неопределено Тогда
				ТекущаяБазаСуществует = Истина;
			КонецЕсли;
			
			// Не нашли на сервере - ищем на клиенте
			Если НЕ ТекущаяБазаСуществует Тогда
				РасположениеКомпоненты = "НаСервере";
				СписокБазSMARTS = _ЛокКонтекст.ЛокЯдро_ПолучитьСписокБазНаСервереSMARTS(РасположениеКомпоненты);
				Если СписокБазSMARTS.Найти(БазаИзПараметров, "Ид") <> Неопределено Тогда
					ТекущаяБазаСуществует = Истина;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		_ЛокКонтекст.ЛокЯдро_СохранитьДанныеВХранилище1С("Cleverence_РасположениеКомпоненты", РасположениеКомпоненты);
		
		Если ТекущаяБазаСуществует Тогда
			СтрокаТекущейБазы = СписокБазSMARTS.Найти(БазаИзПараметров, "Ид");
			СерверДоступен = _ЛокКонтекст.ЛокЯдро_ПроверитьСозданиеКОМОбъекта()
			И _ЛокКонтекст.КомЯдро_ПроверитьСоединениеССерверомSMARTS(БазаИзПараметров, Ложь);
			Если СерверДоступен Тогда
				ПараметрыПодключенияMS = Новый Структура;
				ПараметрыПодключенияMS.Вставить("Ид", 							СтрокаТекущейБазы.Ид);
				ПараметрыПодключенияMS.Вставить("Имя", 							СтрокаТекущейБазы.Имя);
				ПараметрыПодключенияMS.Вставить("ИдПриложения", 				СтрокаТекущейБазы.ИдПриложения);			
				ПараметрыПодключенияMS.Вставить("ИмяПриложения", 				СтрокаТекущейБазы.ИмяПриложения);
				ПараметрыПодключенияMS.Вставить("УровеньПриложения", 			СтрокаТекущейБазы.УровеньПриложения);
				ПараметрыПодключенияMS.Вставить("СтрокаПодключения", 			СтрокаТекущейБазы.СтрокаПодключения);
				ПараметрыПодключенияMS.Вставить("ИдОсновногоПриложения", 		СтрокаТекущейБазы.ИдОсновногоПриложения);
				ПараметрыПодключенияMS.Вставить("РабочийКаталог", 				СтрокаТекущейБазы.РабочийКаталог);
				ПараметрыПодключенияMS.Вставить("ИмяИнтеграционнойОбработки",	СтрокаТекущейБазы.ИмяИнтеграционнойОбработки);
				ПараметрыПодключенияMS.Вставить("ПутьИнтеграционнойОбработки",	СтрокаТекущейБазы.ПутьИнтеграционнойОбработки);
				
				_ЛокКонтекст.ЛокЯдро_СохранитьДанныеВХранилище1С("Cleverence_ПараметрыПодключенияMS", ПараметрыПодключенияMS);
				_ЛокКонтекст.ЛокЯдро_Инициализация("");
				ПараметрыПервогоЗапуска = ПолучитьДанныеДляПервогоЗапуска();
				ПараметрыПервогоЗапуска.Вставить("Ид", СтрокаТекущейБазы.Ид);
				ПараметрыПервогоЗапуска.Вставить("ИдПриложения", СтрокаТекущейБазы.ИдПриложения);
				ПараметрыПервогоЗапуска.Вставить("УровеньПриложения", СтрокаТекущейБазы.УровеньПриложения);
				ПараметрыПервогоЗапуска.Вставить("ИдОсновногоПриложения", СтрокаТекущейБазы.ИдОсновногоПриложения);
				_ЛокКонтекст.ЛокЯдро_СохранитьНастройкиВБазеSMARTS(ПараметрыПервогоЗапуска);
				ЗавершитьРаботуСистемы(Ложь);
			КонецЕсли;
		Иначе
			ID_ТекущейБазы = БазаИзПараметров;
			Сообщить("База с таким идентификатором [" + БазаИзПараметров + "] не найдена!");
			СерверДоступен = Ложь;
		КонецЕсли;
		
	Иначе
		ПараметрыПодключенияMS = _ЛокКонтекст.ЛокЯдро_ПолучитьДанныеИзХранилища1С("Cleverence_ПараметрыПодключенияMS");
		Если ПараметрыПодключенияMS <> Неопределено Тогда
			РасположениеКомпоненты = _ЛокКонтекст.ЛокЯдро_ПолучитьДанныеИзХранилища1С("Cleverence_РасположениеКомпоненты");
			Если РасположениеКомпоненты = Неопределено Тогда
				РасположениеКомпоненты = "НаСервере";
			КонецЕсли;
			
			Оповестить("СменаСтатуса","НачалоВыполненияПроцедурыЗапускаОбработки");

			СписокБазSMARTS = _ЛокКонтекст.ЛокЯдро_ПолучитьСписокБазНаСервереSMARTS(РасположениеКомпоненты);
			
			ПроверкаБезопасностиПрошла = Истина;
			
			Если СписокБазSMARTS = Неопределено Тогда				
				Сообщить("Не удалось подключить внешнюю компоненту. Пожалуйста, убедитесь, что на компьютере установлена платформа Mobile SMARTS и зарегистрирована внешняя компонента
						|Варианты решения: 
						|1) Зарегистрировать внешнюю компоненту [C:\Program Files (x86)\Cleverence Soft\Mobile SMARTS\Connectivity\Зарегистрировать COM.bat]
						|2) Установить/переустановить платформу Mobile SMARTS
						|3) Обратиться в техническую поддержку по адресу [https://cleverence.ru/sd]");					
				Возврат;
			КонецЕсли;	
			
			СтрокаБазы = СписокБазSMARTS.Найти(ПараметрыПодключенияMS.Ид, "Ид");
			
			Если _ЛокКонтекст.ЛокЯдро_ПроверитьСозданиеКОМОбъекта() Тогда

				СерверДоступен = _ЛокКонтекст.КомЯдро_ПроверитьСоединениеССерверомSMARTS(ПараметрыПодключенияMS.Ид, Ложь);
				Если СтрокаБазы = Неопределено Тогда
					Сообщить("База с таким идентификатором [" + ПараметрыПодключенияMS.Ид + "] не найдена!");
				Иначе
					ТекущаяБазаСуществует = Истина;	
					ID_ТекущейБазы = СтрокаБазы.Ид;
					ТекущаяБаза = СтрокаБазы.Имя;
					ИмяПриложения = ?(СписокБазSMARTS.Колонки.Найти("ИмяПриложения") <> Неопределено, СтрокаБазы.ИмяПриложения, "");
					
					Оповестить("СменаСтатуса","НачалоПодключенияИнтеграционнойОбработкиСообщениеБезопасности");
					
					РезультатПодключенияИнтеграционнойОбработки = _ЛокКонтекст.ЛокЯдро_ПодключитьИнтеграционнуюОбработку();
					
				КонецЕсли;
			Иначе
				СерверДоступен = Ложь;
				Сообщить("Ошибка создания COM объекта для работы с обработкой!");
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриОткрытии()
	
	Если ПроверкаБезопасностиПрошла = Ложь Тогда
		ПередОткрытием(Ложь,Истина);
	КонецЕсли;
	
	Если _ЛокКонтекст.ЛокЯдро_ПроверитьСозданиеКОМОбъекта() Тогда

		Если ТекущаяБазаСуществует Тогда		
			Если СерверДоступен Тогда
				_ЛокКонтекст.ЛокЯдро_Инициализация(); 
			КонецЕсли;
		Иначе
			ФормаПодключения = ПолучитьФорму("ФормаСлужебная_НастройкиПодключения");
			ФормаПодключения._ЛокКонтекст = _ЛокКонтекст;
			ФормаПодключения.БазаСМАРТС = ID_ТекущейБазы;
			Пауза = ФормаПодключения.ОткрытьМодально();
			СерверДоступен = _ЛокКонтекст.КомЯдро_ПроверитьСоединениеССерверомSMARTS(ID_ТекущейБазы);
			Если СерверДоступен Тогда
				ID_ТекущейБазы 	= ПараметрыПодключенияMS.Ид;
				ТекущаяБаза     = ПараметрыПодключенияMS.Имя;
				ИмяПриложения 	= ПараметрыПодключенияMS.ИмяПриложения;
				
				_ЛокКонтекст.ЛокЯдро_ПодключитьИнтеграционнуюОбработку();	
			КонецЕсли;
		КонецЕсли;
		
		Если СерверДоступен Тогда
			
			ВосстановитьОбщиеНастройкиSMARTS();
			
			УстановитьСписокВыбораУзлов();
			ID_ТекущегоУзла = _ЛокКонтекст.ДанныеТекущегоУзла.ID_Узла;
			
			// получаем форму списка БП, если нужно, меняем структуру таблицы настроек БП (для выгрузки из нескольких ТЧ 1С) и сохраняем её
			ОбновитьТаблицуНастроекБизнесПроцессов();
			ОбновитьИнформациюОбИнтеграционнойОбработке();
		Иначе
			Оповестить("СменаСтатуса",Новый Структура("Статус,Параметр","РаботаССерверомБазаНедоступна",ID_ТекущейБазы));
			Сообщить("Получить данные конфигурации из подключенной базы Mobile SMARTS не удалось,"
			+?(ПараметрыПодключенияMS<>Неопределено,Символы.ПС+""""+ТекущаяБаза+""", """+ ПараметрыПодключенияMS.СтрокаПодключения+"""","")+
			"
			|Если ошибка повторяется обратитесь в техническую поддержку Клеверенс
			|https://cleverence.ru/sd");
					
		КонецЕсли;
		
		ВерсияОбработки = _ЛокКонтекст.ЛокЯдро_ПолучитьИнформациюОВнешнейОбработке("Версия");
		
		ПодключеннаяКонфигурация = Метаданные.Имя+", "+Метаданные.Версия;
			
		
		
		Если ID_ТекущегоУзла <> "" Тогда
			_ЛокКонтекст.ЛокЯдро_УстановитьДанныеТекущегоУзла(ID_ТекущегоУзла);	
		КонецЕсли;
		
		УстановитьЗаголовокФормы();
		
		РегламентныеЗаданияВыполнены = Ложь;
	Иначе
		Оповестить("СменаСтатуса","ПроверкаБезопасностиПройденаПроверямЗапускКомMS");	
	КонецЕсли;
	
	Если ПараметрЗапуска = "ВыполнитьРегламентныеЗадания" Тогда		
		ВыполнитьРегламентныйОбмен();
		ЗавершитьРаботуСистемы(Ложь, Ложь);
	КонецЕсли;	
	
КонецПроцедуры

Процедура СсылкаНаИнформациюПоРаботеСОбработкой()
	ЗапуститьПриложение("https://www.cleverence.ru/support/category:697/");
КонецПроцедуры

Функция ПараметрЗапускаИсключение(ПараметрЗапуска)
	
	СписокИсключений = Новый СписокЗначений;
	СписокИсключений.Добавить("/С ЗапуститьОбновлениеИнформационнойБазы"); //УТАП 10.3 всегда запускает с таким параметром
	СписокИсключений.Добавить("ОбновитьКомпоненту");                       // Далион УМ
	
	ЗначениеНайдено = Не (СписокИсключений.НайтиПоЗначению(ПараметрЗапуска) = Неопределено);
	
	Возврат ЗначениеНайдено;
	
КонецФункции

Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	Если ИмяСобытия = "СменаСтатуса" Тогда
		СменитьСтатус(Параметр);	
	КонецЕсли; 	
КонецПроцедуры

#КонецОбласти


#Область ОбработчикиСобытийЭлементовФормы

Процедура ID_УзлаПриИзменении(Элемент)
	_ЛокКонтекст.ЛокЯдро_УстановитьДанныеТекущегоУзла(ID_ТекущегоУзла);
	
	СтруктураНастроек = Новый Структура;
	СтруктураНастроек.Вставить("ID_ТекущегоУзла", 					   ID_ТекущегоУзла);
	_ЛокКонтекст.ЛокЯдро_СохранитьНастройкиВБазеSMARTS(СтруктураНастроек);
	
КонецПроцедуры

Процедура ID_ТекущегоУзлаНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	
	Если НЕ _ЛокКонтекст.КомЯдро_ПроверитьСоединениеССерверомSMARTS(ID_ТекущейБазы) Тогда
		Возврат;
	КонецЕсли;

	УстановитьСписокВыбораУзлов();
КонецПроцедуры

Процедура ID_УзлаОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если НЕ ЗначениеЗаполнено(ID_ТекущегоУзла) Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаУзла = _ЛокКонтекст.ЛокЯдро_ПолучитьИзКэшаЗначениеТабличнойНастройкиSMARTS("Узлы", Новый Структура("ID_Узла", ID_ТекущегоУзла));
	
	ФормаРедактирования = ПолучитьФорму("ФормаНастройки_Узел", ЭтаФорма, ЭтаФорма);
	ФормаРедактирования._ЛокКонтекст = _ЛокКонтекст;
	Для Каждого Колонка Из СтрокаУзла.Колонки Цикл
		ФормаРедактирования[Колонка.Имя] = СтрокаУзла[0][Колонка.Имя];
	КонецЦикла;
	ЗаполнитьЗначенияСвойств(ФормаРедактирования, СтрокаУзла);
	
	РедактируемыйУзел = ФормаРедактирования.ОткрытьМодально();
	
	Если РедактируемыйУзел <> Неопределено Тогда
		// Обновить данные текущего узла в кэше.
		ID_ТекущегоУзла = _ЛокКонтекст.ДанныеТекущегоУзла.ID_Узла;
	КонецЕсли;
	
КонецПроцедуры

Процедура ID_УзлаОчистка(Элемент, СтандартнаяОбработка)
	_ЛокКонтекст.ЛокЯдро_УстановитьДанныеТекущегоУзла();
КонецПроцедуры

Процедура ВыгрузитьСправочникиНажатие(Элемент)
	
	ПроверкаИнициализации();
	
	Если НЕ _ЛокКонтекст.КомЯдро_ПроверитьСоединениеССерверомSMARTS(ID_ТекущейБазы) Тогда
		Возврат;
	КонецЕсли;

	ВыгрузитьСправочники();
КонецПроцедуры

Процедура ОткрытьОменДокументамиНажатие(Элемент)
	
	ПроверкаИнициализации();
	
	Если НЕ _ЛокКонтекст.КомЯдро_ПроверитьСоединениеССерверомSMARTS(ID_ТекущейБазы) Тогда		
		Возврат;
	КонецЕсли;
	
	ФормаОбмена = ПолучитьФорму("ОбменДокументами", ЭтаФорма, ЭтаФорма);		
	ФормаОбмена._ЛокКонтекст = _ЛокКонтекст;
		
	Если НЕ ФормаОбмена.Открыта() Тогда
		ОткрытьФорму(ФормаОбмена);
	Иначе
		ФормаОбмена.Активизировать();
	КонецЕсли;	
	
КонецПроцедуры

Процедура ОткрытьНастройкиНажатие(Элемент)
	
	ПроверкаИнициализации();
	
	ЭлементыФормы.ДополнительнаяГруппа.Страницы.ГруппаНастроек.Видимость = НЕ ЭлементыФормы.ДополнительнаяГруппа.Страницы.ГруппаНастроек.Видимость;	
	ЭлементыФормы.ДополнительнаяГруппа.Страницы.ГруппаИнформация.Видимость = НЕ ЭлементыФормы.ДополнительнаяГруппа.Страницы.ГруппаНастроек.Видимость;
	
КонецПроцедуры

Процедура ВыполнитьРегламентныйОбменНажатие(Элемент)
	
	ВыполнитьРегламентныйОбмен();
	
КонецПроцедуры

// Изменяет описание статуса, согласно полученному параметру
// 
// Параметры:
// 	Параметр - Структура - Структура с описанием статуса
Процедура СменитьСтатус(Параметр)
	Если ТипЗнч(Параметр) = Тип("Структура") Тогда
		СтатусЗапускаОсновнойОбработки = Параметр.Статус;
		ПереданныйПараметр = Параметр.Параметр;
	Иначе
		СтатусЗапускаОсновнойОбработки = Параметр;	
		ПереданныйПараметр = "";
	КонецЕсли;		
	
	УстановитьЦветСтатуса();
	ОбновитьВидимостьЭлементов();
	
	Если Параметр = "НачалоВыполненияПроцедурыЗапускаОбработки" Тогда
		ТекстСостоянияОбработки = "Работа невозможна! Проверка безопасности базы 1С: Предприятие заблокировала работу обработки, перезапустите обработку!";		
		УстановитьЦветСтатуса(1);		
		ОбновитьВидимостьЭлементов(Ложь,Ложь,Истина);
		
	ИначеЕсли Параметр="ПроверкаБезопасностиПройденаПроверямЗапускКомMS" Тогда
		ТекстСостоянияОбработки = "Работа невозможна! COM-компонента Mobile SMARTS не найдена. Требуется устранить проблему и перезапустить обработку!";		
		УстановитьЦветСтатуса(1);		
		ОбновитьВидимостьЭлементов(Ложь,Ложь,Истина);
		
	ИначеЕсли Параметр="КоннекторMSСозданПроверяемДоступностьБазы" Тогда
		ТекстСостоянияОбработки = "Работа невозможна! База не найдена или недоступна, выберите другую базу и перезапустите обработку!";		
		УстановитьЦветСтатуса(1);		
		ОбновитьВидимостьЭлементов(Ложь,Истина);
		
	ИначеЕсли СтатусЗапускаОсновнойОбработки="БазаНайденаИПодключенаПолучаемНастройки" Тогда
		ТекстСостоянияОбработки = "Работа невозможна! Возникла непредвиденная проблема при получении настроек из базы Mobile SMARTS, устраните проблему и перезапустите обработку!";
		УстановитьЦветСтатуса(1);
		
	ИначеЕсли СтатусЗапускаОсновнойОбработки="ПрямаяРаботаТСДНеПодключен" Тогда
		ТекстСостоянияОбработки = "Работа невозможна! Подключите ТСД к ПК и перезапустите обработку!";
		УстановитьЦветСтатуса(1);
		
	ИначеЕсли СтатусЗапускаОсновнойОбработки="РаботаССерверомБазаНедоступна" Тогда
		ТекстСостоянияОбработки = "Работа невозможна! База Mobile SMARTS с ID: <"+ПереданныйПараметр+"> недоступна, перезапустите сервер Mobile SMARTS и перезапустите обработку!";
		УстановитьЦветСтатуса(2);
		ОбновитьВидимостьЭлементов(Ложь,Истина);
		
	ИначеЕсли СтатусЗапускаОсновнойОбработки="РаботаСПапкойДанныеНеДоступны" Тогда
		ТекстСостоянияОбработки = "Работа невозможна! Данные в папке недоступны, выгрузите данные в папку из менеджера баз Mobile SMARTS и перезапустите обработку!";
		УстановитьЦветСтатуса(2);
		
	ИначеЕсли СтатусЗапускаОсновнойОбработки="НачалоПодключенияИнтеграционнойОбработкиСообщениеБезопасности" Тогда
		ТекстСостоянияОбработки = "Проверка безопасности базы 1С: Предприятие заблокировала подключение интеграционной обработки, перезапустите обработку!";		
		УстановитьЦветСтатуса(1);
		ОбновитьВидимостьЭлементов(Ложь,Ложь,Истина);
		
	ИначеЕсли СтатусЗапускаОсновнойОбработки="НастройкиИзБазыПолученыПодключаемИнтеграционнуюОбработку" Тогда
		ТекстСостоянияОбработки = "Ограниченный функционал! Интеграционная обработка не найдена, функционал сильно ограничен!";
		УстановитьЦветСтатуса(2);
		
	ИначеЕсли СтатусЗапускаОсновнойОбработки="ПодключеннаяИнтеграционнаяОбработкаНеТотФайл" Тогда
		ТекстСостоянияОбработки = "Ограниченный функционал! Подключенный файл не является интеграционной обработкой, функционал сильно ограничен!";
		УстановитьЦветСтатуса(2);
		
	ИначеЕсли СтатусЗапускаОсновнойОбработки="ИнтеграционнаяОбработкаНайденаЗапускаемЕё" Тогда
		ТекстСостоянияОбработки = "Ограниченный функционал! Ошибка при подключении интеграционной обработки, функционал сильно ограничен!";
		УстановитьЦветСтатуса(2);
		
	ИначеЕсли СтатусЗапускаОсновнойОбработки="ОшибкаПриЗапускеИнтеграционнойОбработки" Тогда
		ТекстСостоянияОбработки = "Ограниченный функционал! Ошибка при подключении интеграционной обработки, функционал сильно ограничен!";
		УстановитьЦветСтатуса(2);
		
	ИначеЕсли СтатусЗапускаОсновнойОбработки="ПодключеннаяИнтеграционнаяОбработкаДляДругойКонфигурации" Тогда
		ТекстСостоянияОбработки = "Можно работать! Интеграционная обработка для другой конфигурации, возможны ошибки при работе!";
		УстановитьЦветСтатуса(3);
		
	ИначеЕсли СтатусЗапускаОсновнойОбработки="ПодключеннаяИнтеграционнаяОбработкаДляДругойВерсии" Тогда
		ТекстСостоянияОбработки = "Можно работать! Интеграционная обработка для другой версии конфигурации, возможны ошибки при работе!";
		УстановитьЦветСтатуса(3);
		
	ИначеЕсли СтатусЗапускаОсновнойОбработки="БезОшибок" Тогда
		ТекстСостоянияОбработки = "Можно работать! Всё загружено без ошибок!";
		
	КонецЕсли;	
	
КонецПроцедуры

#Область ОбработчикиСобытийЭлементовФормы_ОкноГлавныхНастроек

Процедура ТекущаяБазаОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ФормаНастройки = ПолучитьФорму("ФормаСлужебная_НастройкиПодключения");
	ФормаНастройки._ЛокКонтекст = _ЛокКонтекст;
	
	ФормаНастройки.ОткрытьМодально();
	
	ПараметрыПодключенияMS = _ЛокКонтекст.ЛокЯдро_ПолучитьДанныеИзХранилища1С("Cleverence_ПараметрыПодключенияMS");
	ID_ТекущейБазы = ПараметрыПодключенияMS.Ид;
	ТекущаяБаза = ПараметрыПодключенияMS.Имя;
	ИмяПриложения = ПараметрыПодключенияMS.ИмяПриложения;
	
	Если _ЛокКонтекст.ЛокЯдро_ПроверитьСозданиеКОМОбъекта()
		И _ЛокКонтекст.КомЯдро_ПроверитьСоединениеССерверомSMARTS(ПараметрыПодключенияMS.Ид, Истина) Тогда
		Если _ЛокКонтекст.ЛокЯдро_ПодключитьИнтеграционнуюОбработку() = Истина Тогда	
			ОбновитьИнформациюОбИнтеграционнойОбработке();
		КонецЕсли;
	КонецЕсли;
	
	УстановитьЗаголовокФормы();
		
КонецПроцедуры

Процедура РедактироватьНастройкиУзловНажатие(Элемент)
	
	ФормаОткр 					= ПолучитьФорму("ФормаСписка_Узлы",,ЭтаФорма);
	ФормаОткр._ЛокКонтекст 		= _ЛокКонтекст;
	ФормаОткр.ID_ТекущейБазы 	= ID_ТекущейБазы;
	ФормаОткр.ОткрытьМодально();	
	
КонецПроцедуры

Процедура РедактироватьГлобальныеПараметрыНажатие(Элемент)
	
	ФормаОткр = ПолучитьФорму("ФормаСписка_ГлобальныеПараметры",,ЭтаФорма);
	ФормаОткр._ЛокКонтекст = _ЛокКонтекст;
	ФормаОткр.ОткрытьМодально();	
	
КонецПроцедуры

Процедура РедактироватьГлобальныеНастройкиДляОбменаСправочниковНажатие(Элемент)
	
	ПроверкаИнициализации();
	
	Если НЕ _ЛокКонтекст.КомЯдро_ПроверитьСоединениеССерверомSMARTS(ID_ТекущейБазы) Тогда
		Возврат;
	КонецЕсли;

	ФормаОткр = ПолучитьФорму("ФормаСписка_ОтборыСправочников",,ЭтаФорма);
	ФормаОткр._ЛокКонтекст = _ЛокКонтекст;
	ФормаОткр.ID_Узла = _ЛокКонтекст.ДанныеТекущегоУзла.ID_Узла;
	ФормаОткр.НаименованиеУзла = _ЛокКонтекст.ДанныеТекущегоУзла.Наименование;	
	ФормаОткр.ОткрытьМодально();	
	
КонецПроцедуры

Процедура РедактироватьНастройкиБизнесПроцессовНажатие(Элемент)
	
	Если НЕ _ЛокКонтекст.КомЯдро_ПроверитьСоединениеССерверомSMARTS(ID_ТекущейБазы) Тогда
		Возврат;
	КонецЕсли;

	ФормаНастройкиБП = ПолучитьФорму("ФормаСписка_БизнесПроцессы", ЭтаФорма, ЭтаФорма);
	ФормаНастройкиБП._ЛокКонтекст = _ЛокКонтекст;
	ФормаНастройкиБП.ID_ТекущейБазы = ID_ТекущейБазы; // ZHKN 13.09.2017
	ФормаНастройкиБП.ОткрытьМодально();		
	
КонецПроцедуры

Процедура РедактироватьНастройкиДляОбменаОнлайнНажатие(Элемент)
	
	ФормаОтбора = ПолучитьФорму("ФормаСписка_ОтборыДокументов",,ЭтаФорма);
	ФормаОтбора._ЛокКонтекст = _ЛокКонтекст;
	ФормаОтбора.ID_Узла = _ЛокКонтекст.ДанныеТекущегоУзла.ID_Узла;
	ФормаОтбора.НаименованиеУзла = _ЛокКонтекст.ДанныеТекущегоУзла.Наименование;
	ФормаОтбора.ТипОбмена = "Онлайн";				
	ФормаОтбора.ОткрытьМодально();	
	
КонецПроцедуры

Процедура РедактироватьНастройкиДляОбменаИнтерактивНажатие(Элемент)
	
	ФормаОтбора = ПолучитьФорму("ФормаСписка_ОтборыДокументов",,ЭтаФорма);
	ФормаОтбора._ЛокКонтекст = _ЛокКонтекст;
	ФормаОтбора.ID_Узла = _ЛокКонтекст.ДанныеТекущегоУзла.ID_Узла;
	ФормаОтбора.НаименованиеУзла = _ЛокКонтекст.ДанныеТекущегоУзла.Наименование;
	ФормаОтбора.ТипОбмена = "Интерактивный";				
	ФормаОтбора.ОткрытьМодально();	
	
КонецПроцедуры

Процедура РедактироватьНастройкиДляОбменаАвтообменНажатие(Элемент)
	
	ФормаОтбора = ПолучитьФорму("ФормаСписка_ОтборыДокументов",,ЭтаФорма);
	ФормаОтбора._ЛокКонтекст = _ЛокКонтекст;
	ФормаОтбора.ID_Узла = _ЛокКонтекст.ДанныеТекущегоУзла.ID_Узла;
	ФормаОтбора.НаименованиеУзла = _ЛокКонтекст.ДанныеТекущегоУзла.Наименование;
	ФормаОтбора.ТипОбмена = "Автообмен";				
	ФормаОтбора.ОткрытьМодально();	
	
КонецПроцедуры

Процедура РедактироватьВсеНастройкиНажатие(Элемент)
	
	ФормаРедактированияНастроек = ПолучитьФорму("ФормаСлужебная_РедактированиеНастроек",,ЭтаФорма);
	ФормаРедактированияНастроек._ЛокКонтекст = _ЛокКонтекст;				
	ФормаРедактированияНастроек.Открыть();		
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти


#Область ВспомогательныеМеханизмы

Процедура ОбновитьИнформациюОбИнтеграционнойОбработке()
	
	//ОчиститьСообщения();
	
	ЦветНормальногоТекста = WebЦвета.КоролевскиГолубой; //["Фон выделения редактирования"] - из стиля получить не удалось;
	ЦветОшибки = WebЦвета.Красный;
		
	Если ИнтеграционнаяОбработка <> Неопределено Тогда
		
		ПутьКОбработке = ИнтеграционнаяОбработка.ИспользуемоеИмяФайла;
		ЦветПутиКОбработке = ЦветНормальногоТекста;
		ЭлементыФормы.ПутьКОбработке.КнопкаВыбора = Ложь;
		
		ИнформацияСовместимости = ИнтеграционнаяОбработка.ИнформацияСовместимости();
		//ИнформацияСовместимости содержит следующие поля:
		//	ВерсияИнтеграции 					- Строка, код версии интеграционной обработки
		//	ВерсияAPI                           - Число, версия поддерживаемого API 
		//	ПоддерживаемаяКонфигурацияМассивИмен- Массив строк, Названия поддерживаемых конфигураций
		//	ПоддерживаемаяКонфигурацияСиноним 	- Строка, Человеческое название поддерживаемой конфигурации(или нескольких)
		//	флСоответствуетКонфигурации			- булево, результат проверки соответствия имени конфигурации, сама проверка происходит внутри интеграционной обработки, сюда должен приходить готовый результат
		//	ПоддерживаемыеВерсииКонфигурации	- Строка, диапазон поддерживаемых версий конфигураций
		//	флСоответствуетВерсии				- булево, результат проверки соответствия версии 
		
		ВерсияИнтеграции 		= "API: v"+Строка(ИнформацияСовместимости.ВерсияAPI)+", "+ИнформацияСовместимости.ВерсияИнтеграции;
		КонфигурацияИнтеграции 	= ИнформацияСовместимости.ПоддерживаемаяКонфигурацияСиноним;
		ПоддерживаемыеВерсии 	= ИнформацияСовместимости.ПоддерживаемыеВерсииКонфигурации;

		//Должно быть написано красным и в конце поля восклицательный знак (!) если интеграционная обработке - не подходит для данной конфигурации
		//А так же, в аннотациях при наведении должно быть написано: "Подключенная конфигурации не поддерживается обработкой и может работать с ошибками, 
		//проверьте верно ли выбрана рабочая конфигурация 1С при установке +ИмяУстановленнойПрограммыБазы+".		
		//Должно быть написано красным и в конце поля восклицательный знак (!) если Метаданные.Версия - не входит в поддерживаемый диапазон
		//А так же, в аннотациях при наведении должно быть написано: "Данная версия конфигурации не поддерживается и может работать с ошибками". 				
		Если ИнформацияСовместимости.флСоответствуетКонфигурации Тогда			
			ЦветТекстаКонфигурации = ЦветНормальногоТекста;
			ЭлементыФормы.КонфигурацияИнтеграции.Подсказка = "";
		Иначе
			Оповестить("СменаСтатуса","ПодключеннаяИнтеграционнаяОбработкаДляДругойКонфигурации");
			ЦветТекстаКонфигурации = ЦветОшибки;
			КонфигурацияИнтеграции = КонфигурацияИнтеграции + " (!)";
			ЭлементыФормы.КонфигурацияИнтеграции.Подсказка = "
			|Подключенная конфигурации не поддерживается обработкой и может работать с ошибками, 
			|проверьте верно ли выбрана рабочая конфигурация 1С при установке """+ПараметрыПодключенияMS.Имя+"""";
			ЭлементыФормы.ПутьКОбработке.КнопкаВыбора = Истина;
			
			Сообщить("Ваша конфигурация 1С """+Метаданные.Синоним+""" не поддерживается выбранной обработкой интеграции (поддерживаемые конфигурации: """+ИнформацияСовместимости.ПоддерживаемаяКонфигурацияСиноним+"""). 
			|Убедитесь что выбрана верная обработка интеграции. Проверьте базу Mobile SMARTS на наличие обновлений. 
			|Возможно, что ваша конфигурация была переименована или её имя изменилось. 
			|В случае возникновения ошибок в работе приложения обратитесь в техническую поддержку: 
			|https://cleverence.ru/sd");
		КонецЕсли;
		
		Если ИнформацияСовместимости.флСоответствуетВерсии Тогда			
			ЦветТекстаВерсия = ЦветНормальногоТекста;
			ЭлементыФормы.ПоддерживаемыеВерсии.Подсказка = "";
		Иначе
			Оповестить("СменаСтатуса","ПодключеннаяИнтеграционнаяОбработкаДляДругойВерсии");
			ЦветТекстаВерсия = ЦветОшибки;
			ПоддерживаемыеВерсии = ПоддерживаемыеВерсии + " (!)";
			ЭлементыФормы.ПоддерживаемыеВерсии.Подсказка = "Данная версия конфигурации не поддерживается и может работать с ошибками";
			ЭлементыФормы.ПутьКОбработке.КнопкаВыбора = Истина;
			
			Если ИнформацияСовместимости.флСоответствуетКонфигурации Тогда			
				Сообщить("Версия вашей конфигурации 1С ("+Строка(Метаданные.Версия)+") не поддерживается выбранной обработкой интеграции (поддерживаемые версии "+ИнформацияСовместимости.ПоддерживаемыеВерсииКонфигурации+"). 
				|Убедитесь что выбрана верная обработка интеграции. Проверьте базу Mobile SMARTS на наличие обновлений. 
				|В случае возникновения ошибок в работе приложения обратитесь в техническую поддержку: 
				|https://cleverence.ru/sd");
			КонецЕсли;
		КонецЕсли;
		
		Если ИнформацияСовместимости.флСоответствуетКонфигурации 
			И ИнформацияСовместимости.флСоответствуетВерсии Тогда
			Оповестить("СменаСтатуса","БезОшибок");
		КонецЕсли;
	
	Иначе
		Оповестить("СменаСтатуса","НастройкиИзБазыПолученыПодключаемИнтеграционнуюОбработку");

		//Для всех трех - текст красным
		ПутьКОбработке = "Файл ""ИнтеграционнаяОбработка.epf"" неверный или отсутствует!";
		ВерсияИнтеграции = "Не подключена";
		КонфигурацияИнтеграции = "Не подключена";
		ЦветПутиКОбработке = ЦветОшибки;
		ЦветТекстаКонфигурации = ЦветОшибки;
		ЦветТекстаВерсия = ЦветОшибки;
		
		ЭлементыФормы.ПутьКОбработке.КнопкаВыбора = Истина;
		Если ПараметрыПодключенияMS <> Неопределено Тогда
			Оповестить("СменаСтатуса","ОшибкаПриЗапускеИнтеграционнойОбработки");

			ИмяИнтеграционнойОбработки  = ПараметрыПодключенияMS.ИмяИнтеграционнойОбработки;
			ПутьИнтеграционнойОбработки = ПараметрыПодключенияMS.ПутьИнтеграционнойОбработки;
					
			ПолныйПутьКИнтеграционнойОбработке = ПутьИнтеграционнойОбработки+ИмяИнтеграционнойОбработки;
			Сообщить("Файл интеграционной обработки по пути """+ПолныйПутьКИнтеграционнойОбработке+""" не найден, возможно он был удален или перемещен. 
			|Укажите путь к интеграционной обработке вручную и перезапустите текущую обработку. 
			|В случае возникновения проблем с подключением обратитесь в техническую поддержку: 
			|https://cleverence.ru/sd");
		КонецЕсли;
	КонецЕсли;	
	
	ЭлементыФормы.КонфигурацияИнтеграции.ЦветТекстаПоля = ЦветТекстаКонфигурации;
	ЭлементыФормы.ПоддерживаемыеВерсии.ЦветТекстаПоля 	= ЦветТекстаВерсия;
	ЭлементыФормы.ПутьКОбработке.ЦветТекстаПоля			= ЦветПутиКОбработке;
	
КонецПроцедуры

Процедура ВыгрузитьСправочники()
	
	Если Вопрос( "Выгрузить справочники ?", РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	_ЛокКонтекст.ЛокЯдро_ВыгрузитьТаблицыНаСерверSMARTS();

КонецПроцедуры

Процедура ОткрытьФормуНастроекВыгрузкиСправочников(ИмяТаблицы)
	
	ФормаНастроек = ПолучитьФорму("ФормаНастройки_ОтборСправочников", ЭтаФорма, ЭтаФорма);	
	ФормаНастроек._ЛокКонтекст = _ЛокКонтекст;
	ФормаНастроек.ИмяТаблицы = ИмяТаблицы;
	ФормаНастроек.ID_Узла = _ЛокКонтекст.ДанныеТекущегоУзла.ID_Узла;
	ФормаНастроек.ID_БазыSMARTS = _ЛокКонтекст.ДанныеТекущегоУзла.ID_БазыMS;
	ФормаНастроек.НаименованиеУзла = _ЛокКонтекст.ДанныеТекущегоУзла.Наименование;
	
	РезультатНастройки = ФормаНастроек.ОткрытьМодально();
	Если ЗначениеЗаполнено(РезультатНастройки) Тогда
		Отбор = Новый Структура("ИмяТаблицы", ИмяТаблицы);
		_ЛокКонтекст.ЛокЯдро_СохранитьСтрокуВТабличнойНастройкеMS("НастройкиОбменаСправочников", Отбор, РезультатНастройки, _ЛокКонтекст.ДанныеТекущегоУзла.ID_Узла);
	КонецЕсли;
	
КонецПроцедуры

Процедура ВосстановитьОбщиеНастройкиSMARTS()
	
	_ЛокКонтекст.ЛокЯдро_ЗаполнитьФормуЗначениямиИзСтруктуры(ЭтаФорма, _ЛокКонтекст.ТекущиеНастройкиMS);	
	
	НастройкиВыгрузкиИзменены = Ложь;
	ОбщиеНастройкиИзменены = Ложь;
	
КонецПроцедуры

Функция ВопросОСохраненииНастроек()
	
	ТекстВопроса = "Настройки были изменены. Сохранить новые настройки?";
	Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНетОтмена,, КодВозвратаДиалога.Да, "Внимание!");
	
	Возврат Ответ;
	
КонецФункции

Процедура ВыполнитьРегламентныйОбмен()
	
	Если НЕ РегламентныеЗаданияВыполнены ИЛИ (РегламентныеЗаданияВыполнены И Вопрос("Регламентный обмен уже был выполнен. Повторить?", РежимДиалогаВопрос.ДаНетОтмена, , , "Внимание") = КодВозвратаДиалога.Да) Тогда
		_ЛокКонтекст.ЛокЯдро_ВыгрузитьТаблицыНаСерверSMARTSПоРегламенту();
		_ЛокКонтекст.ЛокЯдро_ВыполнитьОбменДокументамиНаСервереSMARTSПоРегламенту();
		Сообщить("Регламентный обмен выполнен");
		РегламентныеЗаданияВыполнены = Истина;		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверкаИнициализации()
	
	Если Не НастройкиИнициализированы И Не _ЛокКонтекст.НастройкиИнициализированы Тогда
		_ЛокКонтекст.ЛокЯдро_Инициализация(); 
		
		ВерсияОбработки = _ЛокКонтекст.ЛокЯдро_ПолучитьИнформациюОВнешнейОбработке("Версия");
	
		ПодключеннаяКонфигурация = Метаданные.Имя+", "+Метаданные.Версия;

	КонецЕсли;
	
	Если Не ИнтеграционнаяОбработкаПодключена Тогда
		_ЛокКонтекст.ЛокЯдро_ПодключитьИнтеграционнуюОбработку();		
		
		ОбновитьИнформациюОбИнтеграционнойОбработке();
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбновитьВидимостьЭлементов(ОсновныеКнопкиДоступны = Истина, ДопКнопкаВыбораБазы = Ложь, ОграниченнаяИнформация = Ложь)
	
	// Группа кнопок для переинициализации настроек
	ЭлементыФормы.ВыгрузитьНоменклатуру.Доступность 	= ОсновныеКнопкиДоступны;
	ЭлементыФормы.НастроитьСправочники.Доступность 		= ОсновныеКнопкиДоступны;
	ЭлементыФормы.ОткрытьОменДокументами.Доступность 	= ОсновныеКнопкиДоступны;
	ЭлементыФормы.ОткрытьНастройки.Доступность 			= ОсновныеКнопкиДоступны;
	ЭлементыФормы.ID_ТекущегоУзла.Доступность 			= ОсновныеКнопкиДоступны;
	//ЭлементыФормы.ПутьКОбработке.Доступность 			= ОсновныеКнопкиДоступны;
	
	ЭлементыФормы.ПерезагрузитьОбработку.Видимость		= Не ОсновныеКнопкиДоступны;
	ЭлементыФормы.ВыбратьБазу.Видимость 				= ДопКнопкаВыбораБазы;
	
	// Группа информационных полей
	//Элементы.ИнформацияТекущаяБаза.Видимость 	= Не ОграниченнаяИнформация;
	//Элементы.ВерсияИнтеграции.Видимость 		= Не ОграниченнаяИнформация;
	//Элементы.ПутьКОбработке.Видимость 			= Не ОграниченнаяИнформация;
	//Элементы.КонфигурацияИнтеграции.Видимость 	= Не ОграниченнаяИнформация;
	//Элементы.ПоддерживаемыеВерсии.Видимость 	= Не ОграниченнаяИнформация;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьЦветСтатуса(Уровень = 4)
	
	ЦветСостояния = WebЦвета.Зеленый;

	Если Уровень = 1 Тогда
		ЦветСостояния = WebЦвета.Красный;	
	ИначеЕсли Уровень = 2 Тогда
		ЦветСостояния = WebЦвета.Томатный;	
	ИначеЕсли Уровень = 3 Тогда
		ЦветСостояния = WebЦвета.Золотой;	
	ИначеЕсли Уровень = 4 Тогда		
		ЦветСостояния = WebЦвета.Зеленый;	
	КонецЕсли;
	
	ЭлементыФормы.ТекстСостоянияОбработки.ЦветТекстаПоля = ЦветСостояния;
	
КонецПроцедуры

#КонецОбласти


#Область ВспомогательныеМеханизмы_РаботаСФормой

Процедура УстановитьСписокВыбораУзлов()
	
	ЭлементыФормы.ID_ТекущегоУзла.СписокВыбора.Очистить();
	
	ВсеУзлы = _ЛокКонтекст.ЛокЯдро_ПолучитьИзКэшаНастройкуSMARTS("Узлы");
	Если НЕ ВсеУзлы = Ложь Тогда
		Для Каждого СтрокаУзла Из ВсеУзлы Цикл
			ЭлементыФормы.ID_ТекущегоУзла.СписокВыбора.Добавить(СтрокаУзла.ID_Узла, СтрокаУзла.Наименование);
		КонецЦикла;
		ЭлементыФормы.ID_ТекущегоУзла.СписокВыбора.СортироватьПоПредставлению();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

Функция ПолучитьДанныеДляПервогоЗапуска()
	
	СисИнфо = Новый СистемнаяИнформация;
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ПодключеннаяБазаИмяКонфигурации1С",	  СокрЛП(Метаданные.Имя));
	СтруктураПараметров.Вставить("ПодключеннаяБазаСинонимКонфигурации1С", СокрЛП(Метаданные.Синоним)); 
	СтруктураПараметров.Вставить("ПодключеннаяБазаСтрокаСоединения",	  СокрЛП(СтрокаСоединенияИнформационнойБазы()));
	СтруктураПараметров.Вставить("ПодключеннаяБазаВерсияПлатформы1С",	  СокрЛП(СисИнфо.ВерсияПриложения));
	СтруктураПараметров.Вставить("ПодключеннаяБазаВерсияКонфигурации1С",  СокрЛП(Метаданные.Версия));
	
	Возврат СтруктураПараметров;
	
КонецФункции

Процедура УстановитьЗаголовокФормы()
	
	Заголовок = "Клеверенс: " + ИмяПриложения;
	
КонецПроцедуры

Процедура ПутьКОбработкеНачалоВыбора(Элемент, СтандартнаяОбработка)
	Диалог = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	Диалог.Заголовок = "Выбор файла";
	Диалог.Фильтр = "Внешние обработки 1С (*.epf)|*.epf";
	Диалог.ИндексФильтра = 0;
	Диалог.ПредварительныйПросмотр = Ложь;
	Диалог.ПроверятьСуществованиеФайла = Истина;
	Диалог.МножественныйВыбор = Ложь; 
	//Диалог.ПолноеИмяФайла = ПутьКФайлу;
	
	Если Диалог.Выбрать() Тогда
		
		ВыбранныйКаталог = Диалог.Каталог; 
		ПолныйПуть = Диалог.ПолноеИмяФайла;
		ИмяФайла  = СтрЗаменить(ПолныйПуть,ВыбранныйКаталог,"");
		
		ПараметрыПодключенияMS.ИмяИнтеграционнойОбработки = ИмяФайла;
		ПараметрыПодключенияMS.ПутьИнтеграционнойОбработки = ВыбранныйКаталог;
		_ЛокКонтекст.ЛокЯдро_СохранитьДанныеВХранилище1С("Cleverence_ПараметрыПодключенияMS", ПараметрыПодключенияMS);
		
		_ЛокКонтекст.ЛокЯдро_СохранитьНастройкуВБазеSMARTS("ИмяИнтеграционнойОбработкиКонфигурации1С", ИмяФайла);
		_ЛокКонтекст.ЛокЯдро_СохранитьНастройкуВБазеSMARTS("ПутьИнтеграционнойОбработкиКонфигурации1С", ВыбранныйКаталог);

		_ЛокКонтекст.ЛокЯдро_ПодключитьИнтеграционнуюОбработку();
		
		ОбновитьИнформациюОбИнтеграционнойОбработке();
		
	КонецЕсли;	
		
КонецПроцедуры

Процедура ОбновитьТаблицуНастроекБизнесПроцессов()

	ФормаНастройкиБП = ПолучитьФорму("ФормаСписка_БизнесПроцессы", ЭтаФорма, ЭтаФорма);
	ФормаНастройкиБП._ЛокКонтекст = _ЛокКонтекст;
	ФормаНастройкиБП.ID_ТекущейБазы = ID_ТекущейБазы; // ZHKN 13.09.2017	
	ФормаНастройкиБП.ОбновитьТаблицуНастроекБизнесПроцессов();

КонецПроцедуры

Процедура ПерезагрузитьОбработкуНажатие(Элемент)
	ПередОткрытием(Ложь, Истина);
	ПриОткрытии();
КонецПроцедуры


///////////////////////////////////////////////////////////////////////////////
//// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ

ТекущаяБазаСуществует = Ложь;
