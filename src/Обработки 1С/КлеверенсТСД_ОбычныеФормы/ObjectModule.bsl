
Функция СведенияОВнешнейОбработке() Экспорт
	
	РегистрационныеДанные = Новый Структура;
	
	РегистрационныеДанные.Вставить("БезопасныйРежим", Ложь);
	РегистрационныеДанные.Вставить("Вид", "ДополнительнаяОбработка");
	РегистрационныеДанные.Вставить("Наименование", "КлеверенсТСД_ОбычныеФормы"); 
	РегистрационныеДанные.Вставить("Версия", "1.2.0.3, Core, 08.05.2019, ОФ");
	РегистрационныеДанные.Вставить("Информация", "Данная обработка осуществляет обслуживание терминалов сбора данных, поддерживаемых драйвером «Клеверенс Софт: Компонента для подключения ТСД» (.dll)");
	РегистрационныеДанные.Вставить("Назначение", РегистрационныеДанные.Наименование);
	
	ТЗКоманд = Новый ТаблицаЗначений;
	ТЗКоманд.Колонки.Добавить("Идентификатор");
	ТЗКоманд.Колонки.Добавить("Представление");
	ТЗКоманд.Колонки.Добавить("Модификатор");
	ТЗКоманд.Колонки.Добавить("ПоказыватьОповещение");
	ТЗКоманд.Колонки.Добавить("Использование");
	
	СтрокаКоманды = ТЗКоманд.Добавить();
	СтрокаКоманды.Идентификатор        = Новый УникальныйИдентификатор;
	СтрокаКоманды.Представление        = РегистрационныеДанные.Наименование;
	СтрокаКоманды.ПоказыватьОповещение = Истина;
	СтрокаКоманды.Использование        = "ОткрытиеФормы";
 	
	РегистрационныеДанные.Вставить("Команды", ТЗКоманд);  	
	
	Возврат РегистрационныеДанные;
	
КонецФункции 

/////////////////////////////////////////////////////////////////
//// ЯДРО.
/////////////////////////////////////////////////////////////////

#Область ЯдроКонфигураций

#Область ЯдроКонфигураций_ОбщиеВызовы

Функция Конф_ПолучитьПрефиксКонфигурации()
	
	ПрефиксКонфигурации = "";
	Если ИнтеграционнаяОбработка <> Неопределено Тогда
		ПрефиксКонфигурации =  ИнтеграционнаяОбработка.Конф_ПрефиксКонфигурации();	
	КонецЕсли;
	
	Возврат ПрефиксКонфигурации;
	
КонецФункции

Функция Конф_ПолучитьПустуюСсылкуСправочника(ТипСправочника)
	
	ПустаяСсылка = Неопределено;
	Если ИнтеграционнаяОбработка <> Неопределено Тогда
		ПустаяСсылка = ИнтеграционнаяОбработка.Конф_ПолучитьПустуюСсылкуСправочника(ТипСправочника);
	КонецЕсли;
	
	Возврат ПустаяСсылка;	
КонецФункции

Функция Конф_ИспользоватьХарактеристикиНоменклатуры()
	
	Результат = Ложь;
	Если ИнтеграционнаяОбработка <> Неопределено Тогда
		Результат = ИнтеграционнаяОбработка.Конф_ИспользоватьХарактеристикиНоменклатуры();
	КонецЕсли;
	
	Возврат Результат;
	
 КонецФункции

Функция Конф_НаложитьДополнительныйОтборНаБизнесПроцессы(ТаблицаБП, Документ1С)
	
	Результат = ТаблицаБП;
	
	ПрефиксКонфигурации = Конф_ПолучитьПрефиксКонфигурации();
	
	Если ПрефиксКонфигурации = "ДалионУМ" Тогда
		Если ВРЕГ(Документ1С.Метаданные().Имя) = ВРЕГ("ЕГАИС_ТТН") Тогда
			Если Документ1С.Направление = Перечисления.ЕГАИС_НаправленияСообщений.Исходящее Тогда
				Результат = ТаблицаБП.Скопировать(Новый Структура("ТипДокументаMS", "ВозвратЕГАИС"));
			ИначеЕсли Документ1С.Направление = Перечисления.ЕГАИС_НаправленияСообщений.Входящее Тогда
				Результат = ТаблицаБП.Скопировать(Новый Структура("ТипДокументаMS", "ПоступлениеЕГАИС"));
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция Конф_ПолучитьМетаданныеНСИ()
		
	Если ИнтеграционнаяОбработка <> Неопределено Тогда
		МетаданныеНСИ = ИнтеграционнаяОбработка.Конф_ПолучитьМетаданныеНСИ();	
	Иначе
		МетаданныеНСИ = Неопределено;
	КонецЕсли;

	Возврат МетаданныеНСИ;

КонецФункции

#КонецОбласти

#Область ЯдроКонфигураций_ДетальныеВызовы

#КонецОбласти

#Область ЯдроКонфигураций_ОбработчикиЗаполненияДокументов

#Область ОбщиеОбработчики

Процедура Общий_ПередЗаполнениемДокумента	(СтруктураПараметров)
	
	
КонецПроцедуры

Процедура Общий_ПослеЗаполненияДокумента	(СтруктураПараметров)
	
	
КонецПроцедуры	

Процедура Общий_ПередЗаполнениемТЧ			(СтруктураПараметров)
	
	
КонецПроцедуры		

Процедура Общий_ПередЗаполнениемСтрокиТЧ	(СтруктураПараметров)
	
	
КонецПроцедуры		

Процедура Общий_ПослеЗаполненияСтрокиТЧ		(СтруктураПараметров)
	
	
КонецПроцедуры

Процедура Общий_ПослеЗаполненияТЧ			(СтруктураПараметров)
КонецПроцедуры	

#КонецОбласти

#КонецОбласти

#КонецОбласти

#Область ЯдроСистемы

#Область ГлобальныйКонтекст

#Область ГлобальныйКонтекст_Настройки

#Область ГлобальныйКонтекст_Настройки_Инициализация

Процедура ГлЯдро_Инициализация(ID_Узла = "",ПолнаяИнициализация = ложь)
	
	ПараметрыПодключенияMS   = ГлЯдро_ПолучитьДанныеИзХранилища1С("Cleverence_ПараметрыПодключенияMS");
	
	Если ИнтеграционнаяОбработка = Неопределено Тогда
		РезультатПодключенияВО = ГлЯдро_ПодключитьИнтеграционнуюОбработку();
		Если НЕ (РезультатПодключенияВО = Истина 
			ИЛИ РезультатПодключенияВО = "Интеграционная обработка не соответствует конфигурации или версии 1С") Тогда		
				НастройкиИнициализированы = Ложь;
			Возврат;
		КонецЕсли;
		
		ИнтеграционнаяОбработкаПодключена = Истина;
		
	КонецЕсли;	
	
	//ДанныеДляИнициализации = ГлЯдро_ПолучитьДанныеДляИнициализации(ID_Узла);
	Если ЭтоWebСервис Тогда
		ДатаАктуальностиКэшаВБазе = ГлЯдро_ПолучитьДанныеИзХранилища1С("Cleverence_ДатаАктуальностиКэша");
		Если ПолнаяИнициализация
			ИЛИ НЕ ТипЗнч(ДатаАктуальностиКэшаВБазе) = Тип("Дата") 
			ИЛИ ТекущаяДата() - ДатаАктуальностиКэшаВБазе > 3600 Тогда //Если настройки устарели на час то нужно переполучить
			ГлЯдро_СохранитьДанныеВХранилище1С("Cleverence_ДатаАктуальностиКэша", ТекущаяДата());
			ДанныеДляИнициализации = ГлЯдро_ПолучитьДанныеДляИнициализации(ID_Узла);
		Иначе
			ДанныеДляИнициализации = ГлЯдро_ПолучитьДанныеДляИнициализацииИзКэша(ID_Узла);
		КонецЕсли;
	Иначе
		ДанныеДляИнициализации = ГлЯдро_ПолучитьДанныеДляИнициализации(ID_Узла);
	КонецЕсли;
	
	КатегорииНастроекMS = ДанныеДляИнициализации.КатегорииНастроекMS;
	ТекущиеНастройкиMS  = ДанныеДляИнициализации.ТекущиеНастройкиMS;
	СтруктураМетаданных = ДанныеДляИнициализации.СтруктураМетаданных;
	ВычислимыеПоля      = ДанныеДляИнициализации.ВычислимыеПоля;
	ДанныеТекущегоУзла  = ДанныеДляИнициализации.ДанныеТекущегоУзла;
	
	НастройкиИнициализированы = Истина;
	
	
	
КонецПроцедуры

Функция ГлЯдро_ПолучитьДанныеДляИнициализации(ID_Узла, ЗаполнятьДанные = Истина) Экспорт
		
	ДанныеДляИнициализации = Новый Структура;
	
	КатегорииНастроек = ГлЯдро_ПолучитьКатегорииНастроекMS();
	ТекущиеНастройкиMS = ГлЯдро_ПолучитьПустуюСтруктуруНастроекSMARTS(КатегорииНастроек.СериализуемыеНастройки);
	СтруктураМетаданных = Новый Структура;
	СтруктураМетаданных.Вставить("Документы1С", ГлЯдро_ПолучитьМетаданныеДокументов1С()); 
	СтруктураМетаданных.Вставить("НастройкиMS", ГлЯдро_СформироватьМетаданныеНастроекMS()); 
	Если ЭтоWebСервис Тогда
		ГлЯдро_СохранитьДанныеВХранилище1С("Cleverence_СтруктураМетаданныхДокументы1С", СтруктураМетаданных.Документы1С);	
	КонецЕсли;
	
	ВычислимыеПоля = Новый Структура;
	ВычислимыеПоля.Вставить("СписокПолей1С", ГлЯдро_ПолучитьСписокВычислимыхПолей1С(СтруктураМетаданных.Документы1С)); 
	ВычислимыеПоля.Вставить("СписокПолейMS", ГлЯдро_ПолучитьСписокВычислимыхПолейMS()); 
	
	Если ЗаполнятьДанные Тогда
		ТекущиеНастройкиMS = ГлЯдро_ПолучитьНастройкиНаСервереSMARTS(ТекущиеНастройкиMS, КатегорииНастроек.УзловыеНастройки, ID_Узла);
		СтруктураМетаданных.Вставить("ДокументыMS", КомЯдро_ПолучитьМетаданныеДокументовMS()); 
	КонецЕсли;
	
	// Пользователи подключенной базы MS
	СтруктураМетаданных.Вставить("ПользователиMS", КомЯдро_ПолучитьПользователейMS()); 
	
	ДанныеДляИнициализации.Вставить("КатегорииНастроекMS", КатегорииНастроек);
	ДанныеДляИнициализации.Вставить("ТекущиеНастройкиMS", ТекущиеНастройкиMS);
	ДанныеДляИнициализации.Вставить("СтруктураМетаданных", СтруктураМетаданных);
	ДанныеДляИнициализации.Вставить("ВычислимыеПоля", ВычислимыеПоля);
	
	Если ЭтоWebСервис Тогда
		ГлЯдро_СохранитьДанныеВХранилище1С("Cleverence_ТекущиеНастройкиMS_"+ID_Узла, ТекущиеНастройкиMS);
		ГлЯдро_СохранитьДанныеВХранилище1С("Cleverence_СтруктураМетаданных", СтруктураМетаданных);
		ГлЯдро_СохранитьДанныеВХранилище1С("Cleverence_ВычислимыеПоля", ВычислимыеПоля);
	КонецЕсли;
	
	ДанныеТекущегоУзла = Новый Структура;
	ДанныеТекущегоУзла.Вставить("ID_Узла", 		"");
	ДанныеТекущегоУзла.Вставить("Наименование", "");
	ДанныеТекущегоУзла.Вставить("ID_БазыMS", 	"");		
	
	// Текущий узел
	Если ТекущиеНастройкиMS.Свойство("ID_ТекущегоУзла") 
		И ID_Узла <> ""  Тогда
		ID_ТекущегоУзла = ТекущиеНастройкиMS.ID_ТекущегоУзла;
	Иначе
		ID_ТекущегоУзла = "";
	КонецЕсли;
	
	Если ЗаполнятьДанные И ID_ТекущегоУзла <> "" И ТипЗнч(ТекущиеНастройкиMS.Узлы) = Тип("ТаблицаЗначений") Тогда
		ДанныеУзла = ТекущиеНастройкиMS.Узлы.Найти(ID_ТекущегоУзла, "ID_Узла");
		Если ДанныеУзла <> Неопределено Тогда			
			ДанныеТекущегоУзла.Вставить("ID_Узла", 		ID_ТекущегоУзла);
			ДанныеТекущегоУзла.Вставить("Наименование", ДанныеУзла.Наименование);
			Если ДанныеУзла.ИспользоватьЧастнуюБазу Тогда
				ДанныеТекущегоУзла.Вставить("ID_БазыMS", ДанныеУзла.ЧастнаяБазаMS);
			Иначе	
				ДанныеТекущегоУзла.Вставить("ID_БазыMS", ПараметрыПодключенияMS.Ид);
			КонецЕсли;				
		КонецЕсли;
	КонецЕсли;
	
	ДанныеДляИнициализации.Вставить("ДанныеТекущегоУзла", ДанныеТекущегоУзла);
	
	Возврат ДанныеДляИнициализации;
	
КонецФункции

Функция ГлЯдро_ПолучитьДанныеДляИнициализацииИзКэша(ID_Узла, ЗаполнятьДанные = Истина) Экспорт
		
	ДанныеДляИнициализации = Новый Структура;
	
	КатегорииНастроек = ГлЯдро_ПолучитьКатегорииНастроекMS();
	ТекущиеНастройкиMS = ГлЯдро_ПолучитьПустуюСтруктуруНастроекSMARTS(КатегорииНастроек.СериализуемыеНастройки);
	СтруктураМетаданных = Новый Структура;
	СтруктураМетаданных.Вставить("Документы1С", ГлЯдро_ПолучитьДанныеИзХранилища1С("Cleverence_СтруктураМетаданныхДокументы1С")); 
	СтруктураМетаданных.Вставить("НастройкиMS", ГлЯдро_СформироватьМетаданныеНастроекMS()); 
	
	ДанныеДляИнициализации.Вставить("КатегорииНастроекMS", КатегорииНастроек);
	ДанныеДляИнициализации.Вставить("ТекущиеНастройкиMS", ГлЯдро_ПолучитьДанныеИзХранилища1С("Cleverence_ТекущиеНастройкиMS_"+ID_Узла));
	ДанныеДляИнициализации.Вставить("СтруктураМетаданных", ГлЯдро_ПолучитьДанныеИзХранилища1С("Cleverence_СтруктураМетаданных"));
	ДанныеДляИнициализации.Вставить("ВычислимыеПоля", ГлЯдро_ПолучитьДанныеИзХранилища1С("Cleverence_ВычислимыеПоля"));
	
	ДанныеТекущегоУзла = Новый Структура;
	ДанныеТекущегоУзла.Вставить("ID_Узла", 		"");
	ДанныеТекущегоУзла.Вставить("Наименование", "");
	ДанныеТекущегоУзла.Вставить("ID_БазыMS", 	"");		
	
	// Текущий узел
	Если ТекущиеНастройкиMS.Свойство("ID_ТекущегоУзла") 
		И ID_Узла <> ""  Тогда
		ID_ТекущегоУзла = ТекущиеНастройкиMS.ID_ТекущегоУзла;
	Иначе
		ID_ТекущегоУзла = "";
	КонецЕсли;
	
	Если ЗаполнятьДанные И ID_ТекущегоУзла <> "" И ТипЗнч(ТекущиеНастройкиMS.Узлы) = Тип("ТаблицаЗначений") Тогда
		ДанныеУзла = ТекущиеНастройкиMS.Узлы.Найти(ID_ТекущегоУзла, "ID_Узла");
		Если ДанныеУзла <> Неопределено Тогда			
			ДанныеТекущегоУзла.Вставить("ID_Узла", 		ID_ТекущегоУзла);
			ДанныеТекущегоУзла.Вставить("Наименование", ДанныеУзла.Наименование);
			Если ДанныеУзла.ИспользоватьЧастнуюБазу Тогда
				ДанныеТекущегоУзла.Вставить("ID_БазыMS", ДанныеУзла.ЧастнаяБазаMS);
			Иначе	
				ДанныеТекущегоУзла.Вставить("ID_БазыMS", ПараметрыПодключенияMS.Ид);
			КонецЕсли;				
		КонецЕсли;
	КонецЕсли;
	
	ДанныеДляИнициализации.Вставить("ДанныеТекущегоУзла", ДанныеТекущегоУзла);
	
	Возврат ДанныеДляИнициализации;
	
КонецФункции

Функция ГлЯдро_ПолучитьКатегорииНастроекMS()
	
	СериализуемыеНастройки = Новый Массив;
	СериализуемыеНастройки.Добавить("НастройкиБизнесПроцессов");
	СериализуемыеНастройки.Добавить("НастройкиОбменаСправочников");
	СериализуемыеНастройки.Добавить("НастройкиОтборовУзлов_Онлайн");
	СериализуемыеНастройки.Добавить("НастройкиОтборовУзлов_Интерактивный");
	СериализуемыеНастройки.Добавить("НастройкиОтборовУзлов_Автообмен");	
	СериализуемыеНастройки.Добавить("Пользователи");
	СериализуемыеНастройки.Добавить("ПользователиТСД");
	СериализуемыеНастройки.Добавить("ГлобальныеПараметры");
	СериализуемыеНастройки.Добавить("Узлы");
	СериализуемыеНастройки.Добавить("ЗначенияПараметровУзлов");
	СериализуемыеНастройки.Добавить("ПроизвольныеКоды_Выгрузка_ШапкаДокумента");
	СериализуемыеНастройки.Добавить("ПроизвольныеКоды_Выгрузка_ТабличнаяЧастьДокумента");
	СериализуемыеНастройки.Добавить("ПроизвольныеКоды_Загрузка_ШапкаДокумента");
	СериализуемыеНастройки.Добавить("ПроизвольныеКоды_Загрузка_ТабличнаяЧастьДокумента");
	СериализуемыеНастройки.Добавить("ПроизвольныеОтборыДокументов");
	СериализуемыеНастройки.Добавить("ФормаОбменаВыбранныеКолонки");
	
	УзловыеНастройки = Новый Массив;
	УзловыеНастройки.Добавить("НастройкиОбменаСправочников");
	УзловыеНастройки.Добавить("НастройкиОтборовУзлов_Онлайн");
	УзловыеНастройки.Добавить("НастройкиОтборовУзлов_Интерактивный");
	УзловыеНастройки.Добавить("НастройкиОтборовУзлов_Автообмен");
	УзловыеНастройки.Добавить("Пользователи");
	УзловыеНастройки.Добавить("ПользователиТСД");
	УзловыеНастройки.Добавить("ЗначенияПараметровУзлов");
	
	НастройкиПодключения = Новый Массив;
	НастройкиПодключения.Добавить("Ид");
	НастройкиПодключения.Добавить("Имя");
	НастройкиПодключения.Добавить("ИдПриложения");
	НастройкиПодключения.Добавить("ИдОсновногоПриложения");
	НастройкиПодключения.Добавить("ИмяПриложения");
	НастройкиПодключения.Добавить("УровеньПриложения");
	НастройкиПодключения.Добавить("СтрокаПодключения");
	НастройкиПодключения.Добавить("РабочийКаталог"); 
	НастройкиПодключения.Добавить("ИмяИнтеграционнойОбработки");
	НастройкиПодключения.Добавить("ПутьИнтеграционнойОбработки");
	НастройкиПодключения.Добавить("ПодключеннаяБазаИмяКонфигурации1С");
	НастройкиПодключения.Добавить("ПодключеннаяБазаСинонимКонфигурации1С");
	НастройкиПодключения.Добавить("ПодключеннаяБазаСтрокаСоединения");
	НастройкиПодключения.Добавить("ПодключеннаяБазаВерсияПлатформы1С");
	НастройкиПодключения.Добавить("ПодключеннаяБазаВерсияКонфигурации1С");	
	НастройкиПодключения.Добавить("ID_ТекущегоУзла");
	
	НастройкиСправочников = Новый Массив;
	НастройкиСправочников.Добавить("ВыгружатьНоменклатуруСразу");
	НастройкиСправочников.Добавить("ВыгружатьКонтрагентовСразу");
	НастройкиСправочников.Добавить("ВыгружатьОстаткиСразу");
	НастройкиСправочников.Добавить("ВыгружатьСерииСразу");
	НастройкиСправочников.Добавить("ВыгружатьСкладыСразу");
	НастройкиСправочников.Добавить("ВыгружатьФормыАСразу");
	НастройкиСправочников.Добавить("ВыгружатьХарактеристикиСразу");
	НастройкиСправочников.Добавить("ВыгружатьЦеныСразу");
	НастройкиСправочников.Добавить("ВыгружатьАкцизныеМаркиСразу");
	НастройкиСправочников.Добавить("ВыгружатьКоробкиСразу");
	
	НастройкиНоменклатуры = Новый Массив;
	НастройкиНоменклатуры.Добавить("ИспользоватьШаблоныВесовогоТовара");
	НастройкиНоменклатуры.Добавить("ПрефиксКодаВесовогоТовара");
	НастройкиНоменклатуры.Добавить("ДлинаКодаВесовогоТовара");
	НастройкиНоменклатуры.Добавить("ЧислоЗнаковПослеЗапятойВесТовара");
	НастройкиНоменклатуры.Добавить("ПрефиксВключенВКодВесовогоТовара");
	НастройкиНоменклатуры.Добавить("РазмерПорцииНоменклатуры");	
	НастройкиНоменклатуры.Добавить("МобильнаяПечать");
	НастройкиНоменклатуры.Добавить("ПереписыватьНоменклатуруПриВыгрузке");
	НастройкиНоменклатуры.Добавить("ВыгружатьНоменклатуруДокументаПередВыгрузкойДокумента");	
	
	// Категории настроек
	МетаНастройки = Новый Структура;
	МетаНастройки.Вставить("СериализуемыеНастройки", СериализуемыеНастройки);
	МетаНастройки.Вставить("УзловыеНастройки",       УзловыеНастройки);
	МетаНастройки.Вставить("НастройкиПодключения",   НастройкиПодключения);
	МетаНастройки.Вставить("НастройкиСправочников",  НастройкиСправочников);
	МетаНастройки.Вставить("НастройкиНоменклатуры",  НастройкиНоменклатуры);
	
	Возврат МетаНастройки;
	
КонецФункции

Функция ГлЯдро_ПолучитьСписокВычислимыхПолей1С(МетаданныеДокументов1С)
	
	МетаданныеНСИ = ГлЯдро_ПолучитьМетаданныеНСИ();
	
	ВычислимыеПоля1С = Новый Структура;
	
	Для Каждого Документ1С Из МетаданныеДокументов1С Цикл
		ВычислимыеПоля1С.Вставить(Документ1С.Ключ, Новый Структура);
		Для Каждого ТабличнаяЧасть Из Документ1С.Значение.ТабличныеЧасти Цикл
			ВычислимыеПоля1С[Документ1С.Ключ].Вставить(ТабличнаяЧасть.Ключ, Новый СписокЗначений);
			
			ЕстьНоменклатура = Ложь; ЕстьХарактеристика = Ложь; ЕстьСерия = Ложь; ЕстьЕдиницаИзмерения = Ложь; ЕстьАлко = Ложь;
			
			Для Каждого РеквизитМД Из Метаданные.Документы[Документ1С.Ключ].ТабличныеЧасти[ТабличнаяЧасть.Ключ].Реквизиты Цикл
				Для Каждого ТипРеквизита Из РеквизитМД.Тип.Типы() Цикл
					Попытка
						Если ТипРеквизита = Тип("СправочникСсылка." + МетаданныеНСИ.Номенклатура.ИмяСправочника) Тогда
							ЕстьНоменклатура = Истина;
						КонецЕсли;
						Если МетаданныеНСИ.Характеристики.Использование И ТипРеквизита = Тип("СправочникСсылка." + МетаданныеНСИ.Характеристики.ИмяСправочника) Тогда
							ЕстьХарактеристика = Истина;
						КонецЕсли;
						Если МетаданныеНСИ.Серии.Использование И ТипРеквизита = Тип("СправочникСсылка." + МетаданныеНСИ.Серии.ИмяСправочника) Тогда
							ЕстьСерия = Истина;
						КонецЕсли;
						Если МетаданныеНСИ.АлкоНоменклатура.Использование И ТипРеквизита = Тип("СправочникСсылка." + МетаданныеНСИ.АлкоНоменклатура.ИмяСправочника) Тогда
							ЕстьАлко = Истина;
						КонецЕсли;
						Если ТипРеквизита = Тип("СправочникСсылка." + МетаданныеНСИ.ЕдиницыИзмерения.ИмяСправочника) Тогда
							ЕстьЕдиницаИзмерения = Истина;
						КонецЕсли;
					Исключение
					КонецПопытки;
				КонецЦикла;
			КонецЦикла;
			
			Если ЕстьНоменклатура Тогда
				ВычислимыеПоля1С[Документ1С.Ключ][ТабличнаяЧасть.Ключ].Добавить("ИдТовара",  "Идентификатор Номенклатуры");
				ВычислимыеПоля1С[Документ1С.Ключ][ТабличнаяЧасть.Ключ].Добавить("ИмяТовара", "Наименование Номенклатуры");
			КонецЕсли;
			Если ЕстьЕдиницаИзмерения Тогда
				ВычислимыеПоля1С[Документ1С.Ключ][ТабличнаяЧасть.Ключ].Добавить("ИдЕдиницыИзмерения",  "Идентификатор Единицы измерения");
				ВычислимыеПоля1С[Документ1С.Ключ][ТабличнаяЧасть.Ключ].Добавить("ИмяЕдиницыИзмерения", "Наименование Единицы измерения");
			КонецЕсли;
			Если ЕстьХарактеристика Тогда
				ВычислимыеПоля1С[Документ1С.Ключ][ТабличнаяЧасть.Ключ].Добавить("ИдХарактеристики",  "Идентификатор Характеристики");
				ВычислимыеПоля1С[Документ1С.Ключ][ТабличнаяЧасть.Ключ].Добавить("ИмяХарактеристики", "Наименование Характеристики");
			КонецЕсли;
			Если ЕстьСерия Тогда
				ВычислимыеПоля1С[Документ1С.Ключ][ТабличнаяЧасть.Ключ].Добавить("ИдСерии",  "Идентификатор Серии");
				ВычислимыеПоля1С[Документ1С.Ключ][ТабличнаяЧасть.Ключ].Добавить("ИмяСерии", "Наименование Серии");
			КонецЕсли;
			Если ЕстьАлко Тогда
				ВычислимыеПоля1С[Документ1С.Ключ][ТабличнаяЧасть.Ключ].Добавить("АлкоКод",              "Алкокод (ЕГАИС)");
				ВычислимыеПоля1С[Документ1С.Ключ][ТабличнаяЧасть.Ключ].Добавить("АлкоОбъем",            "Алко-объем (ЕГАИС)");
				ВычислимыеПоля1С[Документ1С.Ключ][ТабличнаяЧасть.Ключ].Добавить("АлкоКрепость",         "Алко-крепость (ЕГАИС)");
				ВычислимыеПоля1С[Документ1С.Ключ][ТабличнаяЧасть.Ключ].Добавить("АлкоНаименование",     "Алко-наименование (ЕГАИС)");
				ВычислимыеПоля1С[Документ1С.Ключ][ТабличнаяЧасть.Ключ].Добавить("АлкоВидПродукции",     "Алко-вид продукции (ЕГАИС)");
				ВычислимыеПоля1С[Документ1С.Ключ][ТабличнаяЧасть.Ключ].Добавить("АлкоКодВидаПродукции", "Алко-код вида продукции (ЕГАИС)");
				ВычислимыеПоля1С[Документ1С.Ключ][ТабличнаяЧасть.Ключ].Добавить("АлкоТипПродукции",     "Алко-тип продукции (ЕГАИС)");
				ВычислимыеПоля1С[Документ1С.Ключ][ТабличнаяЧасть.Ключ].Добавить("АлкоПроизводитель",    "Алко-производитель (ЕГАИС)");
				ВычислимыеПоля1С[Документ1С.Ключ][ТабличнаяЧасть.Ключ].Добавить("АлкоИмпортер",         "Алко-импортер (ЕГАИС)");
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;	
	
	Возврат ВычислимыеПоля1С;
	
КонецФункции

Функция ГлЯдро_ПолучитьСписокВычислимыхПолейMS()
	
	ВычислимыеПоляMS = Новый СписокЗначений;
	ВычислимыеПоляMS.Добавить("Номенклатура",     "Номенклатура (выч. поле)");
	ВычислимыеПоляMS.Добавить("Характеристика",   "Характеристика (выч. поле)");
	ВычислимыеПоляMS.Добавить("ЕдиницаИзмерения", "Единица измерения (выч. поле)");
	ВычислимыеПоляMS.Добавить("Серия",            "Серия (выч. поле)");
	ВычислимыеПоляMS.Добавить("АлкоНоменклатура", "Алко-номенклатура (выч. поле)");
	
	Возврат ВычислимыеПоляMS;
	
КонецФункции

Функция ГлЯдро_ПолучитьПустуюСтруктуруНастроекSMARTS(СериализуемыеНастройки = Неопределено)
	
	СтруктураНастроекSMARTS = Новый Структура;
	
	СтруктураНастроекSMARTS.Вставить("ИспользоватьШаблоныВесовогоТовара", Ложь);
	СтруктураНастроекSMARTS.Вставить("ПрефиксКодаВесовогоТовара",         Ложь);
	СтруктураНастроекSMARTS.Вставить("ДлинаКодаВесовогоТовара",           Ложь);
	СтруктураНастроекSMARTS.Вставить("ЧислоЗнаковПослеЗапятойВесТовара",  Ложь);
	СтруктураНастроекSMARTS.Вставить("ПрефиксВключенВКодВесовогоТовара",  Ложь);
	СтруктураНастроекSMARTS.Вставить("РазмерПорцииНоменклатуры",  		  Ложь);
	СтруктураНастроекSMARTS.Вставить("ВыгружатьНоменклатуруДокументаПередВыгрузкойДокумента", Ложь);
	
	СтруктураНастроекSMARTS.Вставить("ВыгружатьНоменклатуруСразу",   Ложь);
	СтруктураНастроекSMARTS.Вставить("ВыгружатьКонтрагентовСразу",   Ложь);
	СтруктураНастроекSMARTS.Вставить("ВыгружатьОстаткиСразу",        Ложь);
	СтруктураНастроекSMARTS.Вставить("ВыгружатьСерииСразу",          Ложь);
	СтруктураНастроекSMARTS.Вставить("ВыгружатьСкладыСразу",         Ложь);
	СтруктураНастроекSMARTS.Вставить("ВыгружатьФормыАСразу",         Ложь);
	СтруктураНастроекSMARTS.Вставить("ВыгружатьХарактеристикиСразу", Ложь);
	СтруктураНастроекSMARTS.Вставить("ВыгружатьЦеныСразу",           Ложь);
	СтруктураНастроекSMARTS.Вставить("ВыгружатьАкцизныеМаркиСразу",  Ложь);
	СтруктураНастроекSMARTS.Вставить("ВыгружатьКоробкиСразу",        Ложь);
	
	СтруктураНастроекSMARTS.Вставить("МобильнаяПечать",                     Ложь);
	СтруктураНастроекSMARTS.Вставить("ПереписыватьНоменклатуруПриВыгрузке", Ложь);
	
	СтруктураНастроекSMARTS.Вставить("ПодключеннаяБазаИмяКонфигурации1С",     Ложь);
	СтруктураНастроекSMARTS.Вставить("ПодключеннаяБазаСинонимКонфигурации1С", Ложь);
	СтруктураНастроекSMARTS.Вставить("ПодключеннаяБазаСтрокаСоединения",      Ложь);
	СтруктураНастроекSMARTS.Вставить("ПодключеннаяБазаВерсияПлатформы1С",     Ложь);
	СтруктураНастроекSMARTS.Вставить("ПодключеннаяБазаВерсияКонфигурации1С",  Ложь);
	СтруктураНастроекSMARTS.Вставить("Ид",                                    Ложь);
	СтруктураНастроекSMARTS.Вставить("ИдПриложения",                          Ложь);
	СтруктураНастроекSMARTS.Вставить("ИдОсновногоПриложения",                 Ложь);
	СтруктураНастроекSMARTS.Вставить("ИмяПриложения",                         Ложь);
	СтруктураНастроекSMARTS.Вставить("УровеньПриложения",                     Ложь);
	СтруктураНастроекSMARTS.Вставить("ID_ТекущегоУзла", 					  Ложь);
	
	Если СериализуемыеНастройки = Неопределено Тогда
		МетаНастройки = ГлЯдро_ПолучитьКатегорииНастроекMS();
		СериализуемыеНастройки = МетаНастройки.СериализуемыеНастройки;
	КонецЕсли;
	
	Для Каждого ИмяНастройки Из СериализуемыеНастройки Цикл
		СтруктураНастроекSMARTS.Вставить(ИмяНастройки, Ложь);
	КонецЦикла;
	
	Возврат  СтруктураНастроекSMARTS;
	
КонецФункции

Функция ГлЯдро_ПолучитьМетаданныеДокументов1С()
	
	ИменаКонтрагентов = Новый Массив;
	ИменаКонтрагентов.Добавить("Контрагент");
	
	ИменаСкладов = Новый Массив;
	ИменаСкладов.Добавить("Помещение");
	ИменаСкладов.Добавить("СтруктурнаяЕдиница");
	ИменаСкладов.Добавить("Склад");
	ИменаСкладов.Добавить("СкладОрдер");
	ИменаСкладов.Добавить("СкладОтправитель");
	ИменаСкладов.Добавить("СтруктурнаяЕдиницаПродажи");
	
	ИменаСкладовКуда = Новый Массив;
	ИменаСкладовКуда.Добавить("СтруктурнаяЕдиницаПолучатель");
	ИменаСкладовКуда.Добавить("СкладПолучатель");		
	
	СтруктураМетаданных1С = Новый Структура;
	Для Каждого МетаДокумент Из Метаданные.Документы Цикл
		
		СтруктураДокумента = Новый Структура("Синоним,Реквизиты,ТабличныеЧасти",,, Новый Структура("Синоним,Реквизиты",, Новый СписокЗначений));
		СтруктураДокумента.Вставить("Имя", МетаДокумент.Имя);
		СтруктураДокумента.Вставить("Синоним", МетаДокумент.Синоним);
		
		СписокРеквизитов = Новый СписокЗначений;
		
		Для Каждого МетаРеквизит Из МетаДокумент.Реквизиты Цикл
			Если Лев(МетаРеквизит.Имя, 7) <> "Удалить" Тогда
				СписокРеквизитов.Добавить(МетаРеквизит.Имя, МетаРеквизит.Синоним, ГлЯдро_СложныеТипыОтсутствуют(МетаРеквизит.Тип));
			КонецЕсли;
		КонецЦикла;
		СписокРеквизитов.СортироватьПоПредставлению();
		СписокРеквизитов.Вставить(0, "Номер", "Номер", Истина);
		СписокРеквизитов.Вставить(0, "Дата", "Дата", Истина);
		СписокРеквизитов.Вставить(0, "Ссылка", "Ссылка", Ложь);
		СтруктураДокумента.Вставить("Реквизиты", СписокРеквизитов);
		СтруктураДокумента.Вставить("ТабличныеЧасти", Новый Структура);
		
		Для Каждого МетаТЧ Из МетаДокумент.ТабличныеЧасти Цикл
			СписокРеквизитов = Новый СписокЗначений;
			Для Каждого МетаРеквизит Из МетаТЧ.Реквизиты Цикл
				Если Лев(МетаРеквизит.Имя, 7) <> "Удалить" Тогда
					СписокРеквизитов.Добавить(МетаРеквизит.Имя, МетаРеквизит.Синоним, ГлЯдро_СложныеТипыОтсутствуют(МетаРеквизит.Тип));
				КонецЕсли;
			КонецЦикла;
			СписокРеквизитов.СортироватьПоПредставлению();
			СтруктураДокумента.ТабличныеЧасти.Вставить(МетаТЧ.Имя, Новый Структура("Имя,Синоним,Реквизиты", МетаТЧ.Имя, МетаТЧ.Синоним, СписокРеквизитов));
		КонецЦикла;
		
		ИменаРеквизитовШапки = Новый Структура;
		
		Для каждого ИмяКонтрагента Из ИменаКонтрагентов Цикл
			Если МетаДокумент.Реквизиты.Найти(ИмяКонтрагента) <> Неопределено Тогда			
				ИменаРеквизитовШапки.Вставить("ИмяКонтрагента", ИмяКонтрагента);							
				Прервать;
			КонецЕсли; 					
		КонецЦикла; 
		
		Для каждого ИмяСклада Из ИменаСкладов Цикл
			Если МетаДокумент.Реквизиты.Найти(ИмяСклада) <> Неопределено Тогда			
				ИменаРеквизитовШапки.Вставить("ИмяСклада", ИмяСклада);							
				Прервать;
			КонецЕсли; 					
		КонецЦикла; 		
		
		Для каждого ИмяСкладаКуда Из ИменаСкладовКуда Цикл
			Если МетаДокумент.Реквизиты.Найти(ИмяСкладаКуда) <> Неопределено Тогда			
				ИменаРеквизитовШапки.Вставить("ИмяСкладаКуда", ИмяСкладаКуда);							
				Прервать;
			КонецЕсли; 					
		КонецЦикла; 			
		
		СтруктураДокумента.Вставить("ИменаРеквизитовШапки", ИменаРеквизитовШапки);		
		
		СтруктураМетаданных1С.Вставить(МетаДокумент.Имя, СтруктураДокумента);
		
	КонецЦикла;
	
	Возврат СтруктураМетаданных1С;
	
КонецФункции

Функция ГлЯдро_СформироватьМетаданныеНастроекMS()

	СтруктураМетаданныхНастроекMS = Новый Структура;
	
	// Обмен справочниками
	ШаблонНастроек = Новый Структура;
	ШаблонНастроек.Вставить("ИмяТаблицы",                   Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСтроки(50)));
	ШаблонНастроек.Вставить("НастройкаКомпоновщикаСтрокой", Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСтроки(0)));
	СтруктураМетаданныхНастроекMS.Вставить("НастройкиОбменаСправочников", ШаблонНастроек);
	
	// Обмен документами
	ШаблонНастроек = Новый Структура;
	ШаблонНастроек.Вставить("ID_БизнесПроцесса",               	Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСтроки(40)));
	ШаблонНастроек.Вставить("Название",                        	Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСтроки(100)));
	ШаблонНастроек.Вставить("ТипИсходногоДокумента1С",         	Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСтроки(200)));
	ШаблонНастроек.Вставить("ТипИсходногоДокумента1С_Синоним", 	Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСтроки(200)));
	ШаблонНастроек.Вставить("НастройкаКомпоновщикаСтрокой",    	Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСтроки(0)));
	ШаблонНастроек.Вставить("Используется", 					Новый ОписаниеТипов("Булево"));	
	ШаблонНастроек.Вставить("ВариантОтбора",    				Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСтроки(0)));
	ШаблонНастроек.Вставить("ID_ПроизвольногоОтбора",   	 	Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСтроки(0)));	
	СтруктураМетаданныхНастроекMS.Вставить("НастройкиОтборовУзлов_Онлайн",        ШаблонНастроек);
	СтруктураМетаданныхНастроекMS.Вставить("НастройкиОтборовУзлов_Интерактивный", ШаблонНастроек);
	СтруктураМетаданныхНастроекMS.Вставить("НастройкиОтборовУзлов_Автообмен",     ШаблонНастроек);
	
	// Бизнес-процессы
	ШаблонНастроек = Новый Структура;
	ШаблонНастроек.Вставить("ID_БизнесПроцесса",                    Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСтроки(40)));
	ШаблонНастроек.Вставить("Используется",                         Новый ОписаниеТипов("Булево"));
	ШаблонНастроек.Вставить("ЭтоТиповойБизнесПроцесс",              Новый ОписаниеТипов("Булево"));
	ШаблонНастроек.Вставить("Название",                             Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСтроки(255)));
	ШаблонНастроек.Вставить("ТипИсходногоДокумента1С",              Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСтроки(255)));
	ШаблонНастроек.Вставить("ТипРезультирующегоДокумента1С",        Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСтроки(255)));
	ШаблонНастроек.Вставить("ТипДокументаMS",                       Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСтроки(100)));
	ШаблонНастроек.Вставить("ЗагружатьВТотЖе",                      Новый ОписаниеТипов("Булево"));
	ШаблонНастроек.Вставить("КонтрольКоличества",                   Новый ОписаниеТипов("Булево"));
	ШаблонНастроек.Вставить("КоллективнаяРабота",                   Новый ОписаниеТипов("Булево"));
	ШаблонНастроек.Вставить("СоздаватьНовыйДокументПриЗагрузке",    Новый ОписаниеТипов("Булево"));
	ШаблонНастроек.Вставить("ПроводитьДокументПослеЗагрузки",       Новый ОписаниеТипов("Булево"));	
	ШаблонНастроек.Вставить("ИмяТЧ1СИсходного",                     Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСтроки(100)));
	ШаблонНастроек.Вставить("Комментарий",                          Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСтроки(0)));
	ШаблонНастроек.Вставить("НазначитьПользователю",                Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСтроки(0)));
	ШаблонНастроек.Вставить("ТекстЗапросаВыгрузкиНаТСД",            Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСтроки(0)));
	ШаблонНастроек.Вставить("Обработчик_ПередЗаполнениемДокумента", Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСтроки(200)));
	ШаблонНастроек.Вставить("Обработчик_ПослеЗаполненияДокумента",  Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСтроки(200)));
	ШаблонНастроек.Вставить("НастройкаВыгрузкиПолей",               Новый ОписаниеТипов("ТаблицаЗначений"));
	ШаблонНастроек.Вставить("НастройкаВыгрузкиТЧ",                  Новый ОписаниеТипов("ТаблицаЗначений"));
	ШаблонНастроек.Вставить("НастройкаЗагрузкиПолей",               Новый ОписаниеТипов("ТаблицаЗначений"));
	ШаблонНастроек.Вставить("НастройкаЗагрузкиТЧ",                  Новый ОписаниеТипов("ТаблицаЗначений"));
	ШаблонНастроек.Вставить("КопияДокументаДляКаждогоПользователя",	Новый ОписаниеТипов("Булево"));
	ШаблонНастроек.Вставить("ВыполнитьТолькоПроизвольныйКод",		Новый ОписаниеТипов("Булево"));
	ШаблонНастроек.Вставить("НастройкаПредставленийРеквизитовДокумента",               Новый ОписаниеТипов("ТаблицаЗначений"));
	ШаблонНастроек.Вставить("ЗаменитьПредставлениеДокументаПриВыгрузке",		Новый ОписаниеТипов("Булево"));
	ШаблонНастроек.Вставить("НеРазбиватьОбъединенныйДокументПриЗагрузке",		Новый ОписаниеТипов("Булево"));
	СтруктураМетаданныхНастроекMS.Вставить("НастройкиБизнесПроцессов", ШаблонНастроек);
	
	// Узлы
	ШаблонНастроек = Новый Структура;
	ШаблонНастроек.Вставить("ID_Узла",                 Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСтроки(40)));
	ШаблонНастроек.Вставить("Наименование",            Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСтроки(100)));
	ШаблонНастроек.Вставить("ИспользоватьЧастнуюБазу", Новый ОписаниеТипов("Булево"));
	ШаблонНастроек.Вставить("ЧастнаяБазаMS",           Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСтроки(40)));
	ШаблонНастроек.Вставить("Комментарий",             Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСтроки(0)));
	СтруктураМетаданныхНастроекMS.Вставить("Узлы", ШаблонНастроек);
	
	// ПроизвольныеКоды
	ШаблонНастроек = Новый Структура;
	ШаблонНастроек.Вставить("ID_ПроизвольногоКода",   Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСтроки(40)));
	ШаблонНастроек.Вставить("Наименование",           Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСтроки(100)));
	ШаблонНастроек.Вставить("Описание",               Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСтроки(0)));
	ШаблонНастроек.Вставить("ТекстПроизвольногоКода", Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСтроки(0)));
	СтруктураМетаданныхНастроекMS.Вставить("ПроизвольныеКоды_Выгрузка_ШапкаДокумента", ШаблонНастроек);
	СтруктураМетаданныхНастроекMS.Вставить("ПроизвольныеКоды_Выгрузка_ТабличнаяЧастьДокумента", ШаблонНастроек);
	СтруктураМетаданныхНастроекMS.Вставить("ПроизвольныеКоды_Загрузка_ШапкаДокумента", ШаблонНастроек);
	СтруктураМетаданныхНастроекMS.Вставить("ПроизвольныеКоды_Загрузка_ТабличнаяЧастьДокумента", ШаблонНастроек);
	
	// ПроизвольныеОтборыДокументов
	ШаблонНастроек = Новый Структура;
	ШаблонНастроек.Вставить("ID_ПроизвольногоОтбора", 	Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСтроки(40)));
	ШаблонНастроек.Вставить("Наименование",           	Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСтроки(100)));
	ШаблонНастроек.Вставить("Описание",               	Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСтроки(0)));
	ШаблонНастроек.Вставить("ТекстПроизвольногоОтбора", Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСтроки(0)));	
	СтруктураМетаданныхНастроекMS.Вставить("ПроизвольныеОтборыДокументов", ШаблонНастроек);
	
	// ФормаОбменаВыбранныеКолонки
	ШаблонНастроек = Новый Структура;
	ШаблонНастроек.Вставить("Использование", 	Новый ОписаниеТипов("Булево"));
	ШаблонНастроек.Вставить("Представление",   Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСтроки(100)));
	СтруктураМетаданныхНастроекMS.Вставить("ФормаОбменаВыбранныеКолонки", ШаблонНастроек);
	
	Возврат СтруктураМетаданныхНастроекMS;
	
КонецФункции

Функция ГлЯдро_ПодключитьИнтеграционнуюОбработку() Экспорт 
	
	Если (Не ПараметрыПодключенияMS.Свойство("РабочийКаталог")) // в старых версиях не сохранялись эти параметры 
		ИЛИ (Не ПараметрыПодключенияMS.Свойство("ИмяИнтеграционнойОбработки"))
		ИЛИ (Не ПараметрыПодключенияMS.Свойство("ПутьИнтеграционнойОбработки")) Тогда 
		ГлЯдро_ПересохранитьНастройкиПодключения();
	КонецЕсли;

	ИнтеграционнаяОбработкаПодключена = Ложь;
	
	РабочийКаталог = ПараметрыПодключенияMS.РабочийКаталог;	
	Если ЗначениеЗаполнено(РабочийКаталог) Тогда 
		ИмяИнтеграционнойОбработки  = ПараметрыПодключенияMS.ИмяИнтеграционнойОбработки;
		ПутьИнтеграционнойОбработки = ПараметрыПодключенияMS.ПутьИнтеграционнойОбработки;
		
		// Сначала пробуем подцепить обработку по адресу Путь+Имя, если там её нет, берем РабочийКаталог+Путь+Имя
		ПолныйПутьКИнтеграционнойОбработке = ПутьИнтеграционнойОбработки+ИмяИнтеграционнойОбработки;
		
		//ПутьКИнтеграционнойОбработке = РабочийКаталог+"\Обработки 1С\ИнтеграционнаяОбработка.epf";
		ФайлИнтеграционнойОбработки = Новый Файл(ПолныйПутьКИнтеграционнойОбработке);
		Если НЕ ФайлИнтеграционнойОбработки.Существует() Тогда
			ПолныйПутьКИнтеграционнойОбработке = РабочийКаталог+ПутьИнтеграционнойОбработки+ИмяИнтеграционнойОбработки;
			ФайлИнтеграционнойОбработки = Новый Файл(ПолныйПутьКИнтеграционнойОбработке);
		КонецЕсли;
		Если ФайлИнтеграционнойОбработки.Существует() Тогда
			ИнтеграционнаяОбработка = ВнешниеОбработки.Создать(ПолныйПутьКИнтеграционнойОбработке,Ложь);
			//Если ИнтеграционнаяОбработка.Метаданные().Реквизиты.Найти("_ГлКонтекст") <> Неопределено Тогда
			//	ИнтеграционнаяОбработка._ГлКонтекст = ЭтотОбъект;	
			//КонецЕсли;
			Попытка
				Если Не ИнтеграционнаяОбработка.Конф_ПроверкаСоответствияИспользуемойКонфигурации() Тогда
					Возврат "Интеграционная обработка не соответствует конфигурации или версии 1С";
				КонецЕсли;
				ИнтеграционнаяОбработкаПодключена = Истина;
			Исключение
				ИнтеграционнаяОбработка = Неопределено;
				Возврат "Интеграционная обработка не соответствует конфигурации или версии 1С";
			КонецПопытки;
		Иначе 
			Возврат "Файл интеграционной обработки по пути """+ПутьИнтеграционнойОбработки+ИмяИнтеграционнойОбработки+""" не найден.";
		КонецЕсли;
	КонецЕсли;
	
	Возврат Истина;	
	
КонецФункции

Процедура ГлЯдро_ПересохранитьНастройкиПодключения()
	
	ИдБазы = ПараметрыПодключенияMS.Ид;
	
	СписокБазНаСервереSMARTS = КомЯдро_ПолучитьСписокБазНаСервереSMARTS();
	СтрокаПараметров = СписокБазНаСервереSMARTS.Найти(ИдБазы, "Ид");
	
	Если СтрокаПараметров <> Неопределено Тогда
		
		ПараметрыПодключенияMS = Новый Структура;
		ПараметрыПодключенияMS.Вставить("Ид", 							СтрокаПараметров.Ид);
		ПараметрыПодключенияMS.Вставить("Имя", 							СтрокаПараметров.Имя);
		ПараметрыПодключенияMS.Вставить("ИдПриложения", 				СтрокаПараметров.ИдПриложения);
		ПараметрыПодключенияMS.Вставить("ИдОсновногоПриложения", 		СтрокаПараметров.ИдОсновногоПриложения);
		ПараметрыПодключенияMS.Вставить("ИмяПриложения", 				СтрокаПараметров.ИмяПриложения);
		ПараметрыПодключенияMS.Вставить("УровеньПриложения", 			СтрокаПараметров.УровеньПриложения);
		ПараметрыПодключенияMS.Вставить("СтрокаПодключения", 			СтрокаПараметров.СтрокаПодключения);
		ПараметрыПодключенияMS.Вставить("РабочийКаталог", 				СтрокаПараметров.РабочийКаталог); 
		ПараметрыПодключенияMS.Вставить("ИмяИнтеграционнойОбработки",	СтрокаПараметров.ИмяИнтеграционнойОбработки);
		ПараметрыПодключенияMS.Вставить("ПутьИнтеграционнойОбработки",	СтрокаПараметров.ПутьИнтеграционнойОбработки);
		
		ГлЯдро_СохранитьДанныеВХранилище1С("Cleverence_ПараметрыПодключенияMS", ПараметрыПодключенияMS);
	КонецЕсли;
	
КонецПроцедуры

Функция ИнициализацияПодключенияСМАРТС(mXmlDoc = "") Экспорт
	
	ИмяСобытия = "ИнициализацияПодключенияСМАРТС";
	
	Попытка
		
		ГлЯдро_ЗаписатьСобытиеВЖурналРегистрации(ИмяСобытия, "Информация", "Начало, Вызов полной инициализации из СМАРТС");
		ГлЯдро_Инициализация(,Истина);
		
	Исключение
		
		ОписаниеОшибки = ОписаниеОшибки();
		ГлЯдро_ЗаписатьСобытиеВЖурналРегистрации(ИмяСобытия, "Ошибка", "Ошибка: "+ ОписаниеОшибки +", Вызов полной инициализации из СМАРТС");
		
	КонецПопытки;
	
	ГлЯдро_ЗаписатьСобытиеВЖурналРегистрации(ИмяСобытия, "Информация", "Конец, Вызов полной инициализации из СМАРТС");
	Возврат Истина;
КонецФункции

#КонецОбласти

#Область ГлобальныйКонтекст_Настройки_ЧтениеНастроек

Функция ГлЯдро_ПолучитьСписокБазНаСервереSMARTS() Экспорт
	Возврат КомЯдро_ПолучитьСписокБазНаСервереSMARTS();
КонецФункции

Функция ГлЯдро_ПолучитьНастройкиНаСервереSMARTS(СтруктураНастроек, УзловыеНастройки = Неопределено, ID_Узла = "") Экспорт
	
	Если УзловыеНастройки = Неопределено Тогда
		УзловыеНастройки = КатегорииНастроекMS.УзловыеНастройки;
	КонецЕслИ;
	СтруктураНастроек = КомЯдро_ЗаполнитьНастройкиSMARTS(СтруктураНастроек, УзловыеНастройки, ID_Узла);
	СтруктураНастроек = ГлЯдро_КонвертироватьСериализуемыеНастройки(СтруктураНастроек, "ИзСтроки");
	
	Возврат СтруктураНастроек;
	
КонецФункции

Функция ГлЯдро_ПолучитьНастройкуНаСервереSMARTS(КлючНастройки, ID_Узла = "") Экспорт
	
	СтруктураНастроек = Новый Структура(КлючНастройки, Ложь);
	СтруктураНастроек = ГлЯдро_ПолучитьНастройкиНаСервереSMARTS(СтруктураНастроек,, ID_Узла);
	
	Возврат СтруктураНастроек[КлючНастройки];
	
КонецФункции

Функция ГлЯдро_ПолучитьИзКэшаНастройкуSMARTS(КлючНастройки) Экспорт
	
	ЗначениеНастройки = Ложь;
	
	Если НЕ НастройкиИнициализированы Тогда
		ГлЯдро_Инициализация();
	КонецЕсли;
	
	НайденноеЗначение = Неопределено;
	Если ТекущиеНастройкиMS.Свойство(КлючНастройки, НайденноеЗначение) Тогда
		ЗначениеНастройки = НайденноеЗначение;
	КонецЕсли;
	
	Возврат ЗначениеНастройки;
	
КонецФункции

Функция ГлЯдро_ПолучитьИзКэшаЗначениеТабличнойНастройкиSMARTS(КлючТаблицы, Отбор, ИмяКолонки = "") Экспорт
	
	Результат = Неопределено;
	
	ТаблицаНастроек = ГлЯдро_ПолучитьИзКэшаНастройкуSMARTS(КлючТаблицы);
	
	Если ТипЗнч(ТаблицаНастроек) = Тип("ТаблицаЗначений") Тогда
		РезультатОтбора = ТаблицаНастроек.Скопировать(Отбор);
		Если РезультатОтбора.Количество() > 0 Тогда
			Если ЗначениеЗаполнено(ИмяКолонки) Тогда
				Результат = ?(РезультатОтбора.Количество() = 1, РезультатОтбора[0][ИмяКолонки], "");
			Иначе
				Результат = РезультатОтбора;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;	
	
	Возврат Результат;
	
КонецФункции

Функция ГлЯдро_ПолучитьДанныеИзХранилища1С(КлючДляПолучения) Экспорт
	
	Если ПравоДоступа("АдминистрированиеДанных", Метаданные)  Тогда
		ДанныеИзХранилища = ХранилищеОбщихНастроек.Загрузить(КлючДляПолучения,,, "");
	Иначе
		ДанныеИзХранилища = ХранилищеОбщихНастроек.Загрузить(КлючДляПолучения);
	КонецЕсли;
	
	Возврат ДанныеИзХранилища;
	
КонецФункции

Функция ГлЯдро_ПолучитьНастройкуПоУмолчаниюНаСервереSMARTS(КлючНастройки, ID_Узла = "") Экспорт
	
	СтруктураНастроек = Новый Структура(КлючНастройки, Ложь);
	СтруктураНастроек = ГлЯдро_ПолучитьНастройкиПоУмолчаниюНаСервереSMARTS(СтруктураНастроек,, ID_Узла);
	
	Возврат СтруктураНастроек[КлючНастройки];
	
КонецФункции

Функция ГлЯдро_ПолучитьНастройкиПоУмолчаниюНаСервереSMARTS(СтруктураНастроек, УзловыеНастройки = Неопределено, ID_Узла = "") Экспорт
	
	Если УзловыеНастройки = Неопределено Тогда
		УзловыеНастройки = КатегорииНастроекMS.УзловыеНастройки;
	КонецЕслИ;

	ГлЯдро_УдалитьНастройкиВБазеSMARTS(СтруктураНастроек, УзловыеНастройки, ID_Узла);
	СтруктураНастроек = ГлЯдро_ПолучитьНастройкиНаСервереSMARTS(СтруктураНастроек, УзловыеНастройки);
	
	Возврат СтруктураНастроек;
	
КонецФункции	
	
#КонецОбласти

#Область ГлобальныйКонтекст_Настройки_УстановкаНастроек

Процедура ГлЯдро_СохранитьНастройкиВБазеSMARTS(СтруктураНастроек, ID_Узла = "") Экспорт
	
	СтруктураНастроек = ГлЯдро_КонвертироватьСериализуемыеНастройки(СтруктураНастроек, "ВСтроку");
	КомЯдро_ЗаписатьНастройкиSMARTS(СтруктураНастроек, КатегорииНастроекMS.УзловыеНастройки, ID_Узла);
	
КонецПроцедуры

Процедура ГлЯдро_ЗаписатьВКэшНастройкиSMARTS(СтруктураНастроек)
	
	Если НЕ НастройкиИнициализированы Тогда
		ГлЯдро_Инициализация();
	КонецЕсли;
	
	Для Каждого Настройка Из СтруктураНастроек Цикл
		ТекущиеНастройкиMS.Вставить(Настройка.Ключ, Настройка.Значение);
	КонецЦикла;
	
КонецПроцедуры

Процедура ГлЯдро_УстановитьДанныеТекущегоУзла(mXmlDoc)	
	///// Сравнить, и при необходимости изменить текущий узел
	SessionSMARTS = СтруктураПодключенияMS.StorageConnector.FromXml(mXmlDoc);
	ID_Узла = SessionSMARTS.DeviceInfo.GetField("ИдУзла");
	Если ID_Узла <> ДанныеТекущегоУзла.ID_Узла Тогда
		// изменяем данные текущего узла
		ДанныеУзла = ГлЯдро_ПолучитьИзКэшаЗначениеТабличнойНастройкиSMARTS("Узлы", Новый Структура("ID_Узла", ID_Узла), "");
		Если ТипЗнч(ДанныеУзла) = Тип("ТаблицаЗначений") И ДанныеУзла.Количество() > 0 Тогда
			ДанныеТекущегоУзла.Вставить("ID_Узла",      ДанныеУзла[0].ID_Узла);
			ДанныеТекущегоУзла.Вставить("Наименование", ДанныеУзла[0].Наименование);
			ДанныеТекущегоУзла.Вставить("ID_БазыMS",    ДанныеУзла[0].ЧастнаяБазаMS);
		Иначе
			ДанныеТекущегоУзла.Вставить("ID_Узла",      "");
			ДанныеТекущегоУзла.Вставить("Наименование", "");
			ДанныеТекущегоУзла.Вставить("ID_БазыMS",    "");
		КонецЕсли;
		// закачиваем в кэш узловые настройки
		СтруктураНастроек = Новый Структура;
		Для Каждого ИмяНастройки Из КатегорииНастроекMS.УзловыеНастройки Цикл
			СтруктураНастроек.Вставить(ИмяНастройки, Ложь);
		КонецЦикла;
		СтруктураНастроек = ГлЯдро_ПолучитьНастройкиНаСервереSMARTS(СтруктураНастроек,, ID_Узла);
		ГлЯдро_ЗаписатьВКэшНастройкиSMARTS(СтруктураНастроек);
	КонецЕсли;
	
КонецПроцедуры

Процедура ГлЯдро_СохранитьДанныеВХранилище1С(КлючДляСохранения, ДанныеДляСохранения) Экспорт
	
	Если ПравоДоступа("АдминистрированиеДанных", Метаданные)  Тогда	
		ХранилищеОбщихНастроек.Сохранить(КлючДляСохранения, "", ДанныеДляСохранения, "", "");
	Иначе
		ХранилищеОбщихНастроек.Сохранить(КлючДляСохранения, "", ДанныеДляСохранения, "");
	КонецЕсли;
	
КонецПроцедуры

Процедура ГлЯдро_СохранитьШаблоныВесовогоТовараВБазеSMARTS(ТаблицаШаблонов) Экспорт
	КомЯдро_ОбновитьШаблоныВесовогоТовараMS(ТаблицаШаблонов);
КонецПроцедуры

Процедура ГлЯдро_УдалитьНастройкиВБазеSMARTS(СтруктураНастроек, УзловыеНастройки, ID_Узла = "") Экспорт
	
	Если УзловыеНастройки = Неопределено Тогда
		УзловыеНастройки = КатегорииНастроекMS.УзловыеНастройки;
	КонецЕслИ;
	
	КомЯдро_УдалитьНастройкиSMARTS(СтруктураНастроек, УзловыеНастройки, ID_Узла);
	
КонецПроцедуры	

#КонецОбласти

#Область ГлобальныйКонтекст_Настройки_ВспомогательныеМеханизмы

Функция ГлЯдро_КонвертироватьСериализуемыеНастройки(СтруктураНастроек, Направление, СериализуемыеНастройки = Неопределено)
	
	Если СериализуемыеНастройки = Неопределено Тогда
		КатегорииНастроекMS = ГлЯдро_ПолучитьКатегорииНастроекMS();
		СериализуемыеНастройки = КатегорииНастроекMS.СериализуемыеНастройки;
	КонецЕсли;
	
	Для Каждого Настройка Из СтруктураНастроек Цикл
		Если НЕ Настройка.Значение = Ложь И СериализуемыеНастройки.Найти(Настройка.Ключ) <> Неопределено Тогда
			ЗначениеНастройки = Настройка.Значение;
			Если Направление = "ИзСтроки" Тогда
				ЗначениеНастройки = ЗначениеИзСтрокиВнутр(ЗначениеНастройки);
			ИначеЕсли Направление = "ВСтроку" Тогда	
				ЗначениеНастройки = ЗначениеВСтрокуВнутр(ЗначениеНастройки);
			КонецЕсли;
			СтруктураНастроек.Вставить(Настройка.Ключ, ЗначениеНастройки);
		КонецЕсли;
	КонецЦикла;
	
	Возврат СтруктураНастроек;
	
КонецФункции

#КонецОбласти

#Область ГлобальныйКонтекст_Настройки_ПрочиеМетоды

Функция ГлЯдро_ПолучитьНастройкуБизнесПроцесса(ID_БизнесПроцесса, ТипДокументаMS, НастройкиДляОбмена = Неопределено) Экспорт
	
	Результат = Неопределено;
	
	Если НастройкиДляОбмена = Неопределено Тогда
		НастройкиДляОбмена = ГлЯдро_ПолучитьИзКэшаНастройкуSMARTS("НастройкиБизнесПроцессов");
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ID_БизнесПроцесса) Тогда
		ПодходящиеНастройки = НастройкиДляОбмена.НайтиСтроки(Новый Структура("ID_БизнесПроцесса,Используется", ID_БизнесПроцесса, Истина));
	Иначе
		ПодходящиеНастройки = НастройкиДляОбмена.НайтиСтроки(Новый Структура("ТипДокументаMS,ТипИсходногоДокумента1С,Используется", ТипДокументаMS, "", Истина));
	КонецЕсли;
	
	Если ПодходящиеНастройки.Количество() = 1 Тогда
		СтрокаНастройки = ПодходящиеНастройки[0];
		НастройкаБП = Новый Структура;
		Для Каждого Колонка Из НастройкиДляОбмена.Колонки Цикл
			НастройкаБП.Вставить(Колонка.Имя, СтрокаНастройки[Колонка.Имя]);
		КонецЦикла;
		Результат = Новый Структура("Статус,Данные", Истина, НастройкаБП);
	Иначе
		Результат = Новый Структура("Статус,Данные", Ложь, ПодходящиеНастройки);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ГлЯдро_ПолучитьИнформациюОВнешнейОбработке(КлючИнформации) Экспорт
	
	ДанныеОбработки = Неопределено;
	
	ИнформацияОбработки = СведенияОВнешнейОбработке();
	Если ИнформацияОбработки.Свойство(КлючИнформации) Тогда
		ДанныеОбработки = ИнформацияОбработки[КлючИнформации];
	КонецЕсли;
	
	Возврат ДанныеОбработки;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область ГлобальныйКонтекст_СправочникиИТаблицы

Функция ГлЯдро_ВыгрузитьПодготовленнуюТаблицуНаСерверSMARTS(ИмяТаблицы, ТаблицаДляВыгрузки, ID_БазыSMARTS = "", ПереписыватьНоменклатуруПриВыгрузке = Ложь) Экспорт
	
	ДанныеДляВыгрузки = ГлЯдро_СформироватьМассивыДляВыгрузкиТаблиц(ИмяТаблицы, ТаблицаДляВыгрузки);
	РезультатВыгрузки = КомЯдро_ВыгрузитьТаблицуНаСерверSMARTS(ИмяТаблицы, ДанныеДляВыгрузки, ID_БазыSMARTS, ПереписыватьНоменклатуруПриВыгрузке);
	
	Возврат РезультатВыгрузки;
	
КонецФункции

Функция ГлЯдро_ВыгрузитьТаблицуНаСерверSMARTS(ИмяТаблицы, НастройкиКомпоновщика = Ложь, ПараметрыКомпоновщика = Ложь, ID_БазыSMARTS = "", ПереписыватьНоменклатуруПриВыгрузке = Ложь) Экспорт
	
	РезультатВыгрузки = Неопределено;
	
	// *****************************************************************************************************************************
	
	НачалоПолученияДанныхИз1С 		= ТекущаяДата();
	
	ДанныеДляВыгрузки 				= ГлЯдро_ПолучитьМассивыТаблицыДляВыгрузкиНаСерверSMARTS(ИмяТаблицы, НастройкиКомпоновщика, ПараметрыКомпоновщика);	
	
	ОкончаниеПолученияДанныхИз1С 	= ТекущаяДата();
	ВремяПолученияДанныхИз1С 		= ОкончаниеПолученияДанныхИз1С - НачалоПолученияДанныхИз1С;
		
	// *****************************************************************************************************************************	
	
	НачалоВыгрузкиДанныхНаСерверSMARTS 		= ТекущаяДата();	
	
	РезультатВыгрузки						= КомЯдро_ВыгрузитьТаблицуНаСерверSMARTS(ИмяТаблицы, ДанныеДляВыгрузки, ID_БазыSMARTS, ПереписыватьНоменклатуруПриВыгрузке);		
	
	ОкончаниеВыгрузкиДанныхНаСерверSMARTS 	= ТекущаяДата();
	ВремяВыгрузкиДанныхНаСерверSMARTS		= ОкончаниеВыгрузкиДанныхНаСерверSMARTS - НачалоВыгрузкиДанныхНаСерверSMARTS;
	
	ОбщееВремяВыгрузки						= ВремяПолученияДанныхИз1С + ВремяВыгрузкиДанныхНаСерверSMARTS; 
		
	// *****************************************************************************************************************************	
	
	// Если выгрузка прошла успешно, добавляем в сообщение дополнительную информацию о выгрузке
	Если РезультатВыгрузки.Статус Тогда		
		
		ПредставлениеВремени1С 		= ГлЯдро_ПредставлениеВремени(ВремяПолученияДанныхИз1С);
		ПредставлениеВремениMS 		= ГлЯдро_ПредставлениеВремени(ВремяВыгрузкиДанныхНаСерверSMARTS);
		ПредставлениеВремениОбщее 	= ГлЯдро_ПредставлениеВремени(ОбщееВремяВыгрузки);
		
		РезультатВыгрузки.Сообщение = ГлЯдро_СформироватьПодробноеСообщениеОВыгрузкеТаблицы(РезультатВыгрузки.Сообщение, ПредставлениеВремениОбщее, ПредставлениеВремени1С, ПредставлениеВремениMS);		
		
	КонецЕсли;	
	
	Возврат РезультатВыгрузки;
	
КонецФункции

// Михайлов 2018-05-10
// Метод выгружает на сервер Mobile SMARTS данные таблицы порциями. Работает только для справочника "Номенклатура"
// Некорректен с точки зрения инкапсуляции - в одном методе смешался функционал получения данных из базы 1С и функционал выгрузки данных в Mobile SMARTS
// Это вынужденная реализация, потому что методы "TerminalConnector.НачатьВыгрузкуТоваров()" и "TerminalConnector.ЗавершитьВыгрузкуТоваров()"
// можно вызывать только по 1 разу во время всего процесса выгрузки справочника номенклатуры
Функция ГлЯдро_ВыгрузитьТаблицуНаСерверSMARTSПорциями(ИмяТаблицы, НастройкиКомпоновщика = Ложь, ПараметрыКомпоновщика = Ложь, ID_БазыSMARTS = "", ПереписыватьНоменклатуруПриВыгрузке = Ложь, РазмерПорцииНоменклатуры = 1000) Экспорт
	
	РезультатВыгрузки = Новый Структура;
	Сообщение = "Начало выгрузки таблицы [" + ИмяТаблицы + "] порциями";
	РезультатВыгрузки.Вставить("Сообщение"	, Сообщение);
	РезультатВыгрузки.Вставить("Статус"		, Истина);	
	Сообщить(Сообщение);
	
	Если НЕ КомЯдро_ПодключитьсяКСерверуSMARTS(ID_БазыSMARTS) Тогда		
		
		Сообщение = "База Mobile SMARTS недоступна!";
		РезультатВыгрузки.Вставить("Статус"		, Ложь);				
		РезультатВыгрузки.Вставить("Сообщение"	, Сообщение);
		Сообщить(Сообщение);			
		Возврат РезультатВыгрузки;		
		
	КонецЕсли;
	
	МассивСсылокНоменклатуры 			= ГлЯдро_ПолучитьМассивСсылокНоменклатуры();		
	
	КоличествоСтрок 					= МассивСсылокНоменклатуры.Количество();
	КоличествоПорций 					= (КоличествоСтрок - КоличествоСтрок % РазмерПорцииНоменклатуры) / РазмерПорцииНоменклатуры + ?(КоличествоСтрок % РазмерПорцииНоменклатуры <> 0, 1, 0);			
	// Временное решение. При обновлении локального кэша не обновляется глобальный кэш, поэтому переменную получаем из входных параметров
	//ПереписыватьНоменклатуруПриВыгрузке = ГлЯдро_ПолучитьИзКэшаНастройкуSMARTS("ПереписыватьНоменклатуруПриВыгрузке");			
	
	ВсегоСтрок 							= 0;
	ОтборПоНоменклатуре 				= Новый Массив;
	НачатаВыгрузкаТаблицы 				= Ложь;
	КоличествоРазличныхТоваров 			= 0;
	ВремяПолученияДанныхИз1С			= 0;
	ВремяВыгрузкиДанныхНаСерверSMARTS 	= 0;		
	СоответствиеРазличныхТоваров		= Новый Соответствие;
	ИндексИдТовара						= -1;
	
	Для НомерПорции = 1 По КоличествоПорций Цикл				
		
		НачалоВыгрузкиПорции 		= ТекущаяДата();		
		НачалоПолученияДанныхИз1С 	= ТекущаяДата();
		
		ОтборПоНоменклатуре.Очистить();
		
		Для Сч = 1 По РазмерПорцииНоменклатуры Цикл
			
			ИндексСтроки = (НомерПорции - 1) * РазмерПорцииНоменклатуры + Сч - 1;
			
			Если ИндексСтроки > КоличествоСтрок - 1 Тогда
				Прервать;
			КонецЕсли;	
			
			ОтборПоНоменклатуре.Добавить(МассивСсылокНоменклатуры[ИндексСтроки]);
			
		КонецЦикла;					
		
		ЗапросВыгрузки = ГлЯдро_ПолучитьЗапросДляВыгрузкиСПравочников(ИмяТаблицы, НастройкиКомпоновщика, ПараметрыКомпоновщика, , , ОтборПоНоменклатуре);
		
		ДанныеДляВыгрузки = ЗапросВыгрузки.Выполнить().Выгрузить();						
		КоличествоСтрокВПорции = ДанныеДляВыгрузки.Количество();		
		
		// Если данных в порции нет, то и выгружать нечего
		Если КоличествоСтрокВПорции = 0 Тогда
			Продолжить;
		КонецЕсли;			
		
		ГлЯдро_ОбработатьРезультатыВыгрузкиТаблицы(ДанныеДляВыгрузки, ИмяТаблицы);	
		
		ДанныеДляВыгрузки = ГлЯдро_СформироватьМассивыДляВыгрузкиТаблиц(ИмяТаблицы, ДанныеДляВыгрузки);		
		
		// Для того чтобы искать индекс только один раз, а не на каждой итерации
		Если ИмяТаблицы = "Номенклатура" И ИндексИдТовара = -1 Тогда
			ИндексИдТовара = ГлЯдро_НайтиИндексИдТовараВМассивеИмен(ДанныеДляВыгрузки.МассивИмен);
		КонецЕсли;
		
		ОкончаниеПолученияДанныхИз1С 	= ТекущаяДата();
		ВремяПолученияДанныхИз1С 		= ВремяПолученияДанныхИз1С + (ОкончаниеПолученияДанныхИз1С - НачалоПолученияДанныхИз1С);			
		
		НачалоВыгрузкиДанныхНаСерверSMARTS = ТекущаяДата();		
		
		// Если выгружается первая порция (до этого не было порций с данными), содержащая ненулевое количество строк, то используем флаг из настроек, иначе - дописываем номенклатуру
		ПереписыватьНоменклатуруПриВыгрузке = ?(ВсегоСтрок = 0 И КоличествоСтрокВПорции > 0, ПереписыватьНоменклатуруПриВыгрузке, Ложь);
		
		// При получении из 1С первой непустой порции данных вызываем соответствующий метод для начала выгрузки таблицы
		Если НЕ НачатаВыгрузкаТаблицы Тогда
			
			Если ИмяТаблицы = "Номенклатура" Тогда
				СтруктураПодключенияMS.TerminalConnector.ПерезаписыватьНоменклатуру(ПереписыватьНоменклатуруПриВыгрузке);
				РезультатПопытки = СтруктураПодключенияMS.TerminalConnector.НачатьВыгрузкуТоваров(ДанныеДляВыгрузки.МассивИмен);
			Иначе
				РезультатПопытки = СтруктураПодключенияMS.TerminalConnector.НачатьВыгрузкуТаблицы(ИмяТаблицы, ДанныеДляВыгрузки.МассивИмен, Истина);
			КонецЕсли;
			
			Если НЕ РезультатПопытки Тогда
				
				ОписаниеОшибки = КомЯдро_ПолучитьОшибку();		
				Сообщение = "Таблица [" + ИмяТаблицы + "] не выгружается!" + Символы.ВК + ОписаниеОшибки;
				РезультатВыгрузки.Вставить("Статус"		, Ложь);				
				РезультатВыгрузки.Вставить("Сообщение"	, Сообщение);
				Сообщить(Сообщение);				
				Возврат РезультатВыгрузки;
				
			Иначе
				НачатаВыгрузкаТаблицы = РезультатПопытки; 
			КонецЕсли;		
			
		КонецЕсли;
		
		ВсегоСтрок = ВсегоСтрок + КоличествоСтрокВПорции;								
		
		Если РезультатВыгрузки.Статус Тогда
			
			Для Каждого МассивСтрокиВыгрузки из ДанныеДляВыгрузки.МассивыСтрок Цикл
				
				Если ИмяТаблицы = "Номенклатура" Тогда
					РезультатПопытки = СтруктураПодключенияMS.TerminalConnector.ДобавитьВВыгрузкуТоваров(МассивСтрокиВыгрузки);					
					// Подсчет количества различных товаров в выгрузке
					Если ИндексИдТовара <> -1 Тогда
						СоответствиеРазличныхТоваров.Вставить(МассивСтрокиВыгрузки[ИндексИдТовара]);
					КонецЕсли;	
				Иначе
					РезультатПопытки = СтруктураПодключенияMS.TerminalConnector.ДобавитьВВыгрузкуТаблицы(МассивСтрокиВыгрузки);
				КонецЕсли;
				
				Если НЕ РезультатПопытки Тогда
					
					ОписаниеОшибки = КомЯдро_ПолучитьОшибку();		
					Сообщение = "Ошибка выгрузки таблицы [" + ИмяТаблицы + "]." + Символы.ВК + ОписаниеОшибки;
					РезультатВыгрузки.Вставить("Статус"		, Ложь);				
					РезультатВыгрузки.Вставить("Сообщение"	, Сообщение);
					Сообщить(Сообщение);					
					СтруктураПодключенияMS.TerminalConnector.ПрерватьВыгрузкуТаблицы();			
					Прервать;
					
				КонецЕсли;				
				
			КонецЦикла;
			
		КонецЕсли;		
		
		ОкончаниеВыгрузкиДанныхНаСерверSMARTS 	= ТекущаяДата();
		ВремяВыгрузкиДанныхНаСерверSMARTS		= ВремяВыгрузкиДанныхНаСерверSMARTS + (ОкончаниеВыгрузкиДанныхНаСерверSMARTS - НачалоВыгрузкиДанныхНаСерверSMARTS);			
		
		ОкончаниеВыгрузкиПорции = ТекущаяДата();
		ВремяВыгрузкиПорции		= ОкончаниеВыгрузкиПорции - НачалоВыгрузкиПорции;			
		
		ПредставлениеВремениВыгрузки = ГлЯдро_ПредставлениеВремени(ВремяВыгрузкиПорции);		
		
		Сообщить("Выгрузка таблицы [" + ИмяТаблицы + "] порциями. Выгружена порция №" + СокрЛП(НомерПорции) + " из " + СокрЛП(КоличествоПорций) + ", содержащая " + СокрЛП(КоличествоСтрокВПорции) + " строк. Всего выгружено " + СокрЛП(ВсегоСтрок) + " строк. Затраченное время: " + ПредставлениеВремениВыгрузки);
		
	КонецЦикла;			
	
	Если РезультатВыгрузки.Статус Тогда
		
		НачалоЗавершенияВыгрузкиНаСерверSMARTS = ТекущаяДата();		
		
		Если ИмяТаблицы = "Номенклатура" Тогда
			РезультатПопытки = СтруктураПодключенияMS.TerminalConnector.ЗавершитьВыгрузкуТоваров();	
		Иначе
			РезультатПопытки = СтруктураПодключенияMS.TerminalConnector.ЗавершитьВыгрузкуТаблицы();	
		КонецЕсли;
		
		ОкончаниеЗавершенияВыгрузкиНаСерверSMARTS 	= ТекущаяДата();
		ВремяЗавершенияВыгрузкиНаСерверSMARTS		= ОкончаниеЗавершенияВыгрузкиНаСерверSMARTS - НачалоЗавершенияВыгрузкиНаСерверSMARTS;
		
		ВремяВыгрузкиДанныхНаСерверSMARTS 			= ВремяВыгрузкиДанныхНаСерверSMARTS + ВремяЗавершенияВыгрузкиНаСерверSMARTS;		
		
		Если НЕ РезультатПопытки Тогда
			ОписаниеОшибки = КомЯдро_ПолучитьОшибку();		
			Сообщение = "Не удалось закончить выгрузку таблицы [" + ИмяТаблицы + "]." + Символы.ВК + ОписаниеОшибки;
			РезультатВыгрузки.Вставить("Статус"		, Ложь);				
			РезультатВыгрузки.Вставить("Сообщение"	, Сообщение);
			Сообщить(Сообщение);
		Иначе

			ПредставлениеВремениЗавершенияВыгрузкиНаСерверSMARTS = ГлЯдро_ПредставлениеВремени(ВремяЗавершенияВыгрузкиНаСерверSMARTS);
			
			Сообщить("Завершение выгрузки таблицы [" + ИмяТаблицы + "] порциями. Затраченное время: " + ПредставлениеВремениЗавершенияВыгрузкиНаСерверSMARTS);					
			
			ПодробноеСообщение = Символы.ВК + "Таблица [" + ИмяТаблицы + "] успешно выгружена порциями по " + СокрЛП(РазмерПорцииНоменклатуры) + " позиций. Выгружено:"
							   + Символы.ВК + Символы.Таб + "- " + Формат(ВсегоСтрок, "ЧН=0; ЧГ=3,0") + " строк";
						
			Если ИмяТаблицы = "Номенклатура" Тогда																					
				ПодробноеСообщение = ПодробноеСообщение 
									+ Символы.ВК + Символы.Таб + "- " + Формат(СоответствиеРазличныхТоваров.Количество(), "ЧН=0; ЧГ=3,0") + " товаров";
			КонецЕсли;																				
			
			ОбщееВремяВыгрузки 			= ВремяПолученияДанныхИз1С + ВремяВыгрузкиДанныхНаСерверSMARTS; 				
			
			ПредставлениеВремени1С 		= ГлЯдро_ПредставлениеВремени(ВремяПолученияДанныхИз1С);
			ПредставлениеВремениMS 		= ГлЯдро_ПредставлениеВремени(ВремяВыгрузкиДанныхНаСерверSMARTS);
			ПредставлениеВремениОбщее 	= ГлЯдро_ПредставлениеВремени(ОбщееВремяВыгрузки);			
			
			ПодробноеСообщение = ГлЯдро_СформироватьПодробноеСообщениеОВыгрузкеТаблицы(ПодробноеСообщение, ПредставлениеВремениОбщее, ПредставлениеВремени1С, ПредставлениеВремениMS);				
			
			РезультатВыгрузки.Вставить("Статус"		, Истина);				
			РезультатВыгрузки.Вставить("Сообщение"	, ПодробноеСообщение);
			Сообщить(ПодробноеСообщение);			
			
		КонецЕсли;
		
	КонецЕсли;	
	
	СтруктураПодключенияMS.TerminalConnector.ОсвободитьРесурсы();		
	
	Возврат РезультатВыгрузки;
	
КонецФункции // ГлЯдро_ВыгрузитьТаблицуНаСерверSMARTSПорциями()

Функция ГлЯдро_ПолучитьПорциюДанныхДляВыгрузки(ИмяТаблицы, НастройкиКомпоновщика = Ложь, ПараметрыКомпоновщика = Ложь, ID_БазыSMARTS = "", ОтборПоНоменклатуре = Неопределено) Экспорт				
	
	ЗапросВыгрузки = ГлЯдро_ПолучитьЗапросДляВыгрузкиСПравочников(ИмяТаблицы, НастройкиКомпоновщика, ПараметрыКомпоновщика, , , ОтборПоНоменклатуре);
	
	ДанныеДляВыгрузки = ЗапросВыгрузки.Выполнить().Выгрузить();					
	
	ГлЯдро_ОбработатьРезультатыВыгрузкиТаблицы(ДанныеДляВыгрузки, ИмяТаблицы);	
	
	МассивыДляВыгрузки 	= ГлЯдро_СформироватьМассивыДляВыгрузкиТаблиц(ИмяТаблицы, ДанныеДляВыгрузки);
	
	Возврат МассивыДляВыгрузки;		
	
КонецФункции

Функция ГлЯдро_ПолучитьДанныеТаблицыДляВыгрузкиНаСерверSMARTS(ИмяТаблицы, НастройкиКомпоновщика = "", ПараметрыКомпоновщика = Ложь, ПараметрыОнлайн = "") Экспорт
	
	ЗапросВыгрузки = ГлЯдро_ПолучитьЗапросДляВыгрузкиСПравочников(ИмяТаблицы, НастройкиКомпоновщика, ПараметрыКомпоновщика,, ПараметрыОнлайн);
	
	ДанныеДляВыгрузки = ЗапросВыгрузки.Выполнить().Выгрузить();
	
	ГлЯдро_ОбработатьРезультатыВыгрузкиТаблицы(ДанныеДляВыгрузки, ИмяТаблицы);
	
	Возврат ДанныеДляВыгрузки;
	
КонецФункции

Функция ГлЯдро_ПолучитьЗапросДляВыгрузкиСправочников(ИмяТаблицы, НастройкиКомпоновщика = "", ПараметрыКомпоновщика = Ложь, СхемаСКД = Неопределено, ПараметрыОнлайн = "", ОтборПоНоменклатуре = Неопределено)		
	
	Если СхемаСКД = Неопределено Тогда
		СхемаСКД = ГлЯдро_ПолучитьСхемуСКДДляВыгрузкиСправочников(ИмяТаблицы, ПараметрыКомпоновщика);
	КонецЕсли;
	
	КомпоновщикСКД = Новый КомпоновщикНастроекКомпоновкиДанных;
	КомпоновщикСКД.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаСКД));
	
	// Применяем настройки компоновки из параметров
	Если ЗначениеЗаполнено(НастройкиКомпоновщика) Тогда
		КомпоновщикСКД.ЗагрузитьНастройки(НастройкиКомпоновщика);
	КонецЕсли;
	
	// Дополняем онлайн-таблицу (не номенклатура) допусловиями
	Если ИмяТаблицы <> "Номенклатура" И ПараметрыОнлайн <> "" И НЕ ПараметрыОнлайн.IsValueItem Тогда
		МетаданныеНСИ = ГлЯдро_ПолучитьМетаданныеНСИ();
		ГлЯдро_УстановитьОтборКомпоновщикаДляВыгрузкиТаблиц(ИмяТаблицы, ПараметрыОнлайн, КомпоновщикСКД.Настройки.Отбор.Элементы, МетаданныеНСИ);
	КонецЕсли;
	
	РезультатНастройкиКомпоновки = КомпоновщикСКД.ПолучитьНастройки();
	
	// Добавляем все поля для макета компоновки
	ГруппировкаДокументов = РезультатНастройкиКомпоновки.Структура.Добавить(Тип("ГруппировкаКомпоновкиДанных"));
	Для Каждого ПолеЗапроса Из СхемаСКД.НастройкиПоУмолчанию.Выбор.Элементы Цикл
		ВыбранноеПоле = РезультатНастройкиКомпоновки.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
		ВыбранноеПоле.Заголовок = ПолеЗапроса.Поле;
		ВыбранноеПоле.Использование = Истина;
		ВыбранноеПоле.Поле = Новый ПолеКомпоновкиДанных(ПолеЗапроса.Поле);
		ПолеГруппировки = ГруппировкаДокументов.ПоляГруппировки.Элементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));    
		ПолеГруппировки.Использование = Истина;
		ПолеГруппировки.Поле = Новый ПолеКомпоновкиДанных(ПолеЗапроса.Поле);
	КонецЦикла;
	
	Если ИмяТаблицы = "Номенклатура" И ОтборПоНоменклатуре <> Неопределено Тогда
		НовыйЭлементОтбора = РезультатНастройкиКомпоновки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));		
		НовыйЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Номенклатура");
		НовыйЭлементОтбора.Использование = Истина;
		НовыйЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСпискеПоИерархии;
		НовыйЭлементОтбора.ПравоеЗначение = ОтборПоНоменклатуре;
	КонецЕсли;	
	
	// Выполняем компоновку макета
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаСКД, РезультатНастройкиКомпоновки,,,Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
	
	// Берем скомпонованный запрос
	ТекстЗапроса = МакетКомпоновки.НаборыДанных[ИмяТаблицы].Запрос;
		
	ЗапросРезультат = Новый Запрос(ТекстЗапроса);
	Для Каждого Параметр Из МакетКомпоновки.ЗначенияПараметров Цикл
		ЗапросРезультат.УстановитьПараметр(Параметр.Имя, Параметр.Значение);
	КонецЦикла;
	
	// Дополнительно для таблиц 
	Если ИмяТаблицы = "Номенклатура" Тогда
		ГлЯдро_УстановитьПараметрыЗапросаДляНоменклатуры(ЗапросРезультат, ПараметрыОнлайн);
	ИначеЕсли ИмяТаблицы = "Цены" Тогда
		Если НЕ ЗапросРезультат.Параметры.Свойство("ОсновнаяЦена") Тогда
			ЗапросРезультат.УстановитьПараметр("ОсновнаяЦена", Конф_ПолучитьПустуюСсылкуСправочника("ОсновнаяЦена"));
		КонецЕсли;
	КонецЕсли;
	
	//++ Пимуков И.Н. 2018-07-11 Установка текущей структурной единицы
	Если ЗапросРезультат.Параметры.Свойство("ТекущаяСтруктурнаяЕдиница")
		И Метаданные.ПараметрыСеанса.Найти("ТекущаяСтруктурнаяЕдиница") <> Неопределено Тогда;
		ЗапросРезультат.УстановитьПараметр("ТекущаяСтруктурнаяЕдиница", ПараметрыСеанса.ТекущаяСтруктурнаяЕдиница);
	КонецЕсли;
	//-- Пимуков И.Н.
	
	
	Возврат ЗапросРезультат;
	
КонецФункции

Функция ГлЯдро_ПолучитьСхемуСКДДляВыгрузкиСправочников(ИмяТаблицы, ПараметрыКомпоновщика) Экспорт
	
	СхемаСКД = ИнтеграционнаяОбработка.ПолучитьМакетСКД(ИмяТаблицы);
					
	// Определяемые общие параметры
	Если ТипЗнч(ПараметрыКомпоновщика) = Тип("ТаблицаЗначений") Тогда
		Для Каждого ПараметрКомпоновки Из ПараметрыКомпоновщика Цикл
	        ПараметрСхемыКомпоновкиДанных = СхемаСКД.Параметры.Добавить();
	        ПараметрСхемыКомпоновкиДанных.Имя                      = ПараметрКомпоновки.ID_Параметра;
	        ПараметрСхемыКомпоновкиДанных.Заголовок                = СокрЛП(ПараметрКомпоновки.Наименование);
	        ПараметрСхемыКомпоновкиДанных.ВключатьВДоступныеПоля   = Истина;
			ПараметрСхемыКомпоновкиДанных.ОграничениеИспользования = Истина;
			ПараметрСхемыКомпоновкиДанных.Использование            = ИспользованиеПараметраКомпоновкиДанных.Авто;
			ПараметрСхемыКомпоновкиДанных.ТипЗначения.Типы().Добавить(ТипЗнч(ПараметрКомпоновки.Значение));
			ПараметрСхемыКомпоновкиДанных.Значение                 = ПараметрКомпоновки.Значение;
		КонецЦикла;
	КонецЕсли;
	
	Возврат СхемаСКД;
	
КонецФункции

Функция ГлЯдро_ПолучитьМассивыТаблицыДляВыгрузкиНаСерверSMARTS(ИмяТаблицы, НастройкиКомпоновщика = "", ПараметрыКомпоновщика = Ложь) Экспорт
	
	ДанныеДляВыгрузки = ГлЯдро_ПолучитьДанныеТаблицыДляВыгрузкиНаСерверSMARTS(ИмяТаблицы, НастройкиКомпоновщика, ПараметрыКомпоновщика);
	ДанныеДляВыгрузки = ГлЯдро_СформироватьМассивыДляВыгрузкиТаблиц(ИмяТаблицы, ДанныеДляВыгрузки);
	
	Возврат ДанныеДляВыгрузки;
	
КонецФункции

Функция ГлЯдро_СформироватьМассивыДляВыгрузкиТаблиц(ИмяТаблицы, ДанныеДляВыгрузки) Экспорт
	
	Если ИмяТаблицы = "Номенклатура" Тогда
		СтруктураМассивов = Новый Структура("МассивИмен,МассивыСтрок,КоличествоТоваров"); 
		тзКолонкаТовары = ДанныеДляВыгрузки.Скопировать(,"Product_Id");
		тзКолонкаТовары.Свернуть("Product_Id");
		КоличествоТоваров = тзКолонкаТовары.Количество();
		
		СтруктураМассивов.Вставить("КоличествоТоваров",КоличествоТоваров);
	Иначе
		СтруктураМассивов = Новый Структура("МассивИмен,МассивыСтрок"); 
	КонецЕсли;
	
	МассивИмен = Новый Массив;
	МассивИменДляПоиска = Новый Массив;
		
	Для Каждого Колонка Из ДанныеДляВыгрузки.Колонки Цикл
		ИмяДляМассива = Колонка.Имя;
		// Реальное имя в таблице запроса
		МассивИменДляПоиска.Добавить(ИмяДляМассива);
		// Имя для выгрузки онлайн
		ИмяДляМассива = СтрЗаменить(ИмяДляМассива, "Product_", "Product.");
		ИмяДляМассива = СтрЗаменить(ИмяДляМассива, "Packing_", "Packing.");
		МассивИмен.Добавить(ИмяДляМассива);
	КонецЦИкла;
	
	МассивыСтрок = Новый Массив;
	Для Каждого СтрокаВыгрузки Из ДанныеДляВыгрузки Цикл
		МассивТекущейСтроки = Новый Массив;
		Для Каждого ИмяКолонки Из МассивИменДляПоиска Цикл
			МассивТекущейСтроки.Добавить(СтрокаВыгрузки[ИмяКолонки]);
		КонецЦикла;
		МассивыСтрок.Добавить(МассивТекущейСтроки);
	КонецЦикла;
	
	СтруктураМассивов.Вставить("МассивИмен", МассивИмен);
	СтруктураМассивов.Вставить("МассивыСтрок", МассивыСтрок);	
	
	Возврат СтруктураМассивов;
	
КонецФункции

Процедура ГлЯдро_ОбработатьРезультатыВыгрузкиТаблицы(ДанныеДляОбработки, ИмяТаблицы)
	
	ТаблицаЗаменыGUID = Новый ТаблицаЗначений;
	ТаблицаЗаменыGUID.Колонки.Добавить("КолонкаСсылка");
	ТаблицаЗаменыGUID.Колонки.Добавить("КолонкаGUID");
	
	Для Каждого Колонка Из ДанныеДляОбработки.Колонки Цикл
		Если Найти(Колонка.Имя, "_GUID") Тогда
			НоваяСтрока = ТаблицаЗаменыGUID.Добавить();
			НоваяСтрока.КолонкаСсылка = Колонка.Имя;
			НоваяСтрока.КолонкаGUID = СтрЗаменить(Колонка.Имя, "_GUID", "");
			ДанныеДляОбработки.Колонки.Добавить(НоваяСтрока.КолонкаGUID);
		КонецЕсли;
	КонецЦикла;
	
	ДлинаКодаВесовогоТовара = ГлЯдро_ПолучитьИзКэшаНастройкуSMARTS("ДлинаКодаВесовогоТовара");
	
	Для Каждого СтрокаТаблицы из ДанныеДляОбработки Цикл 
		
		// Заменяем ссылки на текстовые гуиды
		Для Каждого СтрокаЗамены Из ТаблицаЗаменыGUID Цикл
			Если ЗначениеЗаполнено(СтрокаТаблицы[СтрокаЗамены.КолонкаСсылка]) Тогда
				СтрокаТаблицы[СтрокаЗамены.КолонкаGUID] = XMLСтрока(СтрокаТаблицы[СтрокаЗамены.КолонкаСсылка]); 										
			Иначе
				СтрокаТаблицы[СтрокаЗамены.КолонкаGUID] = ""; // В MS нельзя отправлять значения "Неопределено" и "NULL", можно только значения примитивных типов	
			КонецЕсли;
		КонецЦикла;
		
		// приводим необходимые поисковые поля в нужный регистр
		Если ДанныеДляОбработки.Колонки.Найти("НаименованиеДляПоиска") <> Неопределено Тогда
			СтрокаТаблицы.НаименованиеДляПоиска = НРег(СтрокаТаблицы.НаименованиеДляПоиска);
		КонецЕсли;
		
		// Дополнительная обработка в зависимости от имени таблицы
		Если ИмяТаблицы = "Номенклатура" Тогда
			// Переводим необходимые числа в строки, удаляем непереносимые пробелы, весовые коды добиваем нулями до значения параметра "ДлинаКодаВесовогоТовара"
			СтрокаТаблицы.Product_Barcode = СтрЗаменить(СокрЛП(СтрокаТаблицы.Product_Barcode), Символы.НПП, "");
			СтрокаТаблицы.Product_Marking = СтрЗаменить(СокрЛП(СтрокаТаблицы.Product_Marking), Символы.НПП, "");
			Если ТипЗнч(СтрокаТаблицы.Product_Marking) = Тип("Число") Тогда
				СтрокаТаблицы.Product_Marking = Строка(СтрокаТаблицы.Product_Marking);
			КонецЕсли;
			СтрокаТаблицы.Packing_Barcode = СтрЗаменить(СокрЛП(СтрокаТаблицы.Packing_Barcode), Символы.НПП, "");
			Если СтрокаТаблицы.Product_Весовой И СтрДлина(СтрокаТаблицы.Packing_Barcode) < ДлинаКодаВесовогоТовара Тогда
				Для Сч = СтрДлина(СтрокаТаблицы.Packing_Barcode) По ДлинаКодаВесовогоТовара - 1 Цикл
					СтрокаТаблицы.Packing_Barcode = "0" + СтрокаТаблицы.Packing_Barcode;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
		
		Если ИмяТаблицы = "Ячейки" И НЕ ЗначениеЗаполнено(СтрокаТаблицы.Barcode) Тогда		
			СтрокаТаблицы.Barcode = ГлЯдро_ЧисловойКодПоСсылке(СтрокаТаблицы.Id_GUID);		
		КонецЕсли;

	КонецЦикла;
	
			
	Если ИмяТаблицы = "ДопРеквизиты" Тогда				
		
		ИмяКолонкиДвоичныеДанные 	= "ДвоичныеДанныеИзображения";
		ИмяКолонкиИзображение 		= "Изображение";		
		КолонкиТаблицы				= ДанныеДляОбработки.Колонки;
		КолонкаДвоичныеДанные		= КолонкиТаблицы.Найти(ИмяКолонкиДвоичныеДанные);								
		
		Если КолонкаДвоичныеДанные <> Неопределено Тогда			
			
			Если Найти(ПараметрыПодключенияMS.ИмяПриложения,"Прайсчекер") // Временно проверку сделаем в таком виде, пока не переделаем структуру подключения 
				//ПараметрыПодключенияMS.ТипУстановленногоПродукта = "Прайсчекер" 
				//И ПараметрыПодключенияMS.УровеньПриложенияСтрокой = "Полный" 
				Тогда				
				
				КолонкиТаблицы.Добавить(ИмяКолонкиИзображение, Новый ОписаниеТипов("Строка", , , , Новый КвалификаторыСтроки(0, ДопустимаяДлина.Переменная)));
				
				Для Каждого СтрокаТаблицы из ДанныеДляОбработки Цикл 
					Если ТипЗнч(СтрокаТаблицы[ИмяКолонкиДвоичныеДанные]) = Тип("ХранилищеЗначения") Тогда
						ЗначениеХранилища =  СтрокаТаблицы[ИмяКолонкиДвоичныеДанные].Получить();
						Если ТипЗнч(ЗначениеХранилища) = Тип("Картинка")  Тогда
							ЗначениеХранилища = ЗначениеХранилища.ПолучитьДвоичныеДанные();	
						КонецЕсли;
						СтрокаТаблицы[ИмяКолонкиИзображение] = Base64Строка(ЗначениеХранилища);																	
					КонецЕсли; 							
				КонецЦикла;
				
			КонецЕсли;	
			
			КолонкиТаблицы.Удалить(КолонкаДвоичныеДанные);
			
		КонецЕсли;							
		
	КонецЕсли;
	
	Если ИмяТаблицы = "ФормыА" Тогда
		// Переименовываем колонки для форм А
		ДанныеДляОбработки.Колонки.Найти("НачалоДействия").Имя = "Начало";
		ДанныеДляОбработки.Колонки.Найти("КонецДействия").Имя = "Конец";
	КонецЕсли;	
	
	// удаляем колонки с ссылками
	Для Каждого СтрокаЗамены Из ТаблицаЗаменыGUID Цикл
		ДанныеДляОбработки.Колонки.Удалить(СтрокаЗамены.КолонкаСсылка);
	КонецЦикла;
	
КонецПроцедуры

#Область ГлобальныйКонтекст_СправочникиИТаблицы_ДополнительноДляНоменклатуры

Функция ГлЯдро_ПолучитьМассивСсылокНоменклатуры() Экспорт

	МетаданныеНСИ 				= Конф_ПолучитьМетаданныеНСИ();	
	ИмяСправочникаНоменклатура 	= МетаданныеНСИ.Номенклатура.ИмяСправочника;
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	Номенклатура.Ссылка
	                      |ИЗ
	                      |	Справочник." + ИмяСправочникаНоменклатура + " КАК Номенклатура
	                      |ГДЕ
	                      |	НЕ Номенклатура.ПометкаУдаления
						  |	И НЕ Номенклатура.ЭтоГруппа");
	
	МассивСсылокНоменклатуры = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");			
	
	Возврат МассивСсылокНоменклатуры;

КонецФункции
 
Процедура ГлЯдро_УстановитьПараметрыЗапросаДляНоменклатуры(ЗапросРезультат, ПараметрыОнлайн)
	
	МетаданныеНСИ = ГлЯдро_ПолучитьМетаданныеНСИ();
	ИмяСправочникаНоменклатуры = МетаданныеНСИ.Номенклатура.ИмяСправочника;
	ИмяСправочникаЕИ = МетаданныеНСИ.ЕдиницыИзмерения.ИмяСправочника;
	
	ЗапросРезультат.УстановитьПараметр("ИспользоватьХарактеристикиНоменклатуры", Конф_ИспользоватьХарактеристикиНоменклатуры());
    ЗапросРезультат.УстановитьПараметр("РежимЗапроса", "");
    ЗапросРезультат.УстановитьПараметр("ПараметрНоменклатуры", Новый Массив);
    ЗапросРезультат.УстановитьПараметр("ПараметрУпаковки", Новый Массив);
    ЗапросРезультат.УстановитьПараметр("СтрокаПоиска", "%%");
    ЗапросРезультат.УстановитьПараметр("ЧислоПоиска", -1);
    ЗапросРезультат.УстановитьПараметр("ЭтоВесовойТовар", Ложь);
	
	Если ЗначениеЗаполнено(ПараметрыОнлайн) Тогда
	    ЗапросРезультат.УстановитьПараметр("РежимЗапроса", ПараметрыОнлайн.Режим);
		Если ПараметрыОнлайн.Режим = "ПоискПоАртикулуКодуШК" Тогда
			ЗапросРезультат.УстановитьПараметр("ЭтоВесовойТовар", ПараметрыОнлайн.СтруктураШтрихкода.ЭтоВесовойТовар);
			ЗапросРезультат.УстановитьПараметр("ЧислоПоиска", ПараметрыОнлайн.СтруктураШтрихкода.КодЧисло);
			/// { Александр Лаптев; Старт-ПРО. 06.11.2019 19:38:48 (+)
			//ЗапросРезультат.УстановитьПараметр("СтрокаПоиска", "%" + ПараметрыОнлайн.СтруктураШтрихкода.КодСтрока + "%");
			ЗапросРезультат.УстановитьПараметр("СтрокаПоиска", ПараметрыОнлайн.СтруктураШтрихкода.КодСтрока);
			/// { Александр Лаптев; Старт-ПРО. 06.11.2019 19:38:48 (+)
			
		ИначеЕсли ПараметрыОнлайн.Режим = "ПоискПоНоменклатуреУпаковке" Тогда
			МассивНоменклатур = Новый Массив;
			МассивУпаковок = Новый Массив;
			СсылкаНоменклатуры = ГлЯдро_ПолучитьЗначениеСправочникаПоID(ИмяСправочникаНоменклатуры, ПараметрыОнлайн.ПараметрНоменклатуры);
			Если ЗначениеЗаполнено(СсылкаНоменклатуры) Тогда
				МассивНоменклатур.Добавить(СсылкаНоменклатуры);
				СсылкаУпаковки = ГлЯдро_ПолучитьЗначениеСправочникаПоID(ИмяСправочникаЕИ, ПараметрыОнлайн.ПараметрУпаковки);
				Если ЗначениеЗаполнено(СсылкаУпаковки) Тогда
					МассивУпаковок.Добавить(СсылкаУпаковки);
				КонецЕсли;
			КонецЕсли;
			ЗапросРезультат.УстановитьПараметр("ПараметрНоменклатуры", МассивНоменклатур);
			ЗапросРезультат.УстановитьПараметр("ПараметрУпаковки", МассивУпаковок);
		ИначеЕсли ПараметрыОнлайн.Режим = "ПоискПоМассивамНоменклатурыУпаковки" Тогда
			МассивНоменклатур = Новый Массив;
			МассивУпаковок = Новый Массив;
			Для Индекс = 0 По ПараметрыОнлайн.ПараметрНоменклатуры.GetLength() - 1 Цикл
				СтрокаНоменклатуры = ПараметрыОнлайн.ПараметрНоменклатуры.GetValue(Индекс);
				СсылкаНоменклатуры = ГлЯдро_ПолучитьЗначениеСправочникаПоID(ИмяСправочникаНоменклатуры, СтрокаНоменклатуры);
				Если ЗначениеЗаполнено(СсылкаНоменклатуры) Тогда
					МассивНоменклатур.Добавить(СсылкаНоменклатуры);
					СтрокаУпаковки = ПараметрыОнлайн.ПараметрУпаковки.GetValue(Индекс);
					СсылкаУпаковки = ГлЯдро_ПолучитьЗначениеСправочникаПоID(ИмяСправочникаЕИ, СтрокаУпаковки);
					Если ЗначениеЗаполнено(СсылкаУпаковки) Тогда
						МассивУпаковок.Добавить(СсылкаУпаковки);
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			ЗапросРезультат.УстановитьПараметр("ПараметрНоменклатуры", МассивНоменклатур);
			ЗапросРезультат.УстановитьПараметр("ПараметрУпаковки", МассивУпаковок);
		ИначеЕсли ПараметрыОнлайн.Режим = "ПоискПоЧастиНаименования" Тогда
			ЗапросРезультат.УстановитьПараметр("СтрокаПоиска", "%" + ПараметрыОнлайн.ПараметрНоменклатуры + "%");
			Попытка
				ЗапросРезультат.УстановитьПараметр("ЧислоПоиска", Число(ПараметрыОнлайн.ПараметрНоменклатуры));
			Исключение			
			КонецПопытки; 			
		Иначе
			МассивНоменклатур = Новый Массив;
			СсылкаНоменклатуры = ГлЯдро_ПолучитьЗначениеСправочникаПоID(ИмяСправочникаНоменклатуры, ПараметрыОнлайн.ПараметрНоменклатуры);
			//Если ЗначениеЗаполнено(СсылкаНоменклатуры) Тогда
				МассивНоменклатур.Добавить(СсылкаНоменклатуры);
			//КонецЕсли;
			ЗапросРезультат.УстановитьПараметр("ПараметрНоменклатуры", МассивНоменклатур);
			Если ПараметрыОнлайн.Режим = "СписокНоменклатуры" Тогда
				Если СсылкаНоменклатуры.ЭтоГруппа ИЛИ НЕ ЗначениеЗаполнено(СсылкаНоменклатуры) Тогда // если заходим в корень справочника, то родитель будет пустой ссылкой
				    ЗапросРезультат.УстановитьПараметр("РежимЗапроса", "СписокНоменклатурыДляГрупп");
				Иначе
				    ЗапросРезультат.УстановитьПараметр("РежимЗапроса", "СписокУпаковокДляНоменклатуры");
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если ЗапросРезультат.Параметры.Свойство("Склад") Тогда
		Если (ТипЗнч(ЗапросРезультат.Параметры.Склад) = Тип("СправочникСсылка." + МетаданныеНСИ.Склады.ИмяСправочника) И ЗначениеЗаполнено(ЗапросРезультат.Параметры.Склад))
			ИЛИ (ТипЗнч(ЗапросРезультат.Параметры.Склад) = Тип("СписокЗначений") И ЗапросРезультат.Параметры.Склад.Количество() <> 0) Тогда
			ЗапросРезультат.УстановитьПараметр("ИспользоватьОграничениеПоСкладам", Истина);
		КонецЕсли;
	Иначе
		ЗапросРезультат.УстановитьПараметр("Склад", Неопределено);
	КонецЕсли;
	
	Если ЗапросРезультат.Параметры.Свойство("ТипЦен") Тогда
		Если (ТипЗнч(ЗапросРезультат.Параметры.ТипЦен) = Тип("СправочникСсылка." + МетаданныеНСИ.ТипыЦен.ИмяСправочника) И ЗначениеЗаполнено(ЗапросРезультат.Параметры.ТипЦен))
			ИЛИ (ТипЗнч(ЗапросРезультат.Параметры.ТипЦен) = Тип("СписокЗначений") И ЗапросРезультат.Параметры.ТипЦен.Количество() <> 0) Тогда
			ЗапросРезультат.УстановитьПараметр("ИспользоватьОграничениеПоТипамЦен", Истина);
		КонецЕсли;
	Иначе
		ЗапросРезультат.УстановитьПараметр("ТипЦен", Неопределено);
	КонецЕсли;
	
КонецПроцедуры

Функция ГлЯдро_НайтиИндексИдТовараВМассивеИмен(МассивИмен) Экспорт		
	
	ИндексКолонкиСТоваром = 0;	
	// воспользоваться методом "Найти()" не получится,
	// т.к. в этом методе строки чувствительны к регистру,
	// поэтому используем прямой перебор всех элементов массива
	Для каждого Элемент Из МассивИмен Цикл		
		Если ВРег(СокрЛП(Элемент)) = ВРег(СокрЛП("Product.Id")) Тогда			
			Возврат ИндексКолонкиСТоваром;			
		КонецЕсли;			
		ИндексКолонкиСТоваром = ИндексКолонкиСТоваром + 1;
	КонецЦикла; 
		
	Возврат -1;				
	
КонецФункции		

#КонецОбласти

#Область ГлобальныйКонтекст_СправочникиИТаблицы_ДополнительноДляОстальныхТаблиц

Процедура ГлЯдро_УстановитьОтборКомпоновщикаДляВыгрузкиТаблиц(ИмяТаблицы, ПараметрыОнлайн, ЭлементыОтбора, МетаданныеНСИ)
	
	Если ПараметрыОнлайн.IsGroup Тогда
		ЭлементОтбора = ЭлементыОтбора.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
		ЭлементОтбора.ТипГруппы = ГлЯдро_ПолучитьТипГруппыОтбораПоСтроке(ПараметрыОнлайн.GroupTypeStr);  
		Для Индекс = 0 По ПараметрыОнлайн.Elements.Count-1 Цикл
			ПодчиненныеПараметрыОнлайн = ПараметрыОнлайн.Elements.Item(Индекс);
			ГлЯдро_УстановитьОтборКомпоновщикаДляВыгрузкиТаблиц(ИмяТаблицы, ПодчиненныеПараметрыОнлайн, ЭлементОтбора.Элементы, МетаданныеНСИ);  
		КонецЦикла;
	Иначе
		ЭлементОтбора = ЭлементыОтбора.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	 	ЭлементОтбора.ВидСравнения = ГлЯдро_ПолучитьВидСравненияПоСтроке(ПараметрыОнлайн.ComparisonTypeStr);
		Если ПараметрыОнлайн.LeftValue = "Ид" ИЛИ ПараметрыОнлайн.LeftValue = "ИдРодителя" ИЛИ ПараметрыОнлайн.LeftValue = "ИдСклада1С"
			ИЛИ ПараметрыОнлайн.LeftValue = "КлючХарактеристик" ИЛИ ПараметрыОнлайн.LeftValue = "КлючСерий" ИЛИ ПараметрыОнлайн.LeftValue = "ИдНоменклатуры"
			ИЛИ ПараметрыОнлайн.LeftValue = "ИдТовара" Тогда
			ПостфиксИмениПоля = "_GUID";
		Иначе
			ПостфиксИмениПоля = "";
		КонецЕсли;
		ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ПараметрыОнлайн.LeftValue + ПостфиксИмениПоля); 
	 	ЭлементОтбора.ПравоеЗначение = ГлЯдро_ПолучитьЗначениеДляОтбора(ИмяТаблицы, ПараметрыОнлайн.LeftValue, ПараметрыОнлайн.RightValue, МетаданныеНСИ);
	КонецЕсли;
	
КонецПроцедуры

Функция ГлЯдро_ЧисловойКодПоСсылке(Ссылка)
	ШестнадчатиричноеЧисло = СтрЗаменить(Строка(Ссылка.УникальныйИдентификатор()),"-","");
	Возврат ГлЯдро_ПреобразоватьИзШестнадцатиричнойСистемыСчисленияВДесятичноеЧисло(ШестнадчатиричноеЧисло);
КонецФункции

Функция ГлЯдро_ПреобразоватьИзШестнадцатиричнойСистемыСчисленияВДесятичноеЧисло(Знач Значение)
	
	Значение = НРег(Значение);
	ДлинаСтроки = СтрДлина(Значение);
	
	Результат = 0;
	Для НомерСимвола = 1 По ДлинаСтроки Цикл
		Результат = Результат * 16 + Найти("0123456789abcdef", Сред(Значение, НомерСимвола, 1)) - 1;
	КонецЦикла;
	
	Возврат Формат(Результат, "ЧГ=0");
	
КонецФункции

#КонецОбласти

Функция ГлЯдро_ПолучитьСписокИспользуемыхСправочников() Экспорт
	
	Возврат ИнтеграционнаяОбработка.Конф_ПолучитьСписокИспользуемыхСправочников();
	
КонецФункции

Функция ГлЯдро_ОчиститьТаблицуНаСервереSMARTS(ИмяТаблицы) Экспорт
	
	РезультатВыгрузки = КомЯдро_ОчиститьТаблицуНаСервереSMARTS(ИмяТаблицы);
	Сообщить(РезультатВыгрузки.Сообщение);
	Возврат РезультатВыгрузки;
	
КонецФункции

#КонецОбласти

#Область ГлобальныйКонтекст_Документы

#Область ГлобальныйКонтекст_Документы_MobileSMARTS

#Область ГлобальныйКонтекст_Документы_MobileSMARTS_ЧтениеДанных

Функция ГлЯдро_ПолучитьСписокДокументовНаСервереSMARTS(ID_БазыSMARTS = "") Экспорт
	ПустаяТаблица = ГлЯдро_ПолучитьПустуюТаблицуДокументовSMARTS();
	СписокДокументов = КомЯдро_ПолучитьСписокДокументовНаСервереSMARTS(ПустаяТаблица, ID_БазыSMARTS);
	Возврат СписокДокументов;
КонецФункции

Функция ГлЯдро_ПолучитьДанныеДокументаMS(ID_Документа, СтруктураДанныхДокументаMS, ID_БазыSMARTS,ФильтрТЧПоИдДокумента = Неопределено) Экспорт
	
	ДанныеДокументаMS = КомЯдро_ПолучитьДанныеДокументаНаСервереSMARTS(ID_Документа, СтруктураДанныхДокументаMS, ID_БазыSMARTS,ФильтрТЧПоИдДокумента);
	ДанныеДокументаMS = ГлЯдро_ЗаполнитьВычислимыеПоляДокументаMS(ДанныеДокументаMS, СтруктураДанныхДокументаMS);
	
	Возврат ДанныеДокументаMS;
	
КонецФункции

Функция ГлЯдро_ЗаполнитьВычислимыеПоляДокументаMS(ДанныеДокументаMS, СтруктураДанныхДокументаMS) Экспорт
	
	// Добавление таблиц
	ДанныеДокументаMS.Вставить("СтрокиСерии", Новый ТаблицаЗначений);
	Для Каждого РеквизитMS Из СтруктураДанныхДокументаMS.РеквизитыСерии Цикл
		ДанныеДокументаMS.СтрокиСерии.Колонки.Добавить(РеквизитMS.Значение,, РеквизитMS.Представление);
	КонецЦикла;
	ДанныеДокументаMS.Вставить("СтрокиСерийныеНомера", Новый ТаблицаЗначений);
	Для Каждого РеквизитMS Из СтруктураДанныхДокументаMS.РеквизитыСерийныеНомера Цикл
		ДанныеДокументаMS.СтрокиСерийныеНомера.Колонки.Добавить(РеквизитMS.Значение,, РеквизитMS.Представление);
	КонецЦикла;
	
	МетаданныеНСИ = ГлЯдро_ПолучитьМетаданныеНСИ();
	ЕстьАлко = Ложь;
	
	// Добавляем колонки вычислимых полей в таблицы
	ДанныеДокументаMS.СтрокиПлан.Колонки.Добавить("Номенклатура",           Новый ОписаниеТипов("СправочникСсылка." + МетаданныеНСИ.Номенклатура.ИмяСправочника));
	ДанныеДокументаMS.СтрокиФакт.Колонки.Добавить("Номенклатура",           Новый ОписаниеТипов("СправочникСсылка." + МетаданныеНСИ.Номенклатура.ИмяСправочника));
	ДанныеДокументаMS.СтрокиСерии.Колонки.Добавить("Номенклатура",          Новый ОписаниеТипов("СправочникСсылка." + МетаданныеНСИ.Номенклатура.ИмяСправочника));
	ДанныеДокументаMS.СтрокиСерийныеНомера.Колонки.Добавить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка." + МетаданныеНСИ.Номенклатура.ИмяСправочника));
	Если МетаданныеНСИ.Характеристики.Использование Тогда
		ДанныеДокументаMS.СтрокиПлан.Колонки.Добавить("Характеристика", Новый ОписаниеТипов("СправочникСсылка." + МетаданныеНСИ.Характеристики.ИмяСправочника));
		ДанныеДокументаMS.СтрокиФакт.Колонки.Добавить("Характеристика", Новый ОписаниеТипов("СправочникСсылка." + МетаданныеНСИ.Характеристики.ИмяСправочника));
	КонецЕсли;
	Если МетаданныеНСИ.Серии.Использование Тогда
		ДанныеДокументаMS.СтрокиПлан.Колонки.Добавить("Серия", Новый ОписаниеТипов("СправочникСсылка." + МетаданныеНСИ.Серии.ИмяСправочника));
		ДанныеДокументаMS.СтрокиФакт.Колонки.Добавить("Серия", Новый ОписаниеТипов("СправочникСсылка." + МетаданныеНСИ.Серии.ИмяСправочника));
	КонецЕсли;
	Если МетаданныеНСИ.АлкоНоменклатура.Использование Тогда
		ДанныеДокументаMS.СтрокиПлан.Колонки.Добавить("АлкоНоменклатура", Новый ОписаниеТипов("СправочникСсылка." + МетаданныеНСИ.АлкоНоменклатура.ИмяСправочника));
		ДанныеДокументаMS.СтрокиФакт.Колонки.Добавить("АлкоНоменклатура", Новый ОписаниеТипов("СправочникСсылка." + МетаданныеНСИ.АлкоНоменклатура.ИмяСправочника));
	КонецЕсли;	
	ДанныеДокументаMS.СтрокиПлан.Колонки.Добавить("ЕдиницаИзмерения", Новый ОписаниеТипов("СправочникСсылка." + МетаданныеНСИ.ЕдиницыИзмерения.ИмяСправочника));
	ДанныеДокументаMS.СтрокиФакт.Колонки.Добавить("ЕдиницаИзмерения", Новый ОписаниеТипов("СправочникСсылка." + МетаданныеНСИ.ЕдиницыИзмерения.ИмяСправочника));
	
	// Подготавливаем данные
	СтруктураЗначенийДляЗаполнения = Новый Структура;
	СтруктураЗначенийДляЗаполнения.Вставить("ДанныеID", Новый Соответствие);
	СтруктураЗначенийДляЗаполнения.Вставить("ДанныеШтрихкодов", Новый Массив);
	Если ДанныеДокументаMS.СтрокиФакт.Колонки.Найти("АлкоКод") <> Неопределено Тогда
		СтруктураЗначенийДляЗаполнения.Вставить("ДанныеАлкокодов", Новый Массив);
	КонецЕслИ;
	
	ГлЯдро_ЗаполнитьСоответствияВычислимыхПолейMS(СтруктураЗначенийДляЗаполнения, ДанныеДокументаMS.СтрокиПлан, МетаданныеНСИ);
	ГлЯдро_ЗаполнитьСоответствияВычислимыхПолейMS(СтруктураЗначенийДляЗаполнения, ДанныеДокументаMS.СтрокиФакт, МетаданныеНСИ);
	
	Для Каждого СтрокаID Из СтруктураЗначенийДляЗаполнения.ДанныеID Цикл
		ЗначениеСправочника = ГлЯдро_ПолучитьЗначениеСправочникаПоID(СтрокаID.Значение, СтрокаID.Ключ);
		СтруктураЗначенийДляЗаполнения.ДанныеID.Вставить(СтрокаID.Ключ, ЗначениеСправочника);
	КонецЦикла;
	СтруктураЗначенийДляЗаполнения.Вставить("ДанныеШтрихкодов", ГлЯдро_ПолучитьДанныеНоменклатурыПоШтрихкоду(СтруктураЗначенийДляЗаполнения.ДанныеШтрихкодов, МетаданныеНСИ));
	Если МетаданныеНСИ.АлкоНоменклатура.Использование И СтруктураЗначенийДляЗаполнения.Свойство("ДанныеАлкокодов") Тогда
		СтруктураЗначенийДляЗаполнения.Вставить("ДанныеАлкокодов", ГлЯдро_ПолучитьАлкономенклатуруПоАлкокоду(СтруктураЗначенийДляЗаполнения.ДанныеАлкокодов, МетаданныеНСИ));
	КонецЕслИ;
	
	// Заполняем таблицы номенклатурой
	Для Каждого СтрокаДокумента Из ДанныеДокументаMS.СтрокиПлан Цикл
		ГлЯдро_ЗаполнитьСтрокуДокументаMSВычислимымиПолями(СтрокаДокумента, СтруктураЗначенийДляЗаполнения, МетаданныеНСИ, ДанныеДокументаMS.СтрокиПлан.Колонки);
	КонецЦикла;
	Для Каждого СтрокаДокумента Из ДанныеДокументаMS.СтрокиФакт Цикл
		ГлЯдро_ЗаполнитьСтрокуДокументаMSВычислимымиПолями(СтрокаДокумента, СтруктураЗначенийДляЗаполнения, МетаданныеНСИ, ДанныеДокументаMS.СтрокиФакт.Колонки);
		Если (ДанныеДокументаMS.СтрокиФакт.Колонки.Найти("ИдСерии") <> Неопределено И ЗначениеЗаполнено(СтрокаДокумента.ИдСерии))
			 ИЛИ (ДанныеДокументаMS.СтрокиФакт.Колонки.Найти("ИмяСерии") <> Неопределено И  ЗначениеЗаполнено(СтрокаДокумента.ИмяСерии)) Тогда
			ЗаполнитьЗначенияСвойств(ДанныеДокументаMS.СтрокиСерии.Добавить(), СтрокаДокумента);
		КонецЕсли;
		Если (ДанныеДокументаMS.СтрокиФакт.Колонки.Найти("ИдСерии") <> Неопределено И ЗначениеЗаполнено(СтрокаДокумента.ИдСерии))
			 ИЛИ (ДанныеДокументаMS.СтрокиФакт.Колонки.Найти("СН") <> Неопределено И  ЗначениеЗаполнено(СтрокаДокумента.СН)) Тогда
			ЗаполнитьЗначенияСвойств(ДанныеДокументаMS.СтрокиСерийныеНомера.Добавить(), СтрокаДокумента);
		КонецЕсли;
	КонецЦикла;
	
	Возврат ДанныеДокументаMS;
	
КонецФункции

Процедура ГлЯдро_ЗаполнитьСоответствияВычислимыхПолейMS(СтруктураЗначенийДляЗаполнения, ИсходнаяТаблица, МетаданныеНСИ)
	
	СоответствиеКолонокНСИ = Новый Структура;
	СоответствиеКолонокНСИ.Вставить("ИдТовара", МетаданныеНСИ.Номенклатура.ИмяСправочника);
	Если МетаданныеНСИ.Характеристики.Использование Тогда
		СоответствиеКолонокНСИ.Вставить("ИдХарактеристики", МетаданныеНСИ.Характеристики.ИмяСправочника);
	КонецЕсли;
	Если МетаданныеНСИ.Серии.Использование Тогда
		СоответствиеКолонокНСИ.Вставить("ИдСерии", МетаданныеНСИ.Серии.ИмяСправочника);
	КонецЕсли;
	СоответствиеКолонокНСИ.Вставить("ИдЕдиницыИзмерения", МетаданныеНСИ.ЕдиницыИзмерения.ИмяСправочника);
	
	Для Каждого СтрокаТЗ Из ИсходнаяТаблица	Цикл
		// ID
		Для Каждого ИмяКолонки Из СоответствиеКолонокНСИ Цикл
			Если ИсходнаяТаблица.Колонки.Найти(ИмяКолонки.Ключ) <> Неопределено И СтрокаТЗ[ИмяКолонки.Ключ] <> "" И СтрокаТЗ[ИмяКолонки.Ключ] <> "" Тогда
				СтруктураЗначенийДляЗаполнения.ДанныеID.Вставить(СтрокаТЗ[ИмяКолонки.Ключ], ИмяКолонки.Значение);
			КонецЕсли;
		КонецЦикла;
		// ШК
		Если ИсходнаяТаблица.Колонки.Найти("ШК") <> Неопределено И СтрокаТЗ["ШК"] <> "" И СтрокаТЗ["ШК"] <> "" Тогда
			Если СтруктураЗначенийДляЗаполнения.ДанныеШтрихкодов.Найти(СтрокаТЗ["ШК"]) = Неопределено Тогда
				СтруктураЗначенийДляЗаполнения.ДанныеШтрихкодов.Добавить(СтрокаТЗ["ШК"]);
			КонецЕсли;
		КонецЕсли;
		// Алко
		Если СтруктураЗначенийДляЗаполнения.Свойство("ДанныеАлкокодов") И ИсходнаяТаблица.Колонки.Найти("АлкоКод") <> Неопределено И СтрокаТЗ["АлкоКод"] <> "" И СтрокаТЗ["АлкоКод"] <> "" Тогда
			Если СтруктураЗначенийДляЗаполнения.ДанныеАлкокодов.Найти(СтрокаТЗ["АлкоКод"]) = Неопределено Тогда
				СтруктураЗначенийДляЗаполнения.ДанныеАлкокодов.Добавить(СтрокаТЗ["АлкоКод"]);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ГлЯдро_ЗаполнитьСтрокуДокументаMSВычислимымиПолями(СтрокаДокумента, СтруктураЗначенийДляЗаполнения, МетаданныеНСИ, КолонкиТаблицы)
	
	СтрокаШК = СтруктураЗначенийДляЗаполнения.ДанныеШтрихкодов.Найти(СтрокаДокумента.ШК, "Штрихкод");
		
	// Номенклатура
	// По ID
	Если КолонкиТаблицы.Найти("ИдТовара") <> Неопределено Тогда
		НайденнаяНоменклатура = СтруктураЗначенийДляЗаполнения.ДанныеID.Получить(СтрокаДокумента.ИдТовара);
		// По ШК
		Если НЕ ЗначениеЗаполнено(НайденнаяНоменклатура) И СтрокаШК <> Неопределено Тогда
			НайденнаяНоменклатура = СтрокаШК.Номенклатура;
		КонецЕсли;
		СтрокаДокумента.Номенклатура = НайденнаяНоменклатура;
	КонецЕсли;
	
	// Характеристика
	Если МетаданныеНСИ.Характеристики.Использование И КолонкиТаблицы.Найти("ИдХарактеристики") <> Неопределено Тогда
		// По ID
		Если ЗначениеЗаполнено(СтрокаДокумента.ИдХарактеристики) Тогда 
			НайденнаяХарактеристика = СтруктураЗначенийДляЗаполнения.ДанныеID.Получить(СтрокаДокумента.ИдХарактеристики);
		КонецЕсли;
		// По наименованию и владельцу
		Если НЕ ЗначениеЗаполнено(НайденнаяХарактеристика) И ЗначениеЗаполнено(СтрокаДокумента.ИмяХарактеристики) И ЗначениеЗаполнено(СтрокаДокумента.ИдТовара) Тогда
			ВладелецХарактеристики = ГлЯдро_ПолучитьЗначениеСправочникаПоID(МетаданныеНСИ.Характеристики.Владельцы, СтрокаДокумента.ИдТовара);			
			НайденнаяХарактеристика = ГлЯдро_ПолучитьЗначениеСправочникаПоНаименованию(МетаданныеНСИ.Характеристики.ИмяСправочника, СтрокаДокумента.ИмяХарактеристики, ВладелецХарактеристики);
		КонецЕсли;
		// По ШК
		Если НЕ ЗначениеЗаполнено(НайденнаяХарактеристика) И СтрокаШК <> Неопределено  И МетаданныеНСИ.Штрихкоды.Реквизиты.Свойство("Характеристика") Тогда
			НайденнаяХарактеристика = СтрокаШК.Характеристика;
		КонецЕсли;
		СтрокаДокумента.Характеристика = НайденнаяХарактеристика;
	КонецЕсли;
	
	// Серия
	Если МетаданныеНСИ.Серии.Использование И КолонкиТаблицы.Найти("ИдСерии") <> Неопределено Тогда
		// По ID
		Если ЗначениеЗаполнено(СтрокаДокумента.ИдСерии) Тогда 
			НайденнаяСерия = СтруктураЗначенийДляЗаполнения.ДанныеID.Получить(СтрокаДокумента.ИдСерии);
		КонецЕсли;
		// По наименованию и владельцу		
		Если НЕ ЗначениеЗаполнено(НайденнаяСерия) И ЗначениеЗаполнено(СтрокаДокумента.ИмяСерии) И ЗначениеЗаполнено(СтрокаДокумента.КлючСерий) Тогда
			ВладелецСерии = ГлЯдро_ПолучитьЗначениеСправочникаПоID(МетаданныеНСИ.Серии.Владельцы, СтрокаДокумента.КлючСерий);			
			НайденнаяСерия = ГлЯдро_ПолучитьЗначениеСправочникаПоНаименованию(МетаданныеНСИ.Серии.ИмяСправочника, СтрокаДокумента.ИмяСерии, ВладелецСерии);
		КонецЕсли;
		// По ШК
		Если НЕ ЗначениеЗаполнено(НайденнаяСерия) И СтрокаШК <> Неопределено И МетаданныеНСИ.Штрихкоды.Реквизиты.Свойство("Серия") Тогда
			НайденнаяСерия = СтрокаШК.Серия;
		КонецЕсли;
		СтрокаДокумента.Серия = НайденнаяСерия;
	КонецЕсли;
	
	// ЕдиницаИзмерения
	// По ID
	Если КолонкиТаблицы.Найти("ИдЕдиницыИзмерения") <> Неопределено Тогда
		Если ЗначениеЗаполнено(СтрокаДокумента.ИдЕдиницыИзмерения) Тогда 
			НайденнаяЕдиницаИзмерения = СтруктураЗначенийДляЗаполнения.ДанныеID.Получить(СтрокаДокумента.ИдЕдиницыИзмерения);
		КонецЕсли;
		// По ШК
		Если НЕ ЗначениеЗаполнено(НайденнаяЕдиницаИзмерения) И СтрокаШК <> Неопределено И МетаданныеНСИ.Штрихкоды.Реквизиты.Свойство("ЕдиницаИзмерения") Тогда
			НайденнаяЕдиницаИзмерения = СтрокаШК.ЕдиницаИзмерения;
		КонецЕсли;
		// По наименованию и владельцу
		Если НЕ ЗначениеЗаполнено(НайденнаяЕдиницаИзмерения) И ЗначениеЗаполнено(СтрокаДокумента.ИдУпаковки) И ЗначениеЗаполнено(СтрокаДокумента.Номенклатура) Тогда
			НайденнаяЕдиницаИзмерения = ГлЯдро_ПолучитьЗначениеСправочникаПоНаименованию(МетаданныеНСИ.ЕдиницыИзмерения.ИмяСправочника, СтрокаДокумента.ИдУпаковки, СтрокаДокумента.Номенклатура);
		КонецЕсли;
		СтрокаДокумента.ЕдиницаИзмерения = НайденнаяЕдиницаИзмерения;
	КонецЕсли;
	
	// Алкономенклатура
	Если МетаданныеНСИ.АлкоНоменклатура.Использование И СтруктураЗначенийДляЗаполнения.Свойство("ДанныеАлкокодов") И КолонкиТаблицы.Найти("АлкоКод") <> Неопределено И ЗначениеЗаполнено(СтрокаДокумента.АлкоКод) Тогда
		СтрокаАлко = СтруктураЗначенийДляЗаполнения.ДанныеАлкокодов.Найти(СтрокаДокумента.Алкокод, "АлкоКод");
		Если СтрокаАлко <> Неопределено Тогда
			СтрокаДокумента.Алкономенклатура = СтрокаАлко.Ссылка;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ГлобальныйКонтекст_Документы_MobileSMARTS_ЗаписьДанных

Процедура ГлЯдро_СформироватьИЗаписатьДокументВБазуSMARTS(Документ1С, СписокПередаваемыхНастроек, ID_БизнесПроцесса = "", ID_БазыSMARTS = "",НазначенныеПользователи = "",КопияДляКаждогоПользователя = Ложь) Экспорт
	Если ТипЗнч(Документ1С) = Тип("Массив") Тогда
		МассивДанныхДокументовКОбъединению = Новый Массив;
		СтрокаИдИсходныхДокументов = "";
		Для Каждого ДокументКОбъединению Из Документ1С Цикл
			ДанныеДокумента = ГлЯдро_ПолучитьДанныеДокумента1СДляВыгрузки(ДокументКОбъединению, СписокПередаваемыхНастроек, ID_БизнесПроцесса);
			МассивДанныхДокументовКОбъединению.Добавить(ДанныеДокумента);
			СтрокаИдИсходныхДокументов = СтрокаИдИсходныхДокументов +?(СтрокаИдИсходныхДокументов="","",";")+ ДанныеДокумента.ШапкаДокумента.Ид;
		КонецЦикла;
		
		// В шапке будет информация из первого выбранного документа+ список Ид объединенных документов
		ШапкаДокумента = МассивДанныхДокументовКОбъединению[0].ШапкаДокумента;
		ШапкаДокумента.Вставить("ИдИсходныхДокументов",СтрокаИдИсходныхДокументов);
		
		// добавим ключи всех выгружаемых ТЧ по полученной структуре из первого документа
		ТабличныеЧастиОбъединенные = Новый Структура;			
		Для Каждого ТабличнаяЧасть Из МассивДанныхДокументовКОбъединению[0].ТабличныеЧасти Цикл
			ТабличныеЧастиОбъединенные.Вставить(ТабличнаяЧасть.Ключ, Новый Массив);	
		КонецЦикла;
		
		Для Каждого ДокументКОбъединению Из МассивДанныхДокументовКОбъединению Цикл
			Для Каждого ТабличнаяЧасть Из ДокументКОбъединению.ТабличныеЧасти Цикл 
				Для Каждого СтрокаТЧ Из  ТабличнаяЧасть.Значение Цикл
					СтрокаСтруктурой = СтрокаТЧ;
					СтрокаСтруктурой.Вставить("ИдДокумента",ДокументКОбъединению.ШапкаДокумента.Ид);
					ТабличныеЧастиОбъединенные[ТабличнаяЧасть.Ключ].Добавить(СтрокаСтруктурой);
				КонецЦикла;
			КонецЦикла;
		КонецЦикла;
		
		ДанныеОбъединенногоДокумента = Новый Структура;			
		ДанныеОбъединенногоДокумента.Вставить("ШапкаДокумента",ШапкаДокумента);
		ДанныеОбъединенногоДокумента.Вставить("ТабличныеЧасти", ТабличныеЧастиОбъединенные);
		ДанныеДокумента = ДанныеОбъединенногоДокумента;
	Иначе
		ДанныеДокумента = ГлЯдро_ПолучитьДанныеДокумента1СДляВыгрузки(Документ1С, СписокПередаваемыхНастроек, ID_БизнесПроцесса);
	КонецЕсли;
	
	Если НазначенныеПользователи <> "" Тогда		
		Если   КопияДляКаждогоПользователя Тогда
			Для Каждого НазначенныйПользователь ИЗ НазначенныеПользователи Цикл
				ДокументSMARTS  = КомЯдро_СформироватьНовыйДокументSMARTS(ДанныеДокумента,НазначенныйПользователь.Ид);		
				КомЯдро_ЗаписатьДокументВБазуSMARTS(ДокументSMARTS, ID_БазыSMARTS);	
			КонецЦикла;
		Иначе
			НазначенныеПользователиСтрокой = "";
			Для Каждого НазначенныйПользователь ИЗ НазначенныеПользователи Цикл
				НазначенныеПользователиСтрокой = НазначенныеПользователиСтрокой+?(НазначенныеПользователиСтрокой = "","","|")+НазначенныйПользователь.Ид;
			КонецЦикла;
			ДокументSMARTS  = КомЯдро_СформироватьНовыйДокументSMARTS(ДанныеДокумента,НазначенныеПользователиСтрокой);		
			КомЯдро_ЗаписатьДокументВБазуSMARTS(ДокументSMARTS, ID_БазыSMARTS);	
		КонецЕсли;
		
	Иначе
		ДокументSMARTS  = КомЯдро_СформироватьНовыйДокументSMARTS(ДанныеДокумента);		
		КомЯдро_ЗаписатьДокументВБазуSMARTS(ДокументSMARTS, ID_БазыSMARTS);
	КонецЕсли;
КонецПроцедуры

Функция ГлЯдро_УдалитьДокументНаСервереSMARTS(ID_Документа, ID_БазыSMARTS) Экспорт
	
	ДокументУдален = КомЯдро_УдалитьДокументНаСервереSMARTS(ID_Документа, ID_БазыSMARTS);
	Если ДокументУдален Тогда
		РезультатУдаления = Новый Структура("Сообщение,Статус", "Документ удален с ТСД!", Истина);
	Иначе
		РезультатУдаления = Новый Структура("Сообщение,Статус", "Не удалось удалить документ с ТСД!", Ложь);
	КонецЕсли;
	
	Возврат РезультатУдаления;
	
КонецФункции

Функция ГлЯдро_УстановитьСтатусДокументаНаСервереSMARTS(ID_Документа, ID_БазыSMARTS, Статус)
	
	СтатусУстановлен = КомЯдро_УстановитьСтатусДокументаНаСервереSMARTS(ID_Документа, ID_БазыSMARTS, Статус);
	Если СтатусУстановлен Тогда
		РезультатУстановкиСтатуса = Новый Структура("Сообщение,Статус", "Успешно установлен статус [" + Статус + "]!", Истина);
	Иначе
		РезультатУстановкиСтатуса = Новый Структура("Сообщение,Статус", "Не удалось установить статус [" + Статус + "]!", Ложь);
	КонецЕсли;
	
	Возврат РезультатУстановкиСтатуса;
	
КонецФункции

#КонецОбласти

#Область ГлобальныйКонтекст_Документы_MobileSMARTS_ВспомогательныеМеханизмы

Функция ГлЯдро_ПолучитьПустуюТаблицуДокументовSMARTS() Экспорт
	
	ТаблицаДокументов = Новый ТаблицаЗначений;
	ТаблицаДокументов.Колонки.Добавить("ДатаСоздания");
	ТаблицаДокументов.Колонки.Добавить("Имя");
	ТаблицаДокументов.Колонки.Добавить("Ид");
	ТаблицаДокументов.Колонки.Добавить("ИмяТипаДокумента");
	ТаблицаДокументов.Колонки.Добавить("СтрокиПланКоличество");
	ТаблицаДокументов.Колонки.Добавить("СтрокиФактКоличество");
	ТаблицаДокументов.Колонки.Добавить("ИмяПользователя");
	ТаблицаДокументов.Колонки.Добавить("ВОбработке");
	ТаблицаДокументов.Колонки.Добавить("Завершен");
	ТаблицаДокументов.Колонки.Добавить("НастройкаБизнесПроцесса");
	ТаблицаДокументов.Колонки.Добавить("ПредставлениеИмениДокумента");
	ТаблицаДокументов.Колонки.Добавить("ИдИсходныхДокументов");
	
	Возврат ТаблицаДокументов;
КонецФункции

#КонецОбласти

#КонецОбласти

#Область ГлобальныйКонтекст_Документы_1С

#Область ГлобальныйКонтекст_Документы_1С_ЧтениеДанных

Функция ГлЯдро_ПолучитьСписокДокументов1С(СтруктураНастроек, ТипДокумента = Неопределено,РежимОбмена = Неопределено) Экспорт
	
	Если ТипЗнч(СтруктураНастроек.БизнесПроцессы) <> Тип("ТаблицаЗначений") Тогда
		Возврат Неопределено;
	КонецЕсли;
	Если ТипЗнч(СтруктураНастроек.НастройкиОтборов) <> Тип("ТаблицаЗначений") Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если РежимОбмена = Неопределено 
		И СтруктураНастроек.Свойство("РежимОбмена")
		И ЗначениеЗаполнено(СтруктураНастроек.РежимОбмена)   Тогда
		РежимОбмена = СтруктураНастроек.РежимОбмена
	КонецЕсли;
	
	НастройкиОтборов = СтруктураНастроек.НастройкиОтборов;
	НастройкиБП = СтруктураНастроек.БизнесПроцессы;
	ЕстьНастройкаВыбранныхРеквизитов 	= (НастройкиБП.Колонки.Найти("НастройкаПредставленийРеквизитовДокумента")<>Неопределено);
	Если ТипДокумента <> Неопределено Тогда
		НастройкиБП = НастройкиБП.НайтиСтроки(Новый Структура("ТипДокументаMS", ТипДокумента));
	КонецЕсли;
	Если НастройкиБП.Количество() = 0 Тогда
		Возврат Неопределено;                                      
	КонецЕсли;                                                           
	
	ОтобранныеДокументы = Новый ТаблицаЗначений;
	ОтобранныеДокументы.Колонки.Добавить("Ссылка");
	ОтобранныеДокументы.Колонки.Добавить("НастройкаБизнесПроцесса");
	ОтобранныеДокументы.Колонки.Добавить("БизнесПроцесс");
	ОтобранныеДокументы.Колонки.Добавить("ТипДокумента1С");
	
	Если РежимОбмена = "Интерактивный" И ТекущиеНастройкиMS.Свойство("ФормаОбменаВыбранныеКолонки")
		И ТекущиеНастройкиMS.ФормаОбменаВыбранныеКолонки <> Ложь
		И ТекущиеНастройкиMS.ФормаОбменаВыбранныеКолонки.Количество() > 0 Тогда
		ВключенныеКолонки = ТекущиеНастройкиMS.ФормаОбменаВыбранныеКолонки.НайтиСтроки(Новый Структура("Использование",Истина));	
		Для Каждого ВключеннаяКолонка Из ВключенныеКолонки Цикл
			Если ОтобранныеДокументы.Колонки.Найти(ВключеннаяКолонка.Название) = Неопределено Тогда
				ОтобранныеДокументы.Колонки.Добавить(ВключеннаяКолонка.Название);
			КонецЕсли;
		КонецЦикла;
	Иначе	
		ОтобранныеДокументы.Колонки.Добавить("Дата");
		ОтобранныеДокументы.Колонки.Добавить("Номер");
		ОтобранныеДокументы.Колонки.Добавить("Количество");		
	КонецЕсли;
	
	Если ОтобранныеДокументы.Колонки.Найти("ИмяКонтрагента") = Неопределено Тогда
		ОтобранныеДокументы.Колонки.Добавить("ИмяКонтрагента");
	КонецЕсли;		
	Если ОтобранныеДокументы.Колонки.Найти("ИмяСклада") = Неопределено Тогда
		ОтобранныеДокументы.Колонки.Добавить("ИмяСклада");
	КонецЕсли;		
	Если ОтобранныеДокументы.Колонки.Найти("ИмяСкладаКуда") = Неопределено Тогда
		ОтобранныеДокументы.Колонки.Добавить("ИмяСкладаКуда");
	КонецЕсли;	
	
	// для обратной совместимости, т.к. в старых версиях обработки еще не было этого поля
	ЕстьРеквизитИспользуется 				= (НастройкиОтборов.Колонки.Найти("Используется") <> Неопределено);
	ЕстьРеквизитВариантОтбора 			= (НастройкиОтборов.Колонки.Найти("ВариантОтбора") <> Неопределено);			
	
	Для Каждого СтрокаБП из НастройкиБП Цикл
		Если ЗначениеЗаполнено(СтрокаБП.ТипИсходногоДокумента1С) Тогда 
			СтрокиВыгрузки = НастройкиОтборов.НайтиСтроки(Новый Структура("ID_БизнесПроцесса", СтрокаБП.ID_БизнесПроцесса));
			Для Каждого Настройка из СтрокиВыгрузки Цикл										
				Если НЕ ЕстьРеквизитИспользуется ИЛИ (ЕстьРеквизитИспользуется И Настройка.Используется) Тогда
					Если НЕ ГлЯдро_ТипДокументаЕстьВ1С(СтрокаБП.ТипИсходногоДокумента1С) Тогда				
						Сообщить("Не удалось установить отбор для документов """ + СтрокаБП.ТипИсходногоДокумента1С + """, пожалуйста, проверьте настройки отбора");
						Прервать;				
					КонецЕсли;
					Если НЕ ЕстьРеквизитВариантОтбора ИЛИ ЕстьРеквизитВариантОтбора 
						И Найти(ВРег(СокрЛП(Настройка.ВариантОтбора)), ВРег(СокрЛП("Конструктор"))) 
						И ЗначениеЗаполнено(Настройка.НастройкаКомпоновщикаСтрокой) Тогда						
						НастройкиКомпоновки = ЗначениеИзСтрокиВнутр(СтрЗаменить(Настройка.НастройкаКомпоновщикаСтрокой, Символы.ВК, ""));
						
						ВыбранныеРеквизиты = Новый СписокЗначений;
						Если ЕстьНастройкаВыбранныхРеквизитов 
							И СтрокаБП.НастройкаПредставленийРеквизитовДокумента.Количество() > 0 Тогда 
							Для Каждого ОтобраннаяКолонка Из ОтобранныеДокументы.Колонки Цикл
								НайденнаяСтрокаНастройки = СтрокаБП.НастройкаПредставленийРеквизитовДокумента.НайтиСтроки(Новый Структура("Использование,ПредставлениеРеквизита", Истина, ОтобраннаяКолонка.Имя));
								Если НайденнаяСтрокаНастройки.Количество() > 0  
									И ( НайденнаяСтрокаНастройки[0].НазваниеРеквизита = "Количество"
									ИЛИ СтруктураМетаданных.Документы1С[строкаБП.ТипИсходногоДокумента1С].Реквизиты.НайтиПоЗначению(НайденнаяСтрокаНастройки[0].НазваниеРеквизита) <> Неопределено)  Тогда
									ВыбранныеРеквизиты.Добавить(НайденнаяСтрокаНастройки[0].НазваниеРеквизита,НайденнаяСтрокаНастройки[0].ПредставлениеРеквизита);
								КонецЕсли;
							КонецЦикла;
						КонецЕсли;
						
						ДокументыОтбор = ГлЯдро_ОтобратьДокументы1СЧерезСКД(НастройкиКомпоновки, СтрокаБП.ТипИсходногоДокумента1С, СтруктураНастроек.ПараметрыУзлов, ВыбранныеРеквизиты); 
						Для Каждого СтрокаДокумента Из ДокументыОтбор Цикл
							Если ОтобранныеДокументы.Найти(СтрокаДокумента.Ссылка, "Ссылка") = Неопределено Тогда
								НоваяСтрока = ОтобранныеДокументы.Добавить();
								// т.к. компоновщик не хочет заменять заголовки, придется сделать так
								Если ЕстьНастройкаВыбранныхРеквизитов 
									И ВыбранныеРеквизиты.Количество() > 0 Тогда
									Для Каждого ВыбранныйРеквизит Из ВыбранныеРеквизиты Цикл
										НоваяСтрока[ВыбранныйРеквизит.Представление] = СтрокаДокумента[ВыбранныйРеквизит.Значение];
									КонецЦикла;
								Иначе
									ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаДокумента);
								КонецЕсли;								
								НоваяСтрока.НастройкаБизнесПроцесса = СтрокаБП.ID_БизнесПроцесса;
								НоваяСтрока.БизнесПроцесс = СтрокаБП.Название;
								НоваяСтрока.ТипДокумента1С = СтрокаБП.ТипИсходногоДокумента1С;
							Иначе
								ОтобранныеДокументы.Найти(СтрокаДокумента.Ссылка, "Ссылка").НастройкаБизнесПроцесса =  "";
								ОтобранныеДокументы.Найти(СтрокаДокумента.Ссылка, "Ссылка").БизнесПроцесс =  "";
							КонецЕсли;
						КонецЦикла;						
					КонецЕсли;					
					Если ЕстьРеквизитВариантОтбора 
						И Найти(ВРег(СокрЛП(Настройка.ВариантОтбора)), ВРег(СокрЛП("Запрос")))
						И ЗначениеЗаполнено(Настройка.ID_ПроизвольногоОтбора) Тогда							
							ДокументыПроизвольныйОтбор = ГлЯдро_ОтобратьДокументы1СЧерезПроизвольныйОтбор(Настройка.ID_ПроизвольногоОтбора);
							Если ДокументыПроизвольныйОтбор = Неопределено Тогда
								Продолжить;
							КонецЕсли;	
							Для Каждого СтрокаДокумента Из ДокументыПроизвольныйОтбор Цикл
								Если ОтобранныеДокументы.Найти(СтрокаДокумента.Ссылка, "Ссылка") = Неопределено Тогда
									НоваяСтрока = ОтобранныеДокументы.Добавить();
									ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаДокумента);
									НоваяСтрока.НастройкаБизнесПроцесса = СтрокаБП.ID_БизнесПроцесса;
									НоваяСтрока.ТипДокумента1С = СтрокаБП.ТипИсходногоДокумента1С;
								Иначе
									ОтобранныеДокументы.Найти(СтрокаДокумента.Ссылка, "Ссылка").НастройкаБизнесПроцесса =  "";
								КонецЕсли;
							КонецЦикла;						
					КонецЕсли;	
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;	
	
	Для каждого СтрокаДок Из ОтобранныеДокументы Цикл
		
		ИменаРеквизитовШапки = СтруктураМетаданных.Документы1С[СтрокаДок.ТипДокумента1С].ИменаРеквизитовШапки;
		
		Для каждого Реквизит Из ИменаРеквизитовШапки Цикл
			Попытка
				СтрокаДок[Реквизит.Ключ] = СтрокаДок.Ссылка[Реквизит.Значение];										
			Исключение			
			КонецПопытки; 		    
		КонецЦикла; 				
		
	КонецЦикла;
	
	Возврат ОтобранныеДокументы;
	
КонецФункции

Функция ГлЯдро_ПолучитьДанныеДокумента1СДляВыгрузки(Документ1С, ДанныеНастроекИзКэша = Неопределено, ID_БизнесПроцесса = "") Экспорт
	
	СписокБизнесПроцессов = Неопределено;
	Если ДанныеНастроекИзКэша = Неопределено ИЛИ НЕ ДанныеНастроекИзКэша.Свойство("СписокБизнесПроцессов") ИЛИ ДанныеНастроекИзКэша.СписокБизнесПроцессов = Неопределено Тогда
		Отбор = Новый Структура("Используется,ТипИсходногоДокумента1С", Истина, ГлЯдро_ПолучитьТипДокументаПоСсылке(Документ1С));
		Если ID_БизнесПроцесса <> "" Тогда
			Отбор.Вставить("ID_БизнесПроцесса", ID_БизнесПроцесса);
		КонецЕсли;
		СписокБизнесПроцессов = ГлЯдро_ПолучитьИзКэшаЗначениеТабличнойНастройкиSMARTS("НастройкиБизнесПроцессов", Отбор, "");
	Иначе
		СписокБизнесПроцессов = ДанныеНастроекИзКэша.СписокБизнесПроцессов.Скопировать();
	КонецЕсли;
	Если СписокБизнесПроцессов = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	Если СписокБизнесПроцессов.Количество() > 1 Тогда
		СписокБизнесПроцессов = Конф_НаложитьДополнительныйОтборНаБизнесПроцессы(СписокБизнесПроцессов, Документ1С);
	КонецЕсли;
	// даже если БП несколько, то выберем первый
	//Если СписокБизнесПроцессов.Количество() <> 1 Тогда
	//	Возврат Неопределено;
	//КонецЕсли;
	
	ПроизвольныеКодыШапки = Неопределено;
	Если ДанныеНастроекИзКэша = Неопределено ИЛИ НЕ ДанныеНастроекИзКэша.Свойство("ПроизвольныеКодыШапки") ИЛИ ДанныеНастроекИзКэша.ПроизвольныеКодыШапки = Неопределено Тогда
		ПроизвольныеКодыШапки = ГлЯдро_ПолучитьИзКэшаНастройкуSMARTS("ПроизвольныеКоды_Выгрузка_ШапкаДокумента");
	Иначе
		Если ТипЗнч(ДанныеНастроекИзКэша.ПроизвольныеКодыШапки) = Тип("ТаблицаЗначений") Тогда
			ПроизвольныеКодыШапки = ДанныеНастроекИзКэша.ПроизвольныеКодыШапки.Скопировать();
		КонецЕсли;
	КонецЕсли;
	
	ПроизвольныеКодыТабличнойЧасти = Неопределено;
	Если ДанныеНастроекИзКэша = Неопределено ИЛИ НЕ ДанныеНастроекИзКэша.Свойство("ПроизвольныеКодыТабличнойЧасти") ИЛИ ДанныеНастроекИзКэша.ПроизвольныеКодыТабличнойЧасти = Неопределено Тогда
		ПроизвольныеКодыТабличнойЧасти = ГлЯдро_ПолучитьИзКэшаНастройкуSMARTS("ПроизвольныеКоды_Выгрузка_ТабличнаяЧастьДокумента");
	Иначе
		Если ТипЗнч(ДанныеНастроекИзКэша.ПроизвольныеКодыТабличнойЧасти) = Тип("ТаблицаЗначений") Тогда
			ПроизвольныеКодыТабличнойЧасти = ДанныеНастроекИзКэша.ПроизвольныеКодыТабличнойЧасти.Скопировать();
		КонецЕсли;
	КонецЕсли;
	
	// даже если БП несколько, то выберем первый
	НастройкаБП = СписокБизнесПроцессов[0];
	
	ДанныеДокумента = Новый Структура;
	
	// Шапка документа
	ДанныеДляВыгрузки_Шапка = Новый Структура;
	
	//// Временное решение. Этого условия тут быть не должно
	Если ТипЗнч(НастройкаБП.НастройкаВыгрузкиПолей) = Тип("ТаблицаЗначений") И НастройкаБП.НастройкаВыгрузкиПолей.Колонки.Найти("ТипИсточника") <> Неопределено Тогда
		// Реквизиты 1С
		ОтобранныеПравила = НастройкаБП.НастройкаВыгрузкиПолей.Скопировать(Новый Структура("ТипИсточника", "Реквизит1С"));
		ГлЯдро_ЗаполнитьДанныеДляВыгрузкиРеквизитами1С(Документ1С, ОтобранныеПравила, ДанныеДляВыгрузки_Шапка);
		// Произвольные значения
		ОтобранныеПравила = НастройкаБП.НастройкаВыгрузкиПолей.Скопировать(Новый Структура("ТипИсточника", "ПроизвольноеЗначение"));
		ГлЯдро_ЗаполнитьДанныеДляВыгрузкиПроизвольнымиЗначениями(ОтобранныеПравила, ДанныеДляВыгрузки_Шапка);
		// Произвольные коды
		ОтобранныеПравила = НастройкаБП.НастройкаВыгрузкиПолей.Скопировать(Новый Структура("ТипИсточника", "ПроизвольныйКод"));
		ГлЯдро_ЗаполнитьДанныеДляВыгрузкиПроизвольнымиКодами(Документ1С, Неопределено, ОтобранныеПравила, ДанныеДляВыгрузки_Шапка, Неопределено, "Шапка", ПроизвольныеКодыШапки);
	КонецЕсли;
	//// Временное решение. Окончание
	
	ДанныеШапки = ГлЯдро_ПолучитьДанныеДокумента1СПоПравиламОбмена(ДанныеДляВыгрузки_Шапка, НастройкаБП.НастройкаВыгрузкиПолей);
	
	ЕстьРеквизитЗаменыПредставления = СписокБизнесПроцессов.Колонки.Найти("ЗаменитьПредставлениеДокументаПриВыгрузке") <> Неопределено;
	
	Если ЕстьРеквизитЗаменыПредставления
		И НастройкаБП.ЗаменитьПредставлениеДокументаПриВыгрузке Тогда
		ПредставлениеДокумента = ГлЯдро_ПолучитьПредставлениеДокументаПоНастройкам(Документ1С, НастройкаБП.НастройкаПредставленийРеквизитовДокумента);		
		Если ПредставлениеДокумента <> "" Тогда		
			ДанныеШапки.Вставить("ПредставлениеИмениДокумента", ПредставлениеДокумента);
		КонецЕсли;
	КонецЕсли;

	ДанныеШапки.Вставить("Name",                    Строка(Документ1С));
	ДанныеШапки.Вставить("ИмяТипаДокумента",        НастройкаБП.ТипДокументаMS);
	ДанныеШапки.Вставить("НастройкаБизнесПроцесса", НастройкаБП.ID_БизнесПроцесса);
	//ДанныеШапки.Вставить("ВыдаватьПоШтрихкоду", 1);
	Если НастройкаБП.КонтрольКоличества Тогда
		ДанныеШапки.Вставить("КонтрольКолва", НастройкаБП.КонтрольКоличества);			
	КонецЕсли;	
	Если НастройкаБП.КоллективнаяРабота Тогда
		ДанныеШапки.Вставить("ServerHosted", НастройкаБП.КоллективнаяРабота);		
	КонецЕсли;	
	
	ДанныеДокумента.Вставить("ШапкаДокумента", ДанныеШапки);
	
	// ************************************ +++ алгоритм выгрузки из нескольких ТЧ 1С в несколько ТЧ Mobile SMARTS ************************************
	
	ТаблицыДанныхТЧ = Новый Структура;
	
	// переносим все данные строки настроек БП в структуру
	СтруктураНастроекБП = Новый Структура;
	
	Для каждого Колонка Из НастройкаБП.Владелец().Колонки Цикл
		
		Если Колонка.ТипЗначения.СодержитТип(Тип("ТаблицаЗначений")) Тогда		
			СтруктураНастроекБП.Вставить(Колонка.Имя, НастройкаБП[Колонка.Имя].Скопировать());			
		Иначе
			СтруктураНастроекБП.Вставить(Колонка.Имя, НастройкаБП[Колонка.Имя]);
		КонецЕсли; 				
			
	КонецЦикла;		
	
	Если НЕ СтруктураНастроекБП.СвязиТабличныхЧастей.Количество() Тогда
		Перейти ~ЦиклПоТабличнымЧастям;
	КонецЕсли; 		
	
	// это нужно, т.к. при копировании таблицы значений, у которой в столбце есть другая ТЗ
	// то ссылка на эту другую ТЗ сохраняется, поэтому делаем копию
	Для каждого Строка Из СтруктураНастроекБП.НастройкаВыгрузкиТЧ Цикл
		Строка.ТабличнаяЧастьДокумента1С = Строка.ТабличнаяЧастьДокумента1С.Скопировать();			
	КонецЦикла; 	
	
	СтруктураНастроекБП.НастройкаВыгрузкиТЧ.Сортировать("ТабличнаяЧастьДокументаMS ВОЗР");
		
	// массив уникальных имен таблиц MS из таблицы связей
	МассивТаблицMS = Новый Массив;
	
	Для каждого Строка Из СтруктураНастроекБП.СвязиТабличныхЧастей Цикл
		Если МассивТаблицMS.Найти(Строка.ТабличнаяЧастьДокументаMS) = Неопределено Тогда
			МассивТаблицMS.Добавить(Строка.ТабличнаяЧастьДокументаMS);
		КонецЕсли;	
	КонецЦикла;	
		
	НастройкаВыгрузкиТЧ = СтруктураНастроекБП.НастройкаВыгрузкиТЧ;
	
	// делаем копию настроек для дальнейших нужд
	КопияНастроекВыгрузкиТЧ = НастройкаВыгрузкиТЧ.Скопировать();
	// это нужно, т.к. при копировании таблицы значений, у которой в столбце есть другая ТЗ,
	// то ссылка на эту другую ТЗ сохраняется, поэтому делаем копию
	Для каждого Строка Из КопияНастроекВыгрузкиТЧ Цикл
		Строка.ТабличнаяЧастьДокумента1С = Строка.ТабличнаяЧастьДокумента1С.Скопировать();			
	КонецЦикла; 	

	// копируем настройки из подчиненных таблиц в главную
	Для каждого Элемент Из МассивТаблицMS Цикл
		НайденныеСтроки = НастройкаВыгрузкиТЧ.НайтиСтроки(Новый Структура("ТабличнаяЧастьДокументаMS", Элемент));
		Если НайденныеСтроки.Количество() > 1 Тогда					
									
			ТаблицаКуда = НайденныеСтроки[0];
			
			КоличествоСтрок = НайденныеСтроки.Количество();
			Для Сч = -(КоличествоСтрок - 1) По -1 Цикл
				
				ТекущаяСтрока = НайденныеСтроки[-Сч];
				
				Для каждого Строка Из ТекущаяСтрока.ТабличнаяЧастьДокумента1С Цикл									
					ЗаполнитьЗначенияСвойств(ТаблицаКуда.ТабличнаяЧастьДокумента1С.Добавить(), Строка);
				КонецЦикла; 
				
				НайденныеСтроки.Удалить(-Сч);
				НастройкаВыгрузкиТЧ.Удалить(ТекущаяСтрока);
				
			КонецЦикла; 
		КонецЕсли; 			
	КонецЦикла; 			
	
	СвязиТабличныхЧастей = СтруктураНастроекБП.СвязиТабличныхЧастей.Скопировать();
		
	СвязиТабличныхЧастей.Сортировать("ТабличнаяЧастьДокументаMS ВОЗР, ГлавнаяТаблица ВОЗР, ПодчиненнаяТаблица ВОЗР");
	
	ТабличныеЧасти = СвязиТабличныхЧастей.Скопировать();
	ТабличныеЧасти.Свернуть("ТабличнаяЧастьДокументаMS, ГлавнаяТаблица, ПодчиненнаяТаблица");		
	
	Для каждого Элемент Из МассивТаблицMS Цикл
		
		СписокКолонок = Новый Массив;
		
		ОтобранныеТабличныеЧасти 		= ТабличныеЧасти.НайтиСтроки(Новый Структура("ТабличнаяЧастьДокументаMS", Элемент));		
		ОтобранныеСвязиТабличныхЧастей 	= СвязиТабличныхЧастей.НайтиСтроки(Новый Структура("ТабличнаяЧастьДокументаMS", Элемент));			
		
		ПсевдонимДокумента = "Документ" + СтруктураНастроекБП.ТипИсходногоДокумента1С;
		
		ТекстЗапроса = "ВЫБРАТЬ &ВыбираемыеПоля ИЗ Документ." + СтруктураНастроекБП.ТипИсходногоДокумента1С + " КАК " + ПсевдонимДокумента + "
		| &СтрокаСоединения
		| ГДЕ 
		|	" + ПсевдонимДокумента + ".Ссылка = &Ссылка";
			
		ТекущаяСтрока = ОтобранныеСвязиТабличныхЧастей[0];
		ПраваяТаблица = ТекущаяСтрока.ГлавнаяТаблица;
		ВыбираемыеПоля = "";		
		ПерваяСтрока = Истина;
		Если Найти(ВРег(СокрЛП(ПраваяТаблица)), ВРег(СокрЛП("Запрос"))) Тогда
			ПсевдонимПравойТаблицы = "ВложенныйЗапрос";
			ТекстЗапросаВыгрузкиНаТСД = КопияНастроекВыгрузкиТЧ.НайтиСтроки(Новый Структура("ТабличнаяЧастьДокументаMS, НастройкаТЧСтрокой", Элемент, ПраваяТаблица))[0].ТекстЗапросаВыгрузкиНаТСД;
		    Запрос = Новый Запрос(СтрЗаменить(ТекстЗапросаВыгрузкиНаТСД, "¶", ""));
			Запрос.УстановитьПараметр("Ссылка", Документ1С);
			РезультатЗапроса = Запрос.Выполнить();
			Для каждого Колонка Из РезультатЗапроса.Колонки Цикл							
				Если СписокКолонок.Найти(Колонка.Имя) = Неопределено Тогда
					ВыбираемыеПоля = ВыбираемыеПоля + Символы.ПС + ?(ПерваяСтрока, "", ", ") + "ЕСТЬNULL(" + ПсевдонимПравойТаблицы + "." + Колонка.Имя + ", """") КАК " + Колонка.Имя;
					СписокКолонок.Добавить(Колонка.Имя);
					ПерваяСтрока = Ложь;
				КонецЕсли;	
			КонецЦикла; 						
			
			СтрокаСоединения = " ЛЕВОЕ СОЕДИНЕНИЕ (" + ТекстЗапросаВыгрузкиНаТСД +") КАК " + ПсевдонимПравойТаблицы + "  
			|	ПО 
			|	" + ПсевдонимДокумента + ".Ссылка = " + ПсевдонимПравойТаблицы + ".Ссылка";					
			
		Иначе	
			
			ПсевдонимПравойТаблицы = СтруктураНастроекБП.ТипИсходногоДокумента1С + ПраваяТаблица;		
			
			СтрокаСоединения = " ЛЕВОЕ СОЕДИНЕНИЕ Документ." + СтруктураНастроекБП.ТипИсходногоДокумента1С + "." + ПраваяТаблица + " КАК " + ПсевдонимПравойТаблицы + "  
			|	ПО 
			|	" + ПсевдонимДокумента + ".Ссылка = " + ПсевдонимПравойТаблицы + ".Ссылка";					
			
			МетаданныеСтроки = Документ1С.Метаданные().ТабличныеЧасти[ПраваяТаблица].Реквизиты;
			Для Каждого Колонка Из МетаданныеСтроки Цикл
				Если СписокКолонок.Найти(Колонка.Имя) = Неопределено Тогда
					ВыбираемыеПоля = ВыбираемыеПоля + Символы.ПС + ?(ПерваяСтрока, "", ", ") + "ЕСТЬNULL(" + ПсевдонимПравойТаблицы + "." + Колонка.Имя + ", """") КАК " + Колонка.Имя;
					СписокКолонок.Добавить(Колонка.Имя);
					ПерваяСтрока = Ложь;
				КонецЕсли;	
			КонецЦИкла;			
			
		КонецЕсли; 
		
		// этот вариант не подошел, т.к. в объединенной таблице должны быть поля со всех соединяемых таблиц, а если будут дубли, то будет ошибка
		//ТабличнаяЧастьДокумента1С = КопияНастроекВыгрузкиТЧ.НайтиСтроки(Новый Структура("НастройкаТЧСтрокой, ТабличнаяЧастьДокументаMS", ТекущаяСтрока.ГлавнаяТаблица, Элемент))[0].ТабличнаяЧастьДокумента1С;			
		//ОтобранныеПравила = ТабличнаяЧастьДокумента1С.Скопировать(Новый Структура("ТипИсточника", "Реквизит1С"));				
		//Для каждого СтрокаТЧ Из ОтобранныеПравила Цикл
		//	ВыбираемыеПоля = ВыбираемыеПоля + Символы.ПС + ?(ПерваяСтрока, "", ", ") + "ЕСТЬNULL(" + ПсевдонимПравойТаблицы + "." + СтрокаТЧ.ИмяИсточника + ", """") КАК " + СтрокаТЧ.ИмяИсточника;
		//	ПерваяСтрока = Ложь;																		
		//КонецЦикла;
			
		Для каждого ТекущаяСтрока Из ОтобранныеТабличныеЧасти Цикл
			
			ЛеваяТаблица = ТекущаяСтрока.ГлавнаяТаблица;
			ПсевдонимЛевойТаблицы = СтруктураНастроекБП.ТипИсходногоДокумента1С + ЛеваяТаблица;
			
			ПраваяТаблица = ТекущаяСтрока.ПодчиненнаяТаблица;
			ПсевдонимПравойТаблицы = СтруктураНастроекБП.ТипИсходногоДокумента1С + ПраваяТаблица;
			
			Если Найти(ВРег(СокрЛП(ПраваяТаблица)), ВРег(СокрЛП("Запрос"))) Тогда
				ТекстЗапросаВыгрузкиНаТСД = КопияНастроекВыгрузкиТЧ.НайтиСтроки(Новый Структура("ТабличнаяЧастьДокументаMS, НастройкаТЧСтрокой", Элемент, ПраваяТаблица))[0].ТекстЗапросаВыгрузкиНаТСД;
				ТекстКодаПолучениеПараметров = КопияНастроекВыгрузкиТЧ.НайтиСтроки(Новый Структура("ТабличнаяЧастьДокументаMS, НастройкаТЧСтрокой", Элемент, ПраваяТаблица))[0].ТекстКодаПолучениеПараметров;
				Запрос = Новый Запрос(СтрЗаменить(ТекстЗапросаВыгрузкиНаТСД, "¶", ""));
				Запрос.УстановитьПараметр("Ссылка", Документ1С);
				РезультатЗапроса = Запрос.Выполнить();
				Для каждого Колонка Из РезультатЗапроса.Колонки Цикл							
					Если СписокКолонок.Найти(Колонка.Имя) = Неопределено Тогда
						ВыбираемыеПоля = ВыбираемыеПоля + Символы.ПС + ?(ПерваяСтрока, "", ", ") + "ЕСТЬNULL(" + ПсевдонимПравойТаблицы + "." + Колонка.Имя + ", """") КАК " + Колонка.Имя;
						СписокКолонок.Добавить(Колонка.Имя);
						ПерваяСтрока = Ложь;
					КонецЕсли;	
				КонецЦикла; 
				
				ПсевдонимПравойТаблицы = "ВложенныйЗапрос";
				
				СтрокаСоединения = СтрокаСоединения + Символы.ПС + " ЛЕВОЕ СОЕДИНЕНИЕ (" + ТекстЗапросаВыгрузкиНаТСД +") КАК " + ПсевдонимПравойТаблицы + "  
				|	ПО 
				|	" + ПсевдонимЛевойТаблицы + ".Ссылка = " + ПсевдонимПравойТаблицы + ".Ссылка";					
				
			Иначе	
				
				ПсевдонимПравойТаблицы = СтруктураНастроекБП.ТипИсходногоДокумента1С + ПраваяТаблица;		
				
				СтрокаСоединения = СтрокаСоединения + Символы.ПС + " ЛЕВОЕ СОЕДИНЕНИЕ Документ." + СтруктураНастроекБП.ТипИсходногоДокумента1С + "." + ПраваяТаблица + " КАК " + ПсевдонимПравойТаблицы + "  
				|	ПО 
				|	" + ПсевдонимЛевойТаблицы + ".Ссылка = " + ПсевдонимПравойТаблицы + ".Ссылка";					
				
				МетаданныеСтроки = Документ1С.Метаданные().ТабличныеЧасти[ПраваяТаблица].Реквизиты;
				Для Каждого Колонка Из МетаданныеСтроки Цикл
					Если СписокКолонок.Найти(Колонка.Имя) = Неопределено Тогда
						ВыбираемыеПоля = ВыбираемыеПоля + Символы.ПС + ?(ПерваяСтрока, "", ", ") + "ЕСТЬNULL(" + ПсевдонимПравойТаблицы + "." + Колонка.Имя + ", """") КАК " + Колонка.Имя;
						СписокКолонок.Добавить(Колонка.Имя);
						ПерваяСтрока = Ложь;
					КонецЕсли;	
				КонецЦИкла;			
				
			КонецЕсли;
						
			НайденныеСтроки = СвязиТабличныхЧастей.НайтиСтроки(Новый Структура("ГлавнаяТаблица, ПодчиненнаяТаблица, ТабличнаяЧастьДокументаMS", ЛеваяТаблица, ПраваяТаблица, Элемент));			
			Для каждого НайденнаяСтрока Из НайденныеСтроки Цикл
				СтрокаСоединения = СтрокаСоединения + Символы.ПС + " И " + ПсевдонимЛевойТаблицы + "." + НайденнаяСтрока.ПолеГлавнойТаблицы + " = " + ПсевдонимПравойТаблицы + "." + НайденнаяСтрока.ПолеПодчиненнойТаблицы;			
			КонецЦикла;
			
			// этот вариант не подошел, т.к. в объединенной таблице должны быть поля со всех соединяемых таблиц, а если будут дубли, то будет ошибка
			//ТабличнаяЧастьДокумента1С = КопияНастроекВыгрузкиТЧ.НайтиСтроки(Новый Структура("НастройкаТЧСтрокой", ПраваяТаблица))[0].ТабличнаяЧастьДокумента1С;			
			//ОтобранныеПравила = ТабличнаяЧастьДокумента1С.Скопировать(Новый Структура("ТипИсточника", "Реквизит1С"));		
			//Для каждого СтрокаТЧ Из ОтобранныеПравила Цикл
			//	ВыбираемыеПоля = ВыбираемыеПоля + Символы.ПС + ?(ПерваяСтрока, "", ", ") + "ЕСТЬNULL(" + ПсевдонимПравойТаблицы + "." + СтрокаТЧ.ИмяИсточника + ", """") КАК " + СтрокаТЧ.ИмяИсточника;			
			//	Если СписокКолонок.Найти(СтрокаТЧ.ИмяИсточника) = Неопределено Тогда
			//		СписокКолонок.Добавить(СтрокаТЧ.ИмяИсточника);
			//	КонецЕсли;
			//КонецЦикла;
			
		КонецЦикла; 		
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&СтрокаСоединения", 	СтрокаСоединения);
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ВыбираемыеПоля", 	ВыбираемыеПоля);
		
		Запрос = Новый Запрос(ТекстЗапроса);
		Запрос.УстановитьПараметр("Ссылка", Документ1С);
		
		ОбъединеннаяТаблицаДанныхТЧ = Запрос.Выполнить().Выгрузить();	
		
		Структура = Новый Структура;
		Структура.Вставить("ТаблицаДанныхТЧ", 	ОбъединеннаяТаблицаДанныхТЧ);
		Структура.Вставить("СписокКолонок", 	СписокКолонок);
		
		ТаблицыДанныхТЧ.Вставить(Элемент, Структура);
		
	КонецЦикла; 
	
	// ************************************ --- алгоритм выгрузки из нескольких ТЧ 1С в несколько ТЧ Mobile SMARTS ************************************		
	
	~ЦиклПоТабличнымЧастям:
	
	ТабличныеЧасти = Новый Структура;
	
	Для каждого НастройкаВыгрузкиТЧ Из СтруктураНастроекБП.НастройкаВыгрузкиТЧ Цикл
					
		// Табличная часть		
		Если ТаблицыДанныхТЧ.Свойство(НастройкаВыгрузкиТЧ.ТабличнаяЧастьДокументаMS) Тогда
			ТаблицаДанныхТЧ = ТаблицыДанныхТЧ[НастройкаВыгрузкиТЧ.ТабличнаяЧастьДокументаMS]["ТаблицаДанныхТЧ"];
			СписокКолонок 	= ТаблицыДанныхТЧ[НастройкаВыгрузкиТЧ.ТабличнаяЧастьДокументаMS]["СписокКолонок"];
		Иначе	
			СписокКолонок = Новый Массив;
			Если Найти(НастройкаВыгрузкиТЧ.НастройкаТЧСтрокой, "Запрос") Тогда
				Запрос = Новый Запрос(СтрЗаменить(НастройкаВыгрузкиТЧ.ТекстЗапросаВыгрузкиНаТСД, "¶", ""));		
				Запрос.УстановитьПараметр("Ссылка", Документ1С);
				//+++ АлкоБП
				//Если НастройкаБП.Название = "Помарочная приемка алкоголя (ТТН входящая) УТ 10.3" Тогда
				//	 АкцизныеМарки = ГлЯдро_ПолучитьТаблицуАлкогольнойПродукции(Запрос, НастройкаБП, Документ1С);
				//	 Запрос.УстановитьПараметр("АкцизныеМарки", АкцизныеМарки);
				//КонецЕсли;
				//--- АлкоБП	
				ПараметрыЗапроса = Новый Структура;    
				Попытка
					Выполнить(СтрЗаменить(ТекстКодаПолучениеПараметров, "ДокументДляВыгрузки", "Документ1С"));
					
					Если ПараметрыЗапроса.Количество() Тогда
						Для Каждого ПараметрЗапроса Из ПараметрыЗапроса Цикл
							Запрос.УстановитьПараметр(ПараметрЗапроса.Ключ, ПараметрЗапроса.Значение);	
						КонецЦикла;
					КонецЕсли;
				Исключение
					Сообщить("Ошибка получения параметров запроса табличной части." + Символы.ПС + ОписаниеОшибки());					
				КонецПопытки;	
				
				
				ТаблицаДанныхТЧ = Запрос.Выполнить().Выгрузить();
				Для Каждого Колонка Из ТаблицаДанныхТЧ.Колонки Цикл
					СписокКолонок.Добавить(Колонка.Имя);
				КонецЦИкла;
			Иначе 
				ТаблицаДанныхТЧ = Документ1С[НастройкаВыгрузкиТЧ.НастройкаТЧСтрокой];
				МетаданныеСтроки = Документ1С.Метаданные().ТабличныеЧасти[НастройкаВыгрузкиТЧ.НастройкаТЧСтрокой].Реквизиты;
				Для Каждого Колонка Из МетаданныеСтроки Цикл
					СписокКолонок.Добавить(Колонка.Имя);
				КонецЦИкла;
			КонецЕсли;
		КонецЕсли;
		
		МетаданныеНСИ 			= Конф_ПолучитьМетаданныеНСИ(); 
		Номенклатура 			= МетаданныеНСИ.Номенклатура.ИмяСправочника;
		Алкономенклатура		= ?(МетаданныеНСИ.Алкономенклатура.Использование, МетаданныеНСИ.Алкономенклатура.ИмяСправочника, Неопределено);
		БазоваяЕдиницаИзмерения = МетаданныеНСИ.Номенклатура.БазоваяЕдиницаИзмерения;
		
		Если СписокКолонок.Найти(Номенклатура) <> Неопределено И Метаданные.Справочники.Найти(Номенклатура) <> Неопределено 
			И Метаданные.Справочники[Номенклатура].Реквизиты.Найти(БазоваяЕдиницаИзмерения) <> Неопределено Тогда 
			ЕстьРеквизитБазоваяЕдиницаИзмерения = Истина;
		Иначе
			ЕстьРеквизитБазоваяЕдиницаИзмерения = Ложь;
		КонецЕсли;		
		
		МассивДанныхСтрок = Новый Массив;
		Если СписокКолонок.Найти(Номенклатура) <> Неопределено Тогда // Денвик. Попробуем так
			Если ТаблицаДанныхТЧ.Количество() Тогда
				ИмяТипаНоменклатура = ТаблицаДанныхТЧ[0][Номенклатура].Метаданные().Имя;
				Если ВРег(СокрЛП(ИмяТипаНоменклатура)) = ВРег(СокрЛП(Алкономенклатура)) Тогда
					ЭтоАлкоНоменклатура = Истина;
				Иначе		
					ЭтоАлкоНоменклатура = Ложь;
				КонецЕсли;			
			Иначе		
				ЭтоАлкоНоменклатура = Ложь;
			КонецЕсли;
		Иначе
			ЭтоАлкоНоменклатура = Истина;
		КонецЕсли;
		
		Для Каждого СтрокаТЧ Из ТаблицаДанныхТЧ Цикл
			
			// Строка документа
			ДанныеДляВыгрузки_Строка = Новый Структура;
			
			//// Временное решение. Этого условия тут быть не должно
			Если ТипЗнч(НастройкаВыгрузкиТЧ.ТабличнаяЧастьДокумента1С) = Тип("ТаблицаЗначений") И НастройкаВыгрузкиТЧ.ТабличнаяЧастьДокумента1С.Колонки.Найти("ТипИсточника") <> Неопределено Тогда
				// Реквизиты 1С
				ОтобранныеПравила = НастройкаВыгрузкиТЧ.ТабличнаяЧастьДокумента1С.Скопировать(Новый Структура("ТипИсточника", "Реквизит1С"));
				ГлЯдро_ЗаполнитьДанныеДляВыгрузкиРеквизитами1С(СтрокаТЧ, ОтобранныеПравила, ДанныеДляВыгрузки_Строка);
				// Вычислимые поля
				ОтобранныеПравила = НастройкаВыгрузкиТЧ.ТабличнаяЧастьДокумента1С.Скопировать(Новый Структура("ТипИсточника", "ВычислимоеПоле"));
				ГлЯдро_ЗаполнитьДанныеДляВыгрузкиВычислимымиПолями(СтрокаТЧ, ОтобранныеПравила, СписокКолонок, ДанныеДляВыгрузки_Строка);
				// Произвольные значения
				ОтобранныеПравила = НастройкаВыгрузкиТЧ.ТабличнаяЧастьДокумента1С.Скопировать(Новый Структура("ТипИсточника", "ПроизвольноеЗначение"));
				ГлЯдро_ЗаполнитьДанныеДляВыгрузкиПроизвольнымиЗначениями(ОтобранныеПравила, ДанныеДляВыгрузки_Строка);
				// Произвольные коды
				ОтобранныеПравила = НастройкаВыгрузкиТЧ.ТабличнаяЧастьДокумента1С.Скопировать(Новый Структура("ТипИсточника", "ПроизвольныйКод"));
				ГлЯдро_ЗаполнитьДанныеДляВыгрузкиПроизвольнымиКодами(Документ1С, СтрокаТЧ, ОтобранныеПравила, ДанныеДляВыгрузки_Шапка, ДанныеДляВыгрузки_Строка, "Строка", ПроизвольныеКодыТабличнойЧасти);
				
				// Поля ИдТовара(ProductId) и ИдУпаковки(PackingId) обязательно должны быть заполнены,
				// поэтому дополнительно проверяем и, если нужно, дозаполняем их значениями по умолчанию
				Если НЕ ДанныеДляВыгрузки_Строка.Свойство("ИдТовара") ИЛИ НЕ ЗначениеЗаполнено(ДанныеДляВыгрузки_Строка.ИдТовара) Тогда
					ДанныеДляВыгрузки_Строка.Вставить("ИдТовара", "*");
				КонецЕсли;
				
				Если НЕ ДанныеДляВыгрузки_Строка.Свойство("ИдУпаковки") ИЛИ НЕ ЗначениеЗаполнено(ДанныеДляВыгрузки_Строка.ИдУпаковки) Тогда
					Если ЭтоАлкоНоменклатура Тогда
						НаименованиеУпаковки = "шт";
					ИначеЕсли (ЕстьРеквизитБазоваяЕдиницаИзмерения И ЗначениеЗаполнено(СтрокаТЧ[Номенклатура][БазоваяЕдиницаИзмерения])) Тогда
						НаименованиеУпаковки = СокрЛП(СтрокаТЧ[Номенклатура][БазоваяЕдиницаИзмерения].Наименование);
					Иначе	
						НаименованиеУпаковки = "шт";
					КонецЕсли;	
					ДанныеДляВыгрузки_Строка.Вставить("ИдУпаковки", НаименованиеУпаковки);
				КонецЕсли;
				
			КонецЕсли;
			//// Временное решение. Окончание
			
			ДанныеСтроки = ГлЯдро_ПолучитьДанныеДокумента1СПоПравиламОбмена(ДанныеДляВыгрузки_Строка, НастройкаВыгрузкиТЧ.ТабличнаяЧастьДокумента1С);
			МассивДанныхСтрок.Добавить(ДанныеСтроки);
		КонецЦикла;
		
		ТабличныеЧасти.Вставить(НастройкаВыгрузкиТЧ.ТабличнаяЧастьДокументаMS, МассивДанныхСтрок);	
					
	КонецЦикла; 
	
	ДанныеДокумента.Вставить("ТабличныеЧасти", ТабличныеЧасти);
	
	// Закончили
	Возврат ДанныеДокумента;
	
КонецФункции

Функция ГлЯдро_ПолучитьДокумент1СДляВыгрузкиОнлайн(ID_Документа, ТипДокументаSMARTS, ID_БизнесПроцесса)
	
	// Подходящие БП для типа документа SMARTS
	Отбор = Новый Структура("Используется,ТипДокументаMS", Истина, ТипДокументаSMARTS);
	НастройкиБП = ГлЯдро_ПолучитьИзКэшаЗначениеТабличнойНастройкиSMARTS("НастройкиБизнесПроцессов", Отбор);
	Если НастройкиБП = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	// Пытаемся найти документ в базе по GUID
	Документ1С = Неопределено;
	Для Каждого СтрокаБП из НастройкиБП Цикл
		ТипДокумента1С = СтрокаБП.ТипИсходногоДокумента1С;
		Попытка
			Документ1С = Документы[СтрокаБП.ТипИсходногоДокумента1С].ПолучитьСсылку(Новый УникальныйИдентификатор(ID_Документа));
			Если Найти(Документ1С, "бъект") = 0 Тогда
				Прервать;
			КонецЕсли;
		Исключение
		КонецПопытки;
	КонецЦикла;
	Если НЕ ЗначениеЗаполнено(Документ1С) Тогда
		Возврат Неопределено;
	КонецЕсли;

	ДанныеДокумента = ГлЯдро_ПолучитьДанныеДокумента1СДляВыгрузки(Документ1С, , ID_БизнесПроцесса);
	Если ДанныеДокумента = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
		
	ДокументSMARTS = КомЯдро_СформироватьНовыйДокументSMARTS(ДанныеДокумента);
	
	Результат = СтруктураПодключенияMS.StorageConnector.ToXml(ДокументSMARTS);
	
	Возврат Результат;
	
КонецФункции

Процедура ГлЯдро_ЗаполнитьДанныеДляВыгрузкиРеквизитами1С(ИсточникДанных, ПравилаОбмена, Результат)
	
	Для Каждого Правило Из ПравилаОбмена Цикл
		ЗначениеРеквизитаДляВыгрузки = "";
		Если ЗначениеЗаполнено(ИсточникДанных[Правило.ИмяИсточника]) Тогда
			Попытка
				Если Правило.СпособСопоставления = "СтрокаGUID" Тогда
					ЗначениеРеквизитаДляВыгрузки = XMLСтрока(ИсточникДанных[Правило.ИмяИсточника].УникальныйИдентификатор());
				ИначеЕсли Правило.СпособСопоставления = "Наименование" Тогда
					ЗначениеРеквизитаДляВыгрузки = ИсточникДанных[Правило.ИмяИсточника].Наименование;
				ИначеЕсли Правило.СпособСопоставления = "Код" Тогда
					ЗначениеРеквизитаДляВыгрузки = ИсточникДанных[Правило.ИмяИсточника].Код;
				ИначеЕсли Правило.СпособСопоставления = "КакЕсть" Тогда
					ЗначениеРеквизитаДляВыгрузки = ИсточникДанных[Правило.ИмяИсточника];
				КонецЕсли;
			Исключение	
			КонецПопытки;
		КонецЕсли;
		Результат.Вставить(Правило.ИмяПриемника, ЗначениеРеквизитаДляВыгрузки);
	КонецЦикла;
	
КонецПроцедуры

Процедура ГлЯдро_ЗаполнитьДанныеДляВыгрузкиВычислимымиПолями(ИсточникДанных, ПравилаОбмена, СписокКолонок, Результат)
	
	МетаданныеНСИ = ГлЯдро_ПолучитьМетаданныеНСИ();
	
	СсылкаНоменклатура     = Неопределено;
	СсылкаХарактеристика   = Неопределено;
	СсылкаСерия            = Неопределено;
	СсылкаЕдиницаИзмерения = Неопределено;
	СсылкаАлкоНоменклатура = Неопределено;
	
	Для Каждого ИмяКолонки Из СписокКолонок Цикл
		Если НЕ ЗначениеЗаполнено(СсылкаНоменклатура) Тогда
			Если ТипЗнч(ИсточникДанных[ИмяКолонки]) = Тип("СправочникСсылка." + МетаданныеНСИ.Номенклатура.ИмяСправочника) Тогда
				СсылкаНоменклатура = ИсточникДанных[ИмяКолонки];
			КонецЕсли;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(СсылкаХарактеристика) И МетаданныеНСИ.Характеристики.Использование Тогда
			Если ТипЗнч(ИсточникДанных[ИмяКолонки]) = Тип("СправочникСсылка." + МетаданныеНСИ.Характеристики.ИмяСправочника) Тогда
				СсылкаХарактеристика = ИсточникДанных[ИмяКолонки];
			КонецЕсли;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(СсылкаСерия) И МетаданныеНСИ.Серии.Использование Тогда
			Если ТипЗнч(ИсточникДанных[ИмяКолонки]) = Тип("СправочникСсылка." + МетаданныеНСИ.Серии.ИмяСправочника) Тогда
				СсылкаСерия = ИсточникДанных[ИмяКолонки];
			КонецЕсли;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(СсылкаАлкоНоменклатура) И МетаданныеНСИ.АлкоНоменклатура.Использование Тогда
			Если ТипЗнч(ИсточникДанных[ИмяКолонки]) = Тип("СправочникСсылка." + МетаданныеНСИ.АлкоНоменклатура.ИмяСправочника) Тогда
				СсылкаАлкоНоменклатура = ИсточникДанных[ИмяКолонки];
			КонецЕсли;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(СсылкаЕдиницаИзмерения) Тогда
			Если ТипЗнч(ИсточникДанных[ИмяКолонки]) = Тип("СправочникСсылка." + МетаданныеНСИ.ЕдиницыИзмерения.ИмяСправочника) Тогда
				СсылкаЕдиницаИзмерения = ИсточникДанных[ИмяКолонки];
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	НайденныеПравила = ПравилаОбмена.НайтиСтроки(Новый Структура("ИмяИсточника", "ИдТовара"));
	Для Каждого ПравилоОбмена Из НайденныеПравила Цикл 
		Если ЗначениеЗаполнено(ПравилоОбмена.ИмяПриемника) Тогда
			Результат.Вставить(ПравилоОбмена.ИмяПриемника, ?(ЗначениеЗаполнено(СсылкаНоменклатура),XMLСтрока(СсылкаНоменклатура.УникальныйИдентификатор()), ""));
		КонецЕсли;
	КонецЦикла;
	НайденныеПравила = ПравилаОбмена.НайтиСтроки(Новый Структура("ИмяИсточника", "ИмяТовара"));
	Для Каждого ПравилоОбмена Из НайденныеПравила Цикл 
		Если ЗначениеЗаполнено(ПравилоОбмена.ИмяПриемника) Тогда
			Результат.Вставить(ПравилоОбмена.ИмяПриемника, ?(ЗначениеЗаполнено(СсылкаНоменклатура), СсылкаНоменклатура.Наименование, ""));
		КонецЕсли;
	КонецЦикла;
	
	НайденныеПравила = ПравилаОбмена.НайтиСтроки(Новый Структура("ИмяИсточника", "ИдЕдиницыИзмерения"));
	Для Каждого ПравилоОбмена Из НайденныеПравила Цикл 
		Если ЗначениеЗаполнено(ПравилоОбмена.ИмяПриемника) Тогда
			Результат.Вставить(ПравилоОбмена.ИмяПриемника, ?(ЗначениеЗаполнено(СсылкаЕдиницаИзмерения),XMLСтрока(СсылкаЕдиницаИзмерения.УникальныйИдентификатор()), ""));
		КонецЕсли;
	КонецЦикла;
	НайденныеПравила = ПравилаОбмена.НайтиСтроки(Новый Структура("ИмяИсточника", "ИмяЕдиницыИзмерения"));
	Для Каждого ПравилоОбмена Из НайденныеПравила Цикл 
		Если ЗначениеЗаполнено(ПравилоОбмена.ИмяПриемника) Тогда
			Результат.Вставить(ПравилоОбмена.ИмяПриемника, ?(ЗначениеЗаполнено(СсылкаЕдиницаИзмерения), СсылкаЕдиницаИзмерения.Наименование, ""));
		КонецЕсли;
	КонецЦикла;
	
	НайденныеПравила = ПравилаОбмена.НайтиСтроки(Новый Структура("ИмяИсточника", "ИдХарактеристики"));
	Для Каждого ПравилоОбмена Из НайденныеПравила Цикл 
		Если ЗначениеЗаполнено(ПравилоОбмена.ИмяПриемника) Тогда
			Результат.Вставить(ПравилоОбмена.ИмяПриемника, ?(ЗначениеЗаполнено(СсылкаХарактеристика),XMLСтрока(СсылкаХарактеристика.УникальныйИдентификатор()), ""));
		КонецЕсли;
	КонецЦикла;
	НайденныеПравила = ПравилаОбмена.НайтиСтроки(Новый Структура("ИмяИсточника", "ИмяХарактеристики"));
	Для Каждого ПравилоОбмена Из НайденныеПравила Цикл 
		Если ЗначениеЗаполнено(ПравилоОбмена.ИмяПриемника) Тогда
			Результат.Вставить(ПравилоОбмена.ИмяПриемника, ?(ЗначениеЗаполнено(СсылкаХарактеристика), СсылкаХарактеристика.Наименование, ""));
		КонецЕсли;
	КонецЦикла;
	
	НайденныеПравила = ПравилаОбмена.НайтиСтроки(Новый Структура("ИмяИсточника", "ИдСерии"));
	Для Каждого ПравилоОбмена Из НайденныеПравила Цикл 
		Если ЗначениеЗаполнено(ПравилоОбмена.ИмяПриемника) Тогда
			Результат.Вставить(ПравилоОбмена.ИмяПриемника, ?(ЗначениеЗаполнено(СсылкаСерия),XMLСтрока(СсылкаСерия.УникальныйИдентификатор()), ""));
		КонецЕсли;
	КонецЦикла;
	НайденныеПравила = ПравилаОбмена.НайтиСтроки(Новый Структура("ИмяИсточника", "ИмяСерии"));
	Для Каждого ПравилоОбмена Из НайденныеПравила Цикл 
		Если ЗначениеЗаполнено(ПравилоОбмена.ИмяПриемника) Тогда
			Результат.Вставить(ПравилоОбмена.ИмяПриемника, ?(ЗначениеЗаполнено(СсылкаСерия), СсылкаСерия.Наименование, ""));
		КонецЕсли;
	КонецЦикла;
	
	ЕстьАлкоНоменклатура = Ложь;
	ДанныеАлкоНоменклатуры = Неопределено;
	Если ЗначениеЗаполнено(СсылкаАлкоНоменклатура) Тогда
		
		РеквизитыЗапроса = МетаданныеНСИ.АлкоНоменклатура.Реквизиты;
		
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ
		|	АлкоСправочник." + РеквизитыЗапроса.АлкоКод + " КАК АлкоКод,
		|	АлкоСправочник." + РеквизитыЗапроса.АлкоНаименование + " КАК АлкоНаименование,
		|	АлкоСправочник." + РеквизитыЗапроса.АлкоОбъем + " КАК АлкоОбъем,
		|	АлкоСправочник." + РеквизитыЗапроса.АлкоКрепость + " КАК АлкоКрепость,
		|	ЕСТЬNULL(АлкоСправочник." + РеквизитыЗапроса.АлкоВидПродукции + ", """") КАК АлкоВидПродукции,
		|	ЕСТЬNULL(АлкоСправочник." + РеквизитыЗапроса.АлкоКодВидаПродукции + ", """") КАК АлкоКодВидаПродукции,
		|	АлкоСправочник." + РеквизитыЗапроса.АлкоТипПродукции + " КАК АлкоТипПродукции,
		|	ЕСТЬNULL(АлкоСправочник." + РеквизитыЗапроса.АлкоПроизводитель + ", """") КАК АлкоПроизводитель,
		|	ЕСТЬNULL(АлкоСправочник." + РеквизитыЗапроса.АлкоИмпортер + ", """") КАК АлкоИмпортер
		|ИЗ
		|	Справочник." + МетаданныеНСИ.АлкоНоменклатура.ИмяСправочника + " КАК АлкоСправочник
		|ГДЕ
		|	АлкоСправочник.Ссылка = &Ссылка";
		Запрос.УстановитьПараметр("Ссылка", СсылкаАлкоНоменклатура);
		
		РезультатЗапроса = Запрос.Выполнить().Выгрузить();
		Если РезультатЗапроса.Количество() > 0 Тогда
			ЕстьАлкоНоменклатура = Истина;
			ДанныеАлкоНоменклатуры = РезультатЗапроса[0];
		КонецЕсли;
		
	КонецЕсли;
	
	НайденныеПравила = ПравилаОбмена.НайтиСтроки(Новый Структура("ИмяИсточника", "АлкоКод"));
	Для Каждого ПравилоОбмена Из НайденныеПравила Цикл 
		Если ЗначениеЗаполнено(ПравилоОбмена.ИмяПриемника) Тогда
			Результат.Вставить(ПравилоОбмена.ИмяПриемника, ?(ЕстьАлкоНоменклатура, ДанныеАлкоНоменклатуры.АлкоКод, ""));
		КонецЕсли;
	КонецЦикла;
	
	НайденныеПравила = ПравилаОбмена.НайтиСтроки(Новый Структура("ИмяИсточника", "АлкоНаименование"));
	Для Каждого ПравилоОбмена Из НайденныеПравила Цикл 
		Если ЗначениеЗаполнено(ПравилоОбмена.ИмяПриемника) Тогда
			Результат.Вставить(ПравилоОбмена.ИмяПриемника, ?(ЕстьАлкоНоменклатура, ДанныеАлкоНоменклатуры.АлкоНаименование, ""));
		КонецЕсли;
	КонецЦикла;
	
	НайденныеПравила = ПравилаОбмена.НайтиСтроки(Новый Структура("ИмяИсточника", "АлкоОбъем"));
	Для Каждого ПравилоОбмена Из НайденныеПравила Цикл 
		Если ЗначениеЗаполнено(ПравилоОбмена.ИмяПриемника) Тогда
			Результат.Вставить(ПравилоОбмена.ИмяПриемника, ?(ЕстьАлкоНоменклатура, ДанныеАлкоНоменклатуры.АлкоОбъем, ""));
		КонецЕсли;
	КонецЦикла;
	
	НайденныеПравила = ПравилаОбмена.НайтиСтроки(Новый Структура("ИмяИсточника", "АлкоКрепость"));
	Для Каждого ПравилоОбмена Из НайденныеПравила Цикл 
		Если ЗначениеЗаполнено(ПравилоОбмена.ИмяПриемника) Тогда
			Результат.Вставить(ПравилоОбмена.ИмяПриемника, ?(ЕстьАлкоНоменклатура, ДанныеАлкоНоменклатуры.АлкоКрепость, ""));
		КонецЕсли;
	КонецЦикла;
	
	НайденныеПравила = ПравилаОбмена.НайтиСтроки(Новый Структура("ИмяИсточника", "АлкоВидПродукции"));
	Для Каждого ПравилоОбмена Из НайденныеПравила Цикл 
		Если ЗначениеЗаполнено(ПравилоОбмена.ИмяПриемника) Тогда
			Результат.Вставить(ПравилоОбмена.ИмяПриемника, ?(ЕстьАлкоНоменклатура, ДанныеАлкоНоменклатуры.АлкоВидПродукции, ""));
		КонецЕсли;
	КонецЦикла;
	
	НайденныеПравила = ПравилаОбмена.НайтиСтроки(Новый Структура("ИмяИсточника", "АлкоКодВидаПродукции"));
	Для Каждого ПравилоОбмена Из НайденныеПравила Цикл 
		Если ЗначениеЗаполнено(ПравилоОбмена.ИмяПриемника) Тогда
			Результат.Вставить(ПравилоОбмена.ИмяПриемника, ?(ЕстьАлкоНоменклатура, ДанныеАлкоНоменклатуры.АлкоКодВидаПродукции, ""));
		КонецЕсли;
	КонецЦикла;
	
	НайденныеПравила = ПравилаОбмена.НайтиСтроки(Новый Структура("ИмяИсточника", "АлкоТипПродукции"));
	Для Каждого ПравилоОбмена Из НайденныеПравила Цикл 
		Если ЗначениеЗаполнено(ПравилоОбмена.ИмяПриемника) Тогда
			Результат.Вставить(ПравилоОбмена.ИмяПриемника, ?(ЕстьАлкоНоменклатура, ДанныеАлкоНоменклатуры.АлкоТипПродукции, ""));
		КонецЕсли;
	КонецЦикла;
	
	НайденныеПравила = ПравилаОбмена.НайтиСтроки(Новый Структура("ИмяИсточника", "АлкоПроизводитель"));
	Для Каждого ПравилоОбмена Из НайденныеПравила Цикл 
		Если ЗначениеЗаполнено(ПравилоОбмена.ИмяПриемника) Тогда
			Результат.Вставить(ПравилоОбмена.ИмяПриемника, ?(ЕстьАлкоНоменклатура, ДанныеАлкоНоменклатуры.АлкоПроизводитель, ""));
		КонецЕсли;
	КонецЦикла;
	
	НайденныеПравила = ПравилаОбмена.НайтиСтроки(Новый Структура("ИмяИсточника", "АлкоИмпортер"));
	Для Каждого ПравилоОбмена Из НайденныеПравила Цикл 
		Если ЗначениеЗаполнено(ПравилоОбмена.ИмяПриемника) Тогда
			Результат.Вставить(ПравилоОбмена.ИмяПриемника, ?(ЕстьАлкоНоменклатура, ДанныеАлкоНоменклатуры.АлкоИмпортер, ""));
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ГлЯдро_ЗаполнитьДанныеДляВыгрузкиПроизвольнымиЗначениями(ПравилаОбмена, Результат)
	
	Для Каждого Правило Из ПравилаОбмена Цикл
		ЗначениеРеквизитаДляВыгрузки = "";
		Если ЗначениеЗаполнено(Правило.ИмяПриемника) И ЗначениеЗаполнено(Правило.ЗначениеИсточника) Тогда
			Попытка
				ЗначениеРеквизитаДляВыгрузки = Правило.ЗначениеИсточника;
			Исключение	
			КонецПопытки;
		Результат.Вставить(Правило.ИмяПриемника, ЗначениеРеквизитаДляВыгрузки);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ГлЯдро_ЗаполнитьДанныеДляВыгрузкиПроизвольнымиКодами(Документ1С, СтрокаДокумента1С, ПравилаОбмена, ДанныеДляВыгрузки_Шапка, ДанныеДляВыгрузки_Строка, ТипВыгрузки, ПроизвольныеКоды)
	
	Для Каждого Правило Из ПравилаОбмена Цикл
		ЗначениеРеквизитаДляВыгрузки = "";
		Если ЗначениеЗаполнено(Правило.ИмяИсточника) И ЗначениеЗаполнено(Правило.ИмяПриемника) И ТипЗнч(ПроизвольныеКоды) = Тип("ТаблицаЗначений") Тогда
			НайденныйПК = ПроизвольныеКоды.Найти(Правило.ИмяИсточника);
			Если НайденныйПК <> Неопределено Тогда
				СтруктураПеременных = Новый Структура;
				СтруктураПеременных.Вставить("СсылкаДокумент1С", Документ1С);
				СтруктураПеременных.Вставить("ДанныеДляВыгрузки_Шапка", ДанныеДляВыгрузки_Шапка);
				Если ТипВыгрузки = "Строка" Тогда
					СтруктураПеременных.Вставить("СтрокаТЧДокумента1С", СтрокаДокумента1С);
					СтруктураПеременных.Вставить("ДанныеДляВыгрузки_Строка", ДанныеДляВыгрузки_Строка);
				КонецЕсли;
				РезультатВыполненияКода = ГлЯдро_ВыполнитьПроизвольныйКод(НайденныйПК.ТекстПроизвольногоКода, СтруктураПеременных);
				Если РезультатВыполненияКода.Статус Тогда
					ЗначениеРеквизитаДляВыгрузки = РезультатВыполненияКода.Данные;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		Если ТипВыгрузки = "Шапка" Тогда
			ДанныеДляВыгрузки_Шапка.Вставить(Правило.ИмяПриемника, ЗначениеРеквизитаДляВыгрузки);
		ИначеЕсли ТипВыгрузки = "Строка" Тогда
			ДанныеДляВыгрузки_Строка.Вставить(Правило.ИмяПриемника, ЗначениеРеквизитаДляВыгрузки);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Функция ГлЯдро_ПолучитьДанныеДокумента1СПоПравиламОбмена(Источник, ПравилаОбмена)
	
	Результат = Новый Структура;
	
	ОтобранныеПравила = ПравилаОбмена.НайтиСтроки(Новый Структура("Выгружать", Истина));
	Для Каждого Правило Из ОтобранныеПравила Цикл
		Результат.Вставить(Правило.ИмяПриемника, Источник[Правило.ИмяПриемника]);
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция ГлЯдро_ПолучитьСсылкуПоШтрихкодуТабличногоДокумента(Штрихкод, Менеджеры = Неопределено)
		
	Если СокрЛП(Штрихкод) = "" Тогда
		Возврат Новый Массив;
	КонецЕсли;	
	
	// в УНФ в качестве штрихкода сразу приходит уникальный идентификатор
	Попытка			
		
		Идентификатор = Новый УникальныйИдентификатор(Штрихкод);	
		Идентификатор = Штрихкод;
		
	// в УТ 11 и её потомках приходит десятичное число	
	Исключение
		
		ШтрихкодВШестнаднадцатиричномВиде = ГлЯдро_ПреобразоватьДесятичноеЧислоВШестнадцатиричнуюСистемуСчисления(Число(Штрихкод));
		
		Пока СтрДлина(ШтрихкодВШестнаднадцатиричномВиде) < 32 Цикл
			ШтрихкодВШестнаднадцатиричномВиде = "0" + ШтрихкодВШестнаднадцатиричномВиде;
		КонецЦикла;
		
		Идентификатор =
		Сред(ШтрихкодВШестнаднадцатиричномВиде, 1,  8)
		+ "-" + Сред(ШтрихкодВШестнаднадцатиричномВиде, 9,  4)
		+ "-" + Сред(ШтрихкодВШестнаднадцатиричномВиде, 13, 4)
		+ "-" + Сред(ШтрихкодВШестнаднадцатиричномВиде, 17, 4)
		+ "-" + Сред(ШтрихкодВШестнаднадцатиричномВиде, 21, 12);
		
	КонецПопытки; 
		
	Если СтрДлина(Идентификатор) <> 36 Тогда
		Возврат Новый Массив;
	КонецЕсли;
	
	Если Менеджеры = Неопределено Тогда
		
		МенеджерыОбъектов = Новый Массив;
		
		Для Каждого ЭлементМетаданных Из Метаданные.Документы Цикл
			МенеджерыОбъектов.Добавить(Документы[ЭлементМетаданных.Имя]);
		КонецЦикла;
		
	Иначе
		
		МенеджерыОбъектов = Новый Массив;
		
		Для Каждого ПустаяСсылка Из Менеджеры Цикл
			
			ТипСсылки = ТипЗнч(ПустаяСсылка);
			
			Если Документы.ТипВсеСсылки().СодержитТип(ТипСсылки) Тогда
				
				МенеджерыОбъектов.Добавить(Документы[ПустаяСсылка.Метаданные().Имя]);
				
			ИначеЕсли Справочники.ТипВсеСсылки().СодержитТип(ТипСсылки) Тогда
				
				МенеджерыОбъектов.Добавить(Справочники[ПустаяСсылка.Метаданные().Имя]);
				
			ИначеЕсли Задачи.ТипВсеСсылки(ТипСсылки) Тогда	
				
				МенеджерыОбъектов.Добавить(Задачи[ПустаяСсылка.Метаданные().Имя]);
				
			ИначеЕсли БизнесПроцессы.ТипВсеСсылки(ТипСсылки) Тогда	
				
				МенеджерыОбъектов.Добавить(БизнесПроцессы[ПустаяСсылка.Метаданные().Имя]);
				
			ИначеЕсли ПланыВидовХарактеристик.ТипВсеСсылки(ТипСсылки) Тогда
				
				МенеджерыОбъектов.Добавить(ПланыВидовХарактеристик[ПустаяСсылка.Метаданные().Имя]);
				
			Иначе
				
				ТекстИсключения = НСтр("ru = 'Ошибка распознавания штрихкода: тип ""%Тип%"" не поддерживается.'");
				ТекстИсключения = СтрЗаменить(ТекстИсключения,"%Тип%",ТипСсылки);
				
				ВызватьИсключение ТекстИсключения;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Запрос = Новый Запрос;
	
	МассивСсылок = Новый Массив;
	ПервыйЗапрос = Истина;
	
	Для Каждого Менеджер Из МенеджерыОбъектов Цикл
		
		Попытка
			Ссылка = Менеджер.ПолучитьСсылку(Новый УникальныйИдентификатор(Идентификатор));
		Исключение
			Продолжить;
		КонецПопытки;
		
		МетаданныеСсылки = Ссылка.Метаданные();
		
		Если Не ПравоДоступа("Чтение", МетаданныеСсылки) Тогда
			Продолжить;
		КонецЕсли;
		
		МассивСсылок.Добавить(Ссылка);
		
		Если НЕ ПервыйЗапрос Тогда
			Запрос.Текст = Запрос.Текст + 
			"ОБЪЕДИНИТЬ ВСЕ
			|";
		КонецЕсли;
		
		Запрос.Текст = Запрос.Текст +
		"ВЫБРАТЬ" + ?(ПервыйЗапрос," " + "РАЗРЕШЕННЫЕ" + " "," ") + "Таблица.Ссылка КАК Ссылка
		|ИЗ " + МетаданныеСсылки.ПолноеИмя() + " КАК Таблица
		|ГДЕ Ссылка В (&МассивСсылок)
		|";
		
		ПервыйЗапрос = Ложь;
		
	КонецЦикла;
	
	Если Не ПервыйЗапрос Тогда
		Запрос.Параметры.Вставить("МассивСсылок", МассивСсылок);
		Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	Иначе
		Возврат Новый Массив;
	КонецЕсли;
	
КонецФункции

Функция ГлЯдро_ПреобразоватьДесятичноеЧислоВШестнадцатиричнуюСистемуСчисления(Знач ДесятичноеЧисло)
	
	Результат = "";
	
	Пока ДесятичноеЧисло > 0 цикл
		ОстатокОтДеления = ДесятичноеЧисло % 16;
		ДесятичноеЧисло  = (ДесятичноеЧисло - ОстатокОтДеления) / 16;
		Результат        = Сред("0123456789abcdef", ОстатокОтДеления + 1, 1) + Результат;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция ГлЯдро_ПолучитьДокументПоШтрихкоду(UserId, КодДокумента, ТипДокумента, mXmlDoc)
	
	ИмяСобытия = "ПолучитьДокументПоШтрихкоду";
	
	Попытка
		
		ГлЯдро_ЗаписатьСобытиеВЖурналРегистрации(ИмяСобытия, "Информация", "Начало метода, штрихкод документа = " + КодДокумента + ", Ид пользователя = " + UserId + ", тип документа = " + ТипДокумента);													
		
		МассивСсылок = ГлЯдро_ПолучитьСсылкуПоШтрихкодуТабличногоДокумента(КодДокумента);
		
		Если НЕ МассивСсылок.Количество() Тогда 			
			ГлЯдро_ЗаписатьСобытиеВЖурналРегистрации(ИмяСобытия, "Ошибка", "Документ по штрихкоду не найден, штрихкод документа = " + КодДокумента + ", Ид пользователя = " + UserId + ", тип документа = " + ТипДокумента);
			СтруктураПодключенияMS.StorageConnector.ОтправитьСообщение("По штрихкоду: """ + КодДокумента + """ документ не найден!", "", UserId); 				
			Возврат Неопределено;
		Иначе
			
			Документ1С = МассивСсылок[0];			
			
			DocDescrsXml 	= ПолучитьСписокДокументов(UserId, ТипДокумента, mXmlDoc);			
			DocDescrs 		= СтруктураПодключенияMS.StorageConnector.FromXml(DocDescrsXml);				
			ИдДокумента1С 	= XMLСтрока(Документ1С);						
			
			Для Сч = 0 По DocDescrs.Количество - 1 Цикл
				
				DocDescr 			= DocDescrs.Item(Сч);
				ID_БизнесПроцесса 	= DocDescr.GetField("НастройкаБизнесПроцесса");
				
				Если DocDescr.Ид = ИдДокумента1С И ЗначениеЗаполнено(ID_БизнесПроцесса) Тогда								
					
					ДанныеДокумента = ГлЯдро_ПолучитьДанныеДокумента1СДляВыгрузки(Документ1С, , ID_БизнесПроцесса);
					Если ДанныеДокумента = Неопределено Тогда
						Возврат Неопределено;
					КонецЕсли;
					
					ДокументSMARTS = КомЯдро_СформироватьНовыйДокументSMARTS(ДанныеДокумента);
					
					Результат = СтруктураПодключенияMS.StorageConnector.ToXml(ДокументSMARTS);
					
					ГлЯдро_ЗаписатьСобытиеВЖурналРегистрации(ИмяСобытия, "Информация", "Окончание метода, штрихкод документа = " + КодДокумента + ", Ид пользователя = " + UserId + ", тип документа = " + ТипДокумента);
					
					Возврат Результат;			
					
				КонецЕсли;	
				
			КонецЦикла; 
			
			ГлЯдро_ЗаписатьСобытиеВЖурналРегистрации(ИмяСобытия, "Ошибка", "Документ """ + Строка(Документ1С) + """ не соответствует параметрам отбора, штрихкод документа = " + КодДокумента + ", Ид пользователя = " + UserId + ", тип документа = " + ТипДокумента);
			СтруктураПодключенияMS.StorageConnector.ОтправитьСообщение("Документ """ + Строка(Документ1С) + """ не соответствует параметрам отбора для """ + ТипДокумента + """!", "", UserId); 				
			
			Возврат Неопределено;										
			
		КонецЕсли;					
		
	Исключение
		
		Возврат Неопределено;
		
	КонецПопытки;
	
КонецФункции

#КонецОбласти

#Область ГлобальныйКонтекст_Документы_1С_ЗаписьДанных

Функция ГлЯдро_СформироватьИЗаписатьДокументВБазу1С_ПоID(ID_Документа, СтруктураДокументаMS, ID_БизнесПроцесса = "", ДанныеНастроекИзКэша = Неопределено, ID_БазыSMARTS = "", НастройкаБП = Неопределено, ДокументДляЗаполнения = Неопределено, Онлайн = Ложь,ФильтрТЧПоИдДокумента = Неопределено) Экспорт
	
	НастройкиДляОбмена = Неопределено;	
	Если ДанныеНастроекИзКэша = Неопределено ИЛИ НЕ ДанныеНастроекИзКэша.Свойство("НастройкиДляОбмена") ИЛИ ДанныеНастроекИзКэша.НастройкиДляОбмена = Неопределено Тогда
		 НастройкиДляОбмена = ГлЯдро_ПолучитьИзКэшаНастройкуSMARTS("НастройкиБизнесПроцессов")
	Иначе
		НастройкиДляОбмена = ДанныеНастроекИзКэша.НастройкиДляОбмена.Скопировать();
	КонецЕсли;
	
	ДанныеДокументаMS = ГлЯдро_ПолучитьДанныеДокументаMS(ID_Документа, СтруктураДокументаMS, ID_БазыSMARTS,ФильтрТЧПоИдДокумента);
	Если ID_БизнесПроцесса = "" Тогда
		Если ДанныеДокументаMS.ШапкаДокумента.Свойство("НастройкаБизнесПроцесса") Тогда
			ID_БизнесПроцесса = ДанныеДокументаMS.ШапкаДокумента.НастройкаБизнесПроцесса;
		КонецЕсли;
	КонецЕсли;
	
	Если ДокументДляЗаполнения <> Неопределено И НастройкаБП <> Неопределено Тогда
		
		Если НЕ ЗначениеЗаполнено(СокрЛП(НастройкаБП.ТипРезультирующегоДокумента1С)) ИЛИ (НастройкаБП.ЗагружатьВТотЖе И НЕ ЗначениеЗаполнено(СокрЛП(НастройкаБП.ТипИсходногоДокумента1С))) Тогда
			РезультатЗаписи = Новый Структура;
			РезультатЗаписи.Вставить("Сообщение", 	"Данный бизнес-процесс не подразумевает загрузку документа в 1С, т.к. у него не заполнен результирующий документ 1С");			
			РезультатЗаписи.Вставить("Статус", 		Ложь); 
			РезультатЗаписи.Вставить("Данные",		Неопределено); 
		Иначе
			РезультатЗаписи = ГлЯдро_СформироватьИЗаписатьДокументВБазу1С(ДанныеДокументаMS, НастройкаБП, ДанныеНастроекИзКэша, ДокументДляЗаполнения, Онлайн,ФильтрТЧПоИдДокумента);	
		КонецЕсли;		
				
	Иначе
				
		РезультатПодбораБП = ГлЯдро_ПолучитьНастройкуБизнесПроцесса(ID_БизнесПроцесса, ДанныеДокументаMS.ШапкаДокумента.ИмяТипаДокумента, НастройкиДляОбмена);										
		Если РезультатПодбораБП = Неопределено ИЛИ (ТипЗнч(РезультатПодбораБП) = Тип("Структура") И РезультатПодбораБП.Статус = Ложь) Тогда
			Сообщение = "Не удалось подобрать настройку бизнес-процесса для данного документа!";
			РезультатЗаписи = Новый Структура("Сообщение,Статус", Сообщение, Ложь);
			Если ТипЗнч(РезультатПодбораБП) = Тип("Структура") Тогда
				РезультатЗаписи.Вставить("Данные", РезультатПодбораБП.Данные);
			КонецЕсли;
		Иначе
			НастройкаБП = РезультатПодбораБП.Данные;
			Если НЕ ЗначениеЗаполнено(СокрЛП(НастройкаБП.ТипРезультирующегоДокумента1С)) ИЛИ (НастройкаБП.ЗагружатьВТотЖе И НЕ ЗначениеЗаполнено(СокрЛП(НастройкаБП.ТипИсходногоДокумента1С))) Тогда
				РезультатЗаписи = Новый Структура;
				РезультатЗаписи.Вставить("Сообщение", 	"Данный бизнес-процесс не подразумевает загрузку документа в 1С, т.к. у него не заполнен результирующий документ 1С");			
				РезультатЗаписи.Вставить("Статус", 		Ложь); 
				РезультатЗаписи.Вставить("Данные",		Неопределено); 
			Иначе				
				РезультатЗаписи = ГлЯдро_СформироватьИЗаписатьДокументВБазу1С(ДанныеДокументаMS, РезультатПодбораБП.Данные, ДанныеНастроекИзКэша, ДокументДляЗаполнения, Онлайн, ФильтрТЧПоИдДокумента);
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	РезультатЗаписи.Вставить("Дополнение", ДанныеДокументаMS.ШапкаДокумента.ИдПользователя);
	
	Возврат РезультатЗаписи;
	
КонецФункции

Функция ГлЯдро_СформироватьИЗаписатьДокументВБазу1С(ДанныеДокументаMS, НастройкаБП, ДанныеНастроекИзКэша = Неопределено, ДокументДляЗаполнения = Неопределено, Онлайн = Ложь, ФильтрТЧПоИдДокумента = Неопределено) Экспорт
	
	ПроизвольныеКодыШапки = Неопределено;
	Если ДанныеНастроекИзКэша = Неопределено ИЛИ НЕ ДанныеНастроекИзКэша.Свойство("ПроизвольныеКодыШапки") ИЛИ ДанныеНастроекИзКэша.ПроизвольныеКодыШапки = Неопределено Тогда
		ПроизвольныеКодыШапки = ГлЯдро_ПолучитьИзКэшаНастройкуSMARTS("ПроизвольныеКоды_Загрузка_ШапкаДокумента");
	Иначе
		Если ТипЗнч(ДанныеНастроекИзКэша.ПроизвольныеКодыШапки) = Тип("ТаблицаЗначений") Тогда
			ПроизвольныеКодыШапки = ДанныеНастроекИзКэша.ПроизвольныеКодыШапки.Скопировать();
		КонецЕсли;
	КонецЕсли;
	
	ПроизвольныеКодыТабличнойЧасти = Неопределено;
	Если ДанныеНастроекИзКэша = Неопределено ИЛИ НЕ ДанныеНастроекИзКэша.Свойство("ПроизвольныеКодыТабличнойЧасти") ИЛИ ДанныеНастроекИзКэша.ПроизвольныеКодыТабличнойЧасти = Неопределено Тогда
		ПроизвольныеКодыТабличнойЧасти = ГлЯдро_ПолучитьИзКэшаНастройкуSMARTS("ПроизвольныеКоды_Загрузка_ТабличнаяЧастьДокумента");
	Иначе
		Если ТипЗнч(ДанныеНастроекИзКэша.ПроизвольныеКодыТабличнойЧасти) = Тип("ТаблицаЗначений") Тогда
			ПроизвольныеКодыТабличнойЧасти = ДанныеНастроекИзКэша.ПроизвольныеКодыТабличнойЧасти.Скопировать();
		КонецЕсли;
	КонецЕсли;
	
	ЗначенияГлобальныхПараметров = Неопределено;
	Если ДанныеНастроекИзКэша = Неопределено ИЛИ НЕ ДанныеНастроекИзКэша.Свойство("ЗначенияПараметров") ИЛИ ДанныеНастроекИзКэша.ЗначенияПараметров = Неопределено Тогда
		ЗначенияПараметров = ГлЯдро_ПолучитьЗначенияГлобальныхПараметров();
	Иначе
		Если ТипЗнч(ДанныеНастроекИзКэша.ЗначенияПараметров) = Тип("ТаблицаЗначений") Тогда
			ЗначенияПараметров = ДанныеНастроекИзКэша.ЗначенияПараметров.Скопировать();
		КонецЕсли;
	КонецЕсли;
	
	// Поиск существующего документа
	ДокументДляЗаписи = Неопределено;
	ДокументОснование = Неопределено;
	Если НастройкаБП.ВыполнитьТолькоПроизвольныйКод Тогда
		Если ЗначениеЗаполнено(НастройкаБП.ТипИсходногоДокумента1С) Тогда
			ДокументОснование = ГлЯдро_ПолучитьСсылкуНаДокументПоИд(НастройкаБП.ТипИсходногоДокумента1С,?(ЗначениеЗаполнено(ФильтрТЧПоИдДокумента),ФильтрТЧПоИдДокумента,ДанныеДокументаMS.ШапкаДокумента.Ид));
		КонецЕсли;
	ИначеЕсли НастройкаБП.ЗагружатьВТотЖе Тогда
		Если ТипЗнч(ДокументДляЗаполнения) = Тип("Структура") Тогда
			ДокументДляЗаписи = ДокументДляЗаполнения.Данные;	
		Иначе
			Попытка				
				ДокументДляЗаписи = ГлЯдро_ПолучитьСсылкуНаДокументПоИд(НастройкаБП.ТипИсходногоДокумента1С,?(ЗначениеЗаполнено(ФильтрТЧПоИдДокумента),ФильтрТЧПоИдДокумента,ДанныеДокументаMS.ШапкаДокумента.Ид));
				ДокументДляЗаписи = ДокументДляЗаписи.ПолучитьОбъект();
				ДокументОснование = ДокументДляЗаписи.ДокументОснование;
			Исключение
			КонецПопытки;
			Если ДокументДляЗаписи = Неопределено Тогда
				// документ не нашелся, возможно его удалили, создаем новый
				ДокументДляЗаписи = Документы[НастройкаБП.ТипРезультирующегоДокумента1С].СоздатьДокумент();
			КонецЕсли;
		КонецЕсли;
	Иначе
		Если ТипЗнч(ДокументДляЗаполнения) = Тип("Структура") Тогда
			ДокументДляЗаписи = ДокументДляЗаполнения.Данные;	
		Иначе
			Если НастройкаБП.СоздаватьНовыйДокументПриЗагрузке ИЛИ НЕ ЗначениеЗаполнено(ДокументДляЗаполнения) Тогда
				ДокументДляЗаписи = Документы[НастройкаБП.ТипРезультирующегоДокумента1С].СоздатьДокумент();
				Если ЗначениеЗаполнено(НастройкаБП.ТипИсходногоДокумента1С) И НастройкаБП.ТипИсходногоДокумента1С <> НастройкаБП.ТипРезультирующегоДокумента1С Тогда
					Попытка						
						ДокументОснование = ГлЯдро_ПолучитьСсылкуНаДокументПоИд(НастройкаБП.ТипИсходногоДокумента1С,?(ЗначениеЗаполнено(ФильтрТЧПоИдДокумента),ФильтрТЧПоИдДокумента,ДанныеДокументаMS.ШапкаДокумента.Ид));
						ДокументДляЗаписи.ДокументОснование = ДокументОснование;
					Исключение
					КонецПопытки;
				КонецЕсли;
			Иначе			
				ДокументДляЗаписи = ДокументДляЗаполнения.ПолучитьОбъект();	
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	// + ZHKN 03.10.2017
	ДанныеДляЗагрузкиПоКлючам = Новый ТаблицаЗначений;
	ДанныеДляЗагрузкиПоКлючам.Колонки.Добавить("Таблица1СИсточник");
	ДанныеДляЗагрузкиПоКлючам.Колонки.Добавить("Таблица1СПриемник");
	ДанныеДляЗагрузкиПоКлючам.Колонки.Добавить("НазваниеРеквизитаКлюча");
	ДанныеДляЗагрузкиПоКлючам.Колонки.Добавить("ИндексСтрокиMS");
	ДанныеДляЗагрузкиПоКлючам.Колонки.Добавить("ИндексСтроки1С");
	ДанныеДляЗагрузкиПоКлючам.Колонки.Добавить("ЗначениеКлюча");
	// - ZHKN 03.10.2017
	
	СтруктураДанных = Новый Структура;
	СтруктураДанных.Вставить("СообщениеОбОшибках", ""); 
	СтруктураДанных.Вставить("МетаданныеПриемника", ?(ДокументДляЗаписи = Неопределено,"",ДокументДляЗаписи.Метаданные())); 
	СтруктураДанных.Вставить("ПравилаЗагрузки", НастройкаБП.НастройкаЗагрузкиПолей); 
	СтруктураДанных.Вставить("ДокументДляЗаписи", ДокументДляЗаписи); 
	СтруктураДанных.Вставить("ДокументОснование", ДокументОснование); 
	СтруктураДанных.Вставить("ДанныеДокументаMS", ДанныеДокументаMS); 
	СтруктураДанных.Вставить("ПроизвольныеКодыШапки", ПроизвольныеКодыШапки); 
	СтруктураДанных.Вставить("ПроизвольныеКодыТабличнойЧасти", ПроизвольныеКодыТабличнойЧасти); 
	СтруктураДанных.Вставить("ЗначенияПараметров", ЗначенияПараметров); 
	СтруктураДанных.Вставить("ДанныеДляЗагрузки_Шапка", Новый Структура); 
	СтруктураДанных.Вставить("ИмяПриемникаДанных", "ДанныеДляЗагрузки_Шапка"); 
	СтруктураДанных.Вставить("ШапкаДокументаMS", СтруктураДанных.ДанныеДокументаMS.ШапкаДокумента); 
	СтруктураДанных.Вставить("ИмяИсточникаДанных", "ШапкаДокументаMS");
	СтруктураДанных.Вставить("ДанныеДляЗагрузкиПоКлючам", ДанныеДляЗагрузкиПоКлючам); // ZHKN 03.10.2017
	СтруктураДанных.Вставить("ПоследнийИндексСтрокиДанныхДляЗагрузкиПоКлючам", -1);   // ZHKN 03.10.2017
	
	
	Если НастройкаБП.ВыполнитьТолькоПроизвольныйКод Тогда
		ГлЯдро_ВыполнитьОбработчикЗагрузкиДокумента1С("Обработчик_ПередЗаполнениемДокумента", ДокументДляЗаписи, ДокументОснование, НастройкаБП,,,, ДанныеДокументаMS);
		РезультатЗаписи = Новый Структура("Сообщение,Статус,Данные", "", Истина, Неопределено);
		Возврат РезультатЗаписи;
	КонецЕсли;
	// Шапка документа
	// Реквизиты MS
	ГлЯдро_ЗаполнитьДанныеДляЗагрузкиРеквизитамиMS(СтруктураДанных);
	// Произвольные значения
	ГлЯдро_ЗаполнитьДанныеДляЗагрузкиПроизвольнымиЗначениями(СтруктураДанных);
	// Глобальные параметры
	ГлЯдро_ЗаполнитьДанныеДляЗагрузкиГлобальнымиПараметрами(СтруктураДанных);
	// Произвольные коды
	ГлЯдро_ЗаполнитьДанныеДляЗагрузкиПроизвольнымиКодами(СтруктураДанных);
	//// Временное решение. Окончание
	
	// Заполняем шапку документа только если в новый документ
	Если ДокументДляЗаписи.ЭтоНовый() Тогда
		// Перед заполнением документа
		ГлЯдро_ВыполнитьОбработчикЗагрузкиДокумента1С("Обработчик_ПередЗаполнениемДокумента", ДокументДляЗаписи, ДокументОснование, НастройкаБП);
		Если НЕ ЗначениеЗаполнено(ДокументДляЗаписи.Дата) Тогда
			ДокументДляЗаписи.Дата = ТекущаяДата();
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(ДокументДляЗаписи.Номер) Тогда
			ДокументДляЗаписи.УстановитьНовыйНомер();
		КонецЕсли;	
	КонецЕсли;
		
	// Загружаем
	Если ТипЗнч(НастройкаБП.НастройкаЗагрузкиПолей) = Тип("ТаблицаЗначений") 
	     И НастройкаБП.НастройкаЗагрузкиПолей.Колонки.Найти("ТипПриемника") <> Неопределено 
		 И НастройкаБП.НастройкаЗагрузкиПолей.Колонки.Найти("Загружать") <> Неопределено	Тогда
		ЗагружаемыеРеквизиты = НастройкаБП.НастройкаЗагрузкиПолей.НайтиСтроки(Новый Структура("Загружать,ТипПриемника", Истина, "Реквизит1С"));
		Для Каждого НастройкаРеквизита Из ЗагружаемыеРеквизиты Цикл
			Если ЗначениеЗаполнено(СтруктураДанных.ДанныеДляЗагрузки_Шапка[НастройкаРеквизита.ИмяПриемника]) Тогда
				ДокументДляЗаписи[НастройкаРеквизита.ИмяПриемника] = СтруктураДанных.ДанныеДляЗагрузки_Шапка[НастройкаРеквизита.ИмяПриемника];
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	//// Временное решение. Окончание
	
	// Табличные части
	СтруктураДанных.Вставить("КонтрольКоличества", НастройкаБП.КонтрольКоличества);
	СтруктураДанных.Вставить("ДанныеДляЗагрузки_Строка", Новый Структура); 
	СтруктураДанных.Вставить("ИмяПриемникаДанных", "ДанныеДляЗагрузки_Строка"); 
	СтруктураДанных.Вставить("ИмяИсточникаДанных", "ТаблицаMS"); 
	
	// +++ 14.02.18 Пока прикроем, чтоб подцеплялись настройки для доп. табличных частей
	// СерииПлан
	//НастройкиТЧ = НастройкаБП.НастройкаЗагрузкиТЧ.НайтиСтроки(Новый Структура("ТабличнаяЧастьДокументаMS", "СерииПлан"));
	//Для Каждого СтрокаНастройкиТЧ Из НастройкиТЧ Цикл
	//	СтруктураДанных.Вставить("СтрокаНастройкиТЧ", СтрокаНастройкиТЧ); 
	//	ГлЯдро_ЗагрузитьСтрокиТабличнойЧасти(СтруктураДанных);
	//КонецЦикла;
	//// СерииФакт
	//НастройкиТЧ = НастройкаБП.НастройкаЗагрузкиТЧ.НайтиСтроки(Новый Структура("ТабличнаяЧастьДокументаMS", "СерииФакт"));
	//Для Каждого СтрокаНастройкиТЧ Из НастройкиТЧ Цикл
	//	СтруктураДанных.Вставить("СтрокаНастройкиТЧ", СтрокаНастройкиТЧ); 
	//	ГлЯдро_ЗагрузитьСтрокиТабличнойЧасти(СтруктураДанных);
	//КонецЦикла;
	//// СтрокиПлан
	//НастройкиТЧ = НастройкаБП.НастройкаЗагрузкиТЧ.НайтиСтроки(Новый Структура("ТабличнаяЧастьДокументаMS", "СтрокиПлан"));
	//Для Каждого СтрокаНастройкиТЧ Из НастройкиТЧ Цикл
	//	СтруктураДанных.Вставить("СтрокаНастройкиТЧ", СтрокаНастройкиТЧ); 
	//	ГлЯдро_ЗагрузитьСтрокиТабличнойЧасти(СтруктураДанных);
	//КонецЦикла;
	//// СтрокиФакт
	//НастройкиТЧ = НастройкаБП.НастройкаЗагрузкиТЧ.НайтиСтроки(Новый Структура("ТабличнаяЧастьДокументаMS", "СтрокиФакт"));
	//Для Каждого СтрокаНастройкиТЧ Из НастройкиТЧ Цикл
	//	СтруктураДанных.Вставить("СтрокаНастройкиТЧ", СтрокаНастройкиТЧ); 
	//	ГлЯдро_ЗагрузитьСтрокиТабличнойЧасти(СтруктураДанных);
	//КонецЦикла;
	// ---
	
	НастройкиТЧ = НастройкаБП.НастройкаЗагрузкиТЧ;
	Для Каждого СтрокаНастройкиТЧ Из НастройкиТЧ Цикл
		СтруктураДанных.Вставить("СтрокаНастройкиТЧ", СтрокаНастройкиТЧ); 
		ГлЯдро_ЗагрузитьСтрокиТабличнойЧасти(СтруктураДанных);
	КонецЦикла;
	
	// После заполнения документа
	ГлЯдро_ВыполнитьОбработчикЗагрузкиДокумента1С("Обработчик_ПослеЗаполненияДокумента", ДокументДляЗаписи, ДокументОснование, НастройкаБП,,,,ДанныеДокументаMS);
	
	ГлЯдро_УдалитьСтрокиСНулевымКоличеством(ДокументДляЗаписи, НастройкаБП);
		
	ДокументДляЗаписи.ДополнительныеСвойства.Вставить("ПроводитьДокумент", НастройкаБП.ПроводитьДокументПослеЗагрузки);
	РезультатЗаписи = Новый Структура("Сообщение,Статус,Данные", "", Истина, ДокументДляЗаписи);
	
	Если НЕ Онлайн Тогда
		
		ЗаписыватьДокументПослеЗагрузки = ГлЯдро_ПолучитьЗначениеРеквизитаНастройкиБизнесПроцесса(НастройкаБП, "ЗаписыватьДокументПослеЗагрузки");
		
		Если ЗаписыватьДокументПослеЗагрузки <> Неопределено И ЗаписыватьДокументПослеЗагрузки Тогда
			Попытка
				ДокументДляЗаписи.Записать(РежимЗаписиДокумента.Запись);	
				ДокументЗаписан = Истина;
			Исключение
				Сообщить("Произошла ошибка при записи документа. Причина: " + ОписаниеОшибки());
				ДокументЗаписан = Ложь;
			КонецПопытки; 
		Иначе
			ДокументЗаписан = Ложь;
		КонецЕсли;		
		
		РезультатЗаписи.Вставить("ДокументЗаписан", ДокументЗаписан);
		
		ПроводитьДокументПослеЗагрузки = ГлЯдро_ПолучитьЗначениеРеквизитаНастройкиБизнесПроцесса(НастройкаБП, "ПроводитьДокументПослеЗагрузки");
		
		Если ПроводитьДокументПослеЗагрузки <> Неопределено И ПроводитьДокументПослеЗагрузки Тогда
			Попытка
				ДокументДляЗаписи.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Оперативный);	
				ДокументПроведен = Истина;
			Исключение
				Сообщить("Произошла ошибка при проведении документа. Причина: " + ОписаниеОшибки());
				ДокументПроведен = Ложь;
			КонецПопытки; 
		Иначе
			ДокументПроведен = Ложь;
		КонецЕсли;						
		
		РезультатЗаписи.Вставить("ДокументПроведен", ДокументПроведен);		
		
	КонецЕсли;			
	
	Если СтруктураДанных.СообщениеОбОшибках <> "" Тогда
		РезультатЗаписи.Вставить("Сообщение", "ОШИБКИ:" + Символы.ВК + СтруктураДанных.СообщениеОбОшибках);
	КонецЕсли;
	
	Возврат РезультатЗаписи;
	
КонецФункции

Функция ГлЯдро_ЗаписатьИПровестиДокумент1С(Знач РезультатЗаписи, НастройкаБизнесПроцесса, ИмяТипаДокумента, ИмяДокумента)
	
	Если РезультатЗаписи.Статус = Истина Тогда
		
		// ******************************************* +++ Алгоритм записи и проведения документов *******************************************
		
		НастройкиДляОбмена 	= ГлЯдро_ПолучитьИзКэшаНастройкуSMARTS("НастройкиБизнесПроцессов");
		// т.к. для документа уже был правильно подобран БП в методе "ГлЯдро_СформироватьИЗаписатьДокументВБазу1С_ПоID", то и здесь БП будет правильно подобран
		РезультатПодбораБП 	= ГлЯдро_ПолучитьНастройкуБизнесПроцесса(НастройкаБизнесПроцесса, ИмяТипаДокумента, НастройкиДляОбмена);										
		НастройкаБП 		= РезультатПодбораБП.Данные;
				
		ДокументДляЗаписи 	= РезультатЗаписи.Данные;
		ЭтоНовыйДокумент 	= ДокументДляЗаписи.ЭтоНовый();				
		
		ДокументДляЗаписи.ОбменДанными.Загрузка = Ложь;
		
		Попытка
			ДокументДляЗаписи.Записать(РежимЗаписиДокумента.Запись);						
			СтрокаДокумента = Строка(ДокументДляЗаписи.Ссылка);
			РезультатЗаписи.Вставить("Сообщение", "Документ " + СтрокаДокумента + " записан!"); 
		Исключение						
			ОписаниеОшибки = ОписаниеОшибки();
			Попытка
			    ДокументДляЗаписи.ОбменДанными.Загрузка = Истина;
				ДокументДляЗаписи.Записать(РежимЗаписиДокумента.Запись);								
				ДокументДляЗаписи.ОбменДанными.Загрузка = Ложь;
				СтрокаДокумента = Строка(ДокументДляЗаписи.Ссылка);
				РезультатЗаписи.Вставить("Сообщение", "Документ " + СтрокаДокумента + " записан!"); 
			Исключение				
				ОписаниеОшибки = ОписаниеОшибки();
				ДокументДляЗаписи.ОбменДанными.Загрузка = Ложь;
				РезультатЗаписи.Вставить("Сообщение", "Документ " + ИмяДокумента + " НЕ записан в базу 1С!"); 
				РезультатЗаписи.Вставить("Статус", Ложь);			
			КонецПопытки; 			
		КонецПопытки; 										
		
		Если РезультатЗаписи.Статус = Истина Тогда									
			
			Если ЭтоНовыйДокумент Тогда
			
				Если НастройкаБП.ПроводитьДокументПослеЗагрузки Тогда
					Попытка
						ДокументДляЗаписи.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Оперативный);	
						РезультатЗаписи.Вставить("Сообщение", "Документ " + СтрокаДокумента + " записан и проведен!"); 			
					Исключение
						РезультатЗаписи.Вставить("Сообщение", "Документ " + СтрокаДокумента + " записан, но не проведен, проведите документ вручную!"); 
					КонецПопытки; 
				КонецЕсли;	
				
			Иначе
				
				Если ДокументДляЗаписи.Проведен Тогда
					Попытка
						ДокументДляЗаписи.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Неоперативный);	
						РезультатЗаписи.Вставить("Сообщение", "Документ " + СтрокаДокумента + " записан и перепроведен!"); 			
					Исключение 												
						РезультатЗаписи.Вставить("Сообщение", "Документ " + СтрокаДокумента + " записан, но не перепроведен, перепроведите документ вручную!"); 
					КонецПопытки;	
				ИначеЕсли НастройкаБП.ПроводитьДокументПослеЗагрузки Тогда	
					Попытка
						ДокументДляЗаписи.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Оперативный);	
						РезультатЗаписи.Вставить("Сообщение", "Документ " + СтрокаДокумента + " записан и проведен!"); 			
					Исключение
						РезультатЗаписи.Вставить("Сообщение", "Документ " + СтрокаДокумента + " записан, но не проведен, проведите документ вручную!"); 
					КонецПопытки; 
				КонецЕсли;	
					
			КонецЕсли;			
							
		КонецЕсли;	
		
		// ******************************************* --- Алгоритм записи и проведения документов *******************************************
		
	КонецЕсли;
	
	Возврат РезультатЗаписи;
	
КонецФункции	

Процедура ГлЯдро_УдалитьСтрокиСНулевымКоличеством(ДокументДляЗаписи, НастройкаБП)	
	
	// обратная совместимость для старых конфигураций, в которых ещё не было данного флага
	Если НастройкаБП.НастройкаЗагрузкиТЧ.Колонки.Найти("УдалятьСтрокиСНулевымКоличеством") = Неопределено Тогда
		Возврат;				
	КонецЕсли;		
	
	ТабличныеЧастиДляУдаленияСтрок = НастройкаБП.НастройкаЗагрузкиТЧ.НайтиСтроки(Новый Структура("УдалятьСтрокиСНулевымКоличеством", Истина));
	
	Для каждого Строка Из ТабличныеЧастиДляУдаленияСтрок Цикл
		Если ДокументДляЗаписи.Метаданные().ТабличныеЧасти.Найти(Строка.НастройкаТЧСтрокой) <> Неопределено Тогда 
			
			НайденнаяСтрока = Строка.ТабличнаяЧастьДокумента1С.Найти("КоличествоФакт", "ИмяИсточника");
			Если НайденнаяСтрока = Неопределено Тогда
				НайденнаяСтрока = Строка.ТабличнаяЧастьДокумента1С.Найти("CurrentQuantity", "ИмяИсточника");
				Если НайденнаяСтрока = Неопределено Тогда
					Сообщить("Удаление строк с нулевым количеством в табличной части [" + Строка.НастройкаТЧСтрокой + "] невозможно, 
							|т.к. не найден реквизит, в который загружается ""КоличествоФакт"" (""CurrentQuantity"") из Mobile SMARTS");
					Продолжить;
				КонецЕсли;	
			КонецЕсли;	
			
			ИмяРеквизитаДляПроверки = НайденнаяСтрока.ИмяПриемника;			
			ТаблицаДляУдаленияСтрок = ДокументДляЗаписи[Строка.НастройкаТЧСтрокой].Выгрузить();				
			
			Сч = ТаблицаДляУдаленияСтрок.Количество() - 1;
			Пока Сч >= 0 Цикл								
				Если ТаблицаДляУдаленияСтрок[Сч][ИмяРеквизитаДляПроверки] = 0 Тогда
					ТаблицаДляУдаленияСтрок.Удалить(Сч);
				КонецЕсли;
				Сч = Сч - 1;
			КонецЦикла;	
			
			ДокументДляЗаписи[Строка.НастройкаТЧСтрокой].Загрузить(ТаблицаДляУдаленияСтрок);
			
		КонецЕсли;		
	КонецЦикла; 		
			
КонецПроцедуры

Процедура ГлЯдро_ЗагрузитьСтрокиТабличнойЧасти(СтруктураДанных)
	
	Если ТипЗнч(СтруктураДанных.СтрокаНастройкиТЧ.ТабличнаяЧастьДокумента1С) <> Тип("ТаблицаЗначений") Тогда
		Возврат;
	КонецЕсли;
	
	ИмяТЧ_1С = СтруктураДанных.СтрокаНастройкиТЧ.НастройкаТЧСтрокой;
	ИмяТЧ_MS = СтруктураДанных.СтрокаНастройкиТЧ.ТабличнаяЧастьДокументаMS;
	
	СтруктураДанных.Вставить("ПравилаЗагрузки", СтруктураДанных.СтрокаНастройкиТЧ.ТабличнаяЧастьДокумента1С); 
	СтруктураДанных.Вставить("МетаданныеПриемника", СтруктураДанных.ДокументДляЗаписи.Метаданные().ТабличныеЧасти[ИмяТЧ_1С]);
	СтруктураДанных.Вставить("МетаданныеДокументаПриемника", СтруктураДанных.ДокументДляЗаписи.Метаданные()); // ZHKN 03.10.2017
	СтруктураДанных.Вставить("Таблица1С", СтруктураДанных.ДокументДляЗаписи[ИмяТЧ_1С].Выгрузить()); 
	Если ИмяТЧ_MS = "СерииФакт" ИЛИ ИмяТЧ_MS = "СерийныеНомераФакт" Тогда
		СтруктураДанных.Вставить("ЭтоСерии", Истина); 
		СтруктураДанных.Вставить("ТаблицаТоваровMS", СтруктураДанных.ДанныеДокументаMS.СтрокиФакт); 
//		ГлЯдро_ПодготовитьТаблицуСерий(СтруктураДанных, ИмяТЧ_MS);
	ИначеЕсли ИмяТЧ_MS = "СерииПлан" ИЛИ ИмяТЧ_MS = "СерийныеНомераПлан" Тогда
		СтруктураДанных.Вставить("ЭтоСерии", Истина); 
		СтруктураДанных.Вставить("ТаблицаТоваровMS", СтруктураДанных.ДанныеДокументаMS.СтрокиПлан); 
//		ГлЯдро_ПодготовитьТаблицуСерий(СтруктураДанных, ИмяТЧ_MS);
	Иначе
		Если СтруктураДанных.ДанныеДокументаMS.Свойство(ИмяТЧ_MS) = Ложь Тогда
			Возврат;
		КонецЕсли;
		СтруктураДанных.Вставить("ЭтоСерии", Ложь); 
		СтруктураДанных.Вставить("ТаблицаMS", СтруктураДанных.ДанныеДокументаMS[ИмяТЧ_MS]); 
	КонецЕсли;
	
	СтруктураДанных.Вставить("ПравилаПоиска", СтруктураДанных.ПравилаЗагрузки.СкопироватьКолонки()); 
	Для Каждого Правило Из СтруктураДанных.ПравилаЗагрузки Цикл
		Если Правило.ПравилоПоиска <> "" Тогда
			ЗаполнитьЗначенияСвойств(СтруктураДанных.ПравилаПоиска.Добавить(), Правило);
		КонецЕсли;
	КонецЦикла;
	
	Если СтруктураДанных.СтрокаНастройкиТЧ.ОчищатьТабличнуюЧасть Тогда
		СтруктураДанных.Таблица1С.Очистить();
	Иначе
		Для Каждого Правило Из СтруктураДанных.ПравилаЗагрузки Цикл
			Если Правило.ОчищатьПередЗагрузкой И СтруктураДанных.Таблица1С.Количество() > 0 Тогда
				ГлЯдро_ОчиститьКолонкуТаблицыЗначений(СтруктураДанных.Таблица1С, Правило.ИмяПриемника);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	// Перед заполнением ТЧ
	ГлЯдро_ВыполнитьОбработчикЗагрузкиДокумента1С("Обработчик_ПередЗаполнениемТабличнойЧасти", СтруктураДанных.ДокументДляЗаписи, СтруктураДанных.ДокументОснование, СтруктураДанных.СтрокаНастройкиТЧ, СтруктураДанных.Таблица1С,,,СтруктураДанных.ТаблицаMS);
	
	// Заполнение ТЧ
	
	Для ИндексСтрокиMS = 0 По СтруктураДанных.ТаблицаMS.Количество() - 1 Цикл
		
		СтруктураДанных.Вставить("ИндексСтрокиMS", ИндексСтрокиMS); 
		СтруктураДанных.Вставить("ДанныеДляЗагрузки_Строка", Новый Структура); 
		
		// Реквизиты MS
		ГлЯдро_ЗаполнитьДанныеДляЗагрузкиРеквизитамиMS(СтруктураДанных);
		// Вычислимые поля
		ГлЯдро_ЗаполнитьДанныеДляЗагрузкиВычислимымиПолями(СтруктураДанных);
		// Произвольные значения
		ГлЯдро_ЗаполнитьДанныеДляЗагрузкиПроизвольнымиЗначениями(СтруктураДанных);
		// Глобальные параметры
		ГлЯдро_ЗаполнитьДанныеДляЗагрузкиГлобальнымиПараметрами(СтруктураДанных);
		
		СтруктураДанных.Вставить("СтрокаMSРазнесена", Ложь);
		СтруктураДанных.Вставить("ЭтоНоваяСтрока1С", Ложь);
		СтруктураДанных.Вставить("ИндексСтроки1С", 0);
		СтруктураДанных.Вставить("ИндексСтрокиДляПоиска", 0);
		Пока НЕ СтруктураДанных.СтрокаMSРазнесена Цикл
			
			// Поиск подходящей строки
			СтруктураДанных.Вставить("ИмяТаблицыДляПоиска", "Таблица1С");
			ГлЯдро_НайтиПодходящуюСтрокуТаблицы1СПоКлючам(СтруктураДанных);
			ТекущаяСтрока1С = СтруктураДанных.Таблица1С.Получить(СтруктураДанных.ИндексСтроки1С);
			// + ZHKN 03.10.2017
			Если СтруктураДанных.СтрокаНастройкиТЧ.ОсновнаяТабличнаяЧасть 
				И СтруктураДанных.ДанныеДляЗагрузкиПоКлючам.Количество() > 0 
				И СтруктураДанных.ПоследнийИндексСтрокиДанныхДляЗагрузкиПоКлючам >= 0 Тогда
				
				    СтрокаТЧ = СтруктураДанных.ДанныеДляЗагрузкиПоКлючам.Получить(СтруктураДанных.ПоследнийИндексСтрокиДанныхДляЗагрузкиПоКлючам);
					СтрокаТЧ.ИндексСтроки1С = СтруктураДанных.ИндексСтроки1С;
					Если Не СтруктураДанных.ЭтоНоваяСтрока1С Тогда
						СтрокаТЧ.ЗначениеКлюча = ТекущаяСтрока1С[СтрокаТЧ.НазваниеРеквизитаКлюча];
					КонецЕсли;
			КонецЕсли;
			// - ZHKN 03.10.2017	
			СтруктураДанных.Вставить("СтрокаДокумента1С", ТекущаяСтрока1С);
			
			// Подбор количества
			ПравилаПодбораКоличества = СтруктураДанных.ПравилаЗагрузки.НайтиСтроки(Новый Структура("СпособСопоставления", "ПодборКоличества"));
			Если ПравилаПодбораКоличества.Количество() = 0 Тогда
				СтруктураДанных.Вставить("СтрокаMSРазнесена", Истина);
			Иначе
				Для Каждого СтрокаПравила Из ПравилаПодбораКоличества Цикл
					
					СтруктураДанных.Вставить("ПодборКоличества_Колонка1С", СтрокаПравила.ИмяПриемника);
					СтруктураДанных.Вставить("ПодборКоличества_КолонкаMS", СтрокаПравила.ИмяИсточника);
					
					СтруктураВызова = Новый Структура;
					СтруктураВызова.Вставить("ИмяМетода", СтрокаПравила.ОбработчикПодбораКоличества);
					СтруктураВызова.Вставить("ТипМетода", "Процедура");
					ПараметрыМетода = Новый Структура("СтруктураДанных", СтруктураДанных);
					СтруктураВызова.Вставить("ПараметрыМетода", ПараметрыМетода);
					
					ГлЯдро_ВыполнитьПроизвольныйОбработчик(СтруктураВызова);
					
				КонецЦикла;
			КонецЕсли;
			
			// Произвольные коды
			ГлЯдро_ЗаполнитьДанныеДляЗагрузкиПроизвольнымиКодами(СтруктураДанных);
			
			// Перед заполнением строки
			ГлЯдро_ВыполнитьОбработчикЗагрузкиДокумента1С("Обработчик_ПередЗаполнениемСтрокиТабличнойЧасти", СтруктураДанных.ДокументДляЗаписи, СтруктураДанных.ДокументОснование, СтруктураДанных.СтрокаНастройкиТЧ,, ТекущаяСтрока1С, СтруктураДанных);
			
			// Заполнение строки
			Если СтруктураДанных.ЭтоНоваяСтрока1С Тогда
				РеквизитыКЗагрузке = СтруктураДанных.ПравилаЗагрузки.НайтиСтроки(Новый Структура("Загружать,ТипПриемника", Истина, "Реквизит1С"));
			Иначе
				РеквизитыКЗагрузке = СтруктураДанных.ПравилаЗагрузки.НайтиСтроки(Новый Структура("Загружать,ТипПриемника", Истина, "Реквизит1С"));
			КонецЕсли;
			Для Каждого НастройкаРеквизита Из РеквизитыКЗагрузке Цикл 
				ЗначениеДляЗагрузки = Неопределено;
				Если НастройкаРеквизита.СпособСопоставления = "ПодборКоличества" Тогда
					Продолжить;
				ИначеЕсли НастройкаРеквизита.Группировать Тогда
					Если СтруктураДанных.ЭтоНоваяСтрока1С И ЗначениеЗаполнено(СтруктураДанных.ДанныеДляЗагрузки_Строка[НастройкаРеквизита.ИмяПриемника]) Тогда						
						ТекущаяСтрока1С[НастройкаРеквизита.ИмяПриемника] = СтруктураДанных.ДанныеДляЗагрузки_Строка[НастройкаРеквизита.ИмяПриемника];
					КонецЕсли;
				ИначеЕсли НЕ НастройкаРеквизита.Группировать Тогда
					СтруктураДанных.Вставить("Агрегирование_Колонка1С", НастройкаРеквизита.ИмяПриемника);
					СтруктураДанных.Вставить("Агрегирование_ЭтоКлючСвязи", НастройкаРеквизита.ИмяИсточника = "КлючСвязиСерий");
					ГлЯдро_ЗаполнитьАгрегатноеЗначение(СтруктураДанных);
				КонецЕсли;
			КонецЦикла;
			
			// После заполнения строки
			ГлЯдро_ВыполнитьОбработчикЗагрузкиДокумента1С("Обработчик_ПослеЗаполненияСтрокиТабличнойЧасти", СтруктураДанных.ДокументДляЗаписи, СтруктураДанных.ДокументОснование, СтруктураДанных.СтрокаНастройкиТЧ,, ТекущаяСтрока1С, СтруктураДанных );//СтруктураДанных.СтрокаНастройкиТЧ);
			
		КонецЦикла;
		
	КонецЦикла;
	
	// *********************************************** +++ временное решение ***********************************************
	
	// еще раз сворачиваем таблицу 1С, т.к. в обработчиках перед заполнением строки и после заполнения строки могли быть дозаполнены поля, которые используются для группировки
	// делаем ТОЛЬКО для основной ТЧ, т.к. в подчиненных, как правило, ничего дозаполнять в обработчиках не требуется
	// и подчиненные ТЧ не свернутся из-за того, что в каждой строке есть ключ связи с основной ТЧ
	Если СтруктураДанных.СтрокаНастройкиТЧ.ОсновнаяТабличнаяЧасть Тогда		
		
		// собираем поля, по которым группировать и агрегировать таблицу 1С
		РеквизитыКЗагрузке = СтруктураДанных.ПравилаЗагрузки.НайтиСтроки(Новый Структура("Загружать,ТипПриемника", Истина, "Реквизит1С"));
		ПоляГруппировки = Новый Структура;
		ПоляАгрегирования = Новый Структура;
		Для каждого НастройкаРеквизита Из РеквизитыКЗагрузке Цикл
			Если Найти(НастройкаРеквизита.СинонимИсточника, "Ключ связи для """) Тогда
				Продолжить;
			ИначеЕсли НастройкаРеквизита.СпособСопоставления = "ПодборКоличества" Тогда
				Продолжить;
			ИначеЕсли НастройкаРеквизита.Группировать Тогда
				ПоляГруппировки.Вставить(НастройкаРеквизита.ИмяПриемника);
			ИначеЕсли НЕ НастройкаРеквизита.Группировать Тогда                                               
				ПоляАгрегирования.Вставить(НастройкаРеквизита.ИмяПриемника, ГлЯдро_ПолучитьАгрегатнуюФункцию(СтруктураДанных.МетаданныеПриемника.Реквизиты.Найти(НастройкаРеквизита.ИмяПриемника)));
			Иначе
				Продолжить;
			КонецЕсли;		
		КонецЦикла; 
		
		Таблица1С = СтруктураДанных.Таблица1С;
		КопияТаблицы1С = Таблица1С.Скопировать();
		Таблица1С.Очистить();
		
		// очищаем колонки ключей связи с подчиненными табличными частями
		Для каждого НастройкаРеквизита Из РеквизитыКЗагрузке Цикл
			Если Найти(НастройкаРеквизита.СинонимИсточника, "Ключ связи для """) Тогда
				КопияТаблицы1С.ЗаполнитьЗначения("", НастройкаРеквизита.ИмяПриемника);
			КонецЕсли;
		КонецЦикла;		
		
		// очищаем таблицу связей между основной и подчиненными ТЧ
		СтруктураДанных.ДанныеДляЗагрузкиПоКлючам.Очистить();		
		ОтобранныеПравила = СтруктураДанных.ПравилаЗагрузки.НайтиСтроки(Новый Структура("ТипИсточника", "РеквизитMS"));		
		
		// группируем строки таблицы, заполняем данные для загрузки по ключам
		Для каждого Строка Из КопияТаблицы1С Цикл
			СтруктураПоиска = Новый Структура;
			Для каждого КлючИЗначение Из ПоляГруппировки Цикл
				СтруктураПоиска.Вставить(КлючИЗначение.Ключ, Строка[КлючИЗначение.Ключ]);					
			КонецЦикла; 
			НайденныеСтроки = Таблица1С.НайтиСтроки(СтруктураПоиска);
			Если НайденныеСтроки.Количество() Тогда
				Для каждого ТекущаяСтрока1С Из НайденныеСтроки Цикл
					Для каждого КлючИЗначение Из ПоляАгрегирования Цикл
						Если КлючИЗначение.Значение = "Сумма" Тогда
							Агрегат = ТекущаяСтрока1С[КлючИЗначение.Ключ] + Строка[КлючИЗначение.Ключ];
						ИначеЕсли КлючИЗначение.Значение = "Конкатенация" Тогда	
							Разделитель = ?(ЗначениеЗаполнено(ТекущаяСтрока1С[КлючИЗначение.Ключ]), ", ", "");
							Агрегат = ТекущаяСтрока1С[КлючИЗначение.Ключ] + Разделитель + Строка[КлючИЗначение.Ключ];
						ИначеЕсли КлючИЗначение.Значение = "Замена" Тогда	
							Агрегат = Строка[КлючИЗначение.Ключ];
						Иначе	
							Агрегат = ТекущаяСтрока1С[КлючИЗначение.Ключ];	
						КонецЕсли;							
						ТекущаяСтрока1С[КлючИЗначение.Ключ] = Агрегат;
						СтруктураДанных.Вставить("ЭтоНоваяСтрока1С", Ложь);
						СтруктураДанных.Вставить("СтрокаДокумента1С", ТекущаяСтрока1С);
						СтруктураДанных.Вставить("ИндексСтроки1С", Таблица1С.Индекс(ТекущаяСтрока1С));
						СтруктураДанных.Вставить("ИндексСтрокиMS", КопияТаблицы1С.Индекс(Строка)); 								
						Для Каждого Правило Из ОтобранныеПравила Цикл
							Если Правило.СпособСопоставления = "ПодборКоличества" Тогда
								Продолжить;
							КонецЕсли;		
							Если ЗначениеЗаполнено(Правило.ИмяПриемника) И ЗначениеЗаполнено(Правило.ИмяИсточника) Тогда
								// + ZHKN 03.10.2017
								Если Найти(Правило.СинонимИсточника, "Ключ связи для """) > 0 И 
									СтруктураДанных.МетаданныеДокументаПриемника.ТабличныеЧасти[Правило.ИмяИсточника].Реквизиты.Найти(Правило.ИмяПриемника) <> Неопределено И
									СтруктураДанных.СтрокаНастройкиТЧ.ОсновнаяТабличнаяЧасть Тогда 
									
									СтрокаТЧ = СтруктураДанных.ДанныеДляЗагрузкиПоКлючам.Добавить();
									СтрокаТЧ.Таблица1СИсточник = СтруктураДанных.МетаданныеПриемника.Имя;
									СтрокаТЧ.Таблица1СПриемник = Правило.ИмяИсточника;
									СтрокаТЧ.НазваниеРеквизитаКлюча = Правило.ИмяПриемника;
									СтрокаТЧ.ИндексСтрокиMS = СтруктураДанных.ИндексСтрокиMS;
									СтрокаТЧ.ИндексСтроки1С = СтруктураДанных.ИндексСтроки1С;
									
									СтруктураДанных.ПоследнийИндексСтрокиДанныхДляЗагрузкиПоКлючам = СтруктураДанных.ДанныеДляЗагрузкиПоКлючам.Индекс(СтрокаТЧ);
									// - ZHKN 03.10.2017
								КонецЕсли;
							КонецЕсли;
						КонецЦикла;																			
						ГлЯдро_ВыполнитьОбработчикЗагрузкиДокумента1С("Обработчик_ПослеЗаполненияСтрокиТабличнойЧасти", СтруктураДанных.ДокументДляЗаписи, СтруктураДанных.ДокументОснование, СтруктураДанных.СтрокаНастройкиТЧ,, ТекущаяСтрока1С, СтруктураДанных );//СтруктураДанных.СтрокаНастройкиТЧ);	
					КонецЦикла; 	
				КонецЦикла; 
			Иначе				
				ТекущаяСтрока1С = Таблица1С.Добавить();
				ЗаполнитьЗначенияСвойств(ТекущаяСтрока1С, Строка);			
				СтруктураДанных.Вставить("ЭтоНоваяСтрока1С", Истина);
				СтруктураДанных.Вставить("СтрокаДокумента1С", ТекущаяСтрока1С);
				СтруктураДанных.Вставить("ИндексСтроки1С", Таблица1С.Индекс(ТекущаяСтрока1С));
				СтруктураДанных.Вставить("ИндексСтрокиMS", КопияТаблицы1С.Индекс(Строка));
				Для Каждого Правило Из ОтобранныеПравила Цикл
					Если Правило.СпособСопоставления = "ПодборКоличества" Тогда
						Продолжить;
					КонецЕсли;		
					Если ЗначениеЗаполнено(Правило.ИмяПриемника) И ЗначениеЗаполнено(Правило.ИмяИсточника) Тогда
						// + ZHKN 03.10.2017
						Если Найти(Правило.СинонимИсточника, "Ключ связи для """) > 0 И 
							СтруктураДанных.МетаданныеДокументаПриемника.ТабличныеЧасти[Правило.ИмяИсточника].Реквизиты.Найти(Правило.ИмяПриемника) <> Неопределено И
							СтруктураДанных.СтрокаНастройкиТЧ.ОсновнаяТабличнаяЧасть Тогда 
							
							СтрокаТЧ = СтруктураДанных.ДанныеДляЗагрузкиПоКлючам.Добавить();
							СтрокаТЧ.Таблица1СИсточник = СтруктураДанных.МетаданныеПриемника.Имя;
							СтрокаТЧ.Таблица1СПриемник = Правило.ИмяИсточника;
							СтрокаТЧ.НазваниеРеквизитаКлюча = Правило.ИмяПриемника;
							СтрокаТЧ.ИндексСтрокиMS = СтруктураДанных.ИндексСтрокиMS;
							СтрокаТЧ.ИндексСтроки1С = СтруктураДанных.ИндексСтроки1С;
							
							СтруктураДанных.ПоследнийИндексСтрокиДанныхДляЗагрузкиПоКлючам = СтруктураДанных.ДанныеДляЗагрузкиПоКлючам.Индекс(СтрокаТЧ);
							// - ZHKN 03.10.2017
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;																					
				ГлЯдро_ВыполнитьОбработчикЗагрузкиДокумента1С("Обработчик_ПослеЗаполненияСтрокиТабличнойЧасти", СтруктураДанных.ДокументДляЗаписи, СтруктураДанных.ДокументОснование, СтруктураДанных.СтрокаНастройкиТЧ,, ТекущаяСтрока1С, СтруктураДанных );//СтруктураДанных.СтрокаНастройкиТЧ);	
			КонецЕсли;		
		КонецЦикла; 			
	
	КонецЕсли;
	
	// *********************************************** --- временное решение ***********************************************
	
	// После заполнения ТЧ
	ГлЯдро_ВыполнитьОбработчикЗагрузкиДокумента1С("Обработчик_ПослеЗаполненияТабличнойЧасти", СтруктураДанных.ДокументДляЗаписи, СтруктураДанных.ДокументОснование, СтруктураДанных.СтрокаНастройкиТЧ, СтруктураДанных.Таблица1С);
	
	// Возвращаем на место товары для серий.
	Если СтруктураДанных.ЭтоСерии Тогда
		Если ИмяТЧ_MS = "СерииФакт" ИЛИ ИмяТЧ_MS = "СерийныеНомераФакт" Тогда
			СтруктураДанных.ДанныеДокументаMS.Вставить("СтрокиФакт", СтруктураДанных.ТаблицаТоваровMS.Скопировать()); 
		КонецЕсли;
		Если ИмяТЧ_MS = "СерииПлан" ИЛИ ИмяТЧ_MS = "СерийныеНомераПлан" Тогда
			СтруктураДанных.ДанныеДокументаMS.Вставить("СтрокиПлан", СтруктураДанных.ТаблицаТоваровMS.Скопировать()); 
		КонецЕсли;
		СтруктураДанных.ТаблицаТоваровMS.Очистить();
	КонецЕсли;
	
	СтруктураДанных.ДокументДляЗаписи[ИмяТЧ_1С].Загрузить(СтруктураДанных.Таблица1С); 
	
КонецПроцедуры

Процедура ГлЯдро_ВыполнитьОбработчикЗагрузкиДокумента1С(ИмяОбработчика, Док1СРезультат, Док1СОснование, СтрокаНастройки, 
														ТЧ = Неопределено, СтрокаДокумента = Неопределено, СтруктураПоискаКлючаСвязи = Неопределено, ДанныеДокументаMS = Неопределено)
	
	Если ЗначениеЗаполнено(СтрокаНастройки[ИмяОбработчика]) Тогда
		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("СтрокаНастройки", СтрокаНастройки);
		СтруктураПараметров.Вставить("Док1СРезультат", Док1СРезультат);
		СтруктураПараметров.Вставить("Док1СОснование", Док1СОснование);
		СтруктураПараметров.Вставить("ТЧ", ТЧ);
		СтруктураПараметров.Вставить("СтрокаДокумента", СтрокаДокумента);
		СтруктураПараметров.Вставить("СтруктураПоискаКлючаСвязи", СтруктураПоискаКлючаСвязи);
		СтруктураПараметров.Вставить("ДанныеДокументаMS",ДанныеДокументаMS);
		СтруктураПараметров.Вставить("ТекущиеНастройкиMS",ТекущиеНастройкиMS);
		Попытка
		    Выполнить("ИнтеграционнаяОбработка."+СтрокаНастройки[ИмяОбработчика] + "(СтруктураПараметров)");
		Исключение
			//ОписаниеОшибки = ОписаниеОшибки();
			//Сообщить("Ошибка! Не удалось выполнить обработчик """ + СтрокаНастройки[ИмяОбработчика] + """. Причина: " + ОписаниеОшибки);
		КонецПопытки;
	КонецЕсли;
	
КонецПроцедуры

Процедура ГлЯдро_ЗаполнитьДанныеДляЗагрузкиРеквизитамиMS(СтруктураДанных)
	
	Если ТипЗнч(СтруктураДанных.ПравилаЗагрузки) <> Тип("ТаблицаЗначений") ИЛИ СтруктураДанных.ПравилаЗагрузки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ОтобранныеПравила = СтруктураДанных.ПравилаЗагрузки.НайтиСтроки(Новый Структура("ТипИсточника", "РеквизитMS"));
	
	ИсточникДанных = СтруктураДанных[СтруктураДанных.ИмяИсточникаДанных];
	Если СтруктураДанных.ИмяПриемникаДанных = "ДанныеДляЗагрузки_Строка" Тогда
		ИсточникДанных 	= ИсточникДанных.Получить(СтруктураДанных.ИндексСтрокиMS);
		ТаблицаMS 		= СтруктураДанных[СтруктураДанных.ИмяИсточникаДанных];
	Иначе
		ТаблицаMS = Неопределено;
	КонецЕсли;		
	
	Для Каждого Правило Из ОтобранныеПравила Цикл
		Если Правило.СпособСопоставления = "ПодборКоличества" Тогда
			Продолжить;
		КонецЕсли;
		ЗначениеРеквизитаДляЗагрузки = Неопределено;
		Если ЗначениеЗаполнено(Правило.ИмяПриемника) И ЗначениеЗаполнено(Правило.ИмяИсточника) Тогда
			// + ZHKN 03.10.2017
			Если Найти(Правило.СинонимИсточника, "Ключ связи для """) > 0 И 
				СтруктураДанных.МетаданныеДокументаПриемника.ТабличныеЧасти[Правило.ИмяИсточника].Реквизиты.Найти(Правило.ИмяПриемника) <> Неопределено И
				СтруктураДанных.СтрокаНастройкиТЧ.ОсновнаяТабличнаяЧасть Тогда 
				
				СтрокаТЧ = СтруктураДанных.ДанныеДляЗагрузкиПоКлючам.Добавить();
				СтрокаТЧ.Таблица1СИсточник = СтруктураДанных.МетаданныеПриемника.Имя;
				СтрокаТЧ.Таблица1СПриемник = Правило.ИмяИсточника;
				СтрокаТЧ.НазваниеРеквизитаКлюча = Правило.ИмяПриемника;
				СтрокаТЧ.ИндексСтрокиMS = СтруктураДанных.ИндексСтрокиMS;
				СтрокаТЧ.ИндексСтроки1С = 0;

				СтруктураДанных.ПоследнийИндексСтрокиДанныхДляЗагрузкиПоКлючам = СтруктураДанных.ДанныеДляЗагрузкиПоКлючам.Индекс(СтрокаТЧ);
			// - ZHKN 03.10.2017
			ИначеЕсли Правило.СпособСопоставления = "КакЕсть" Тогда 
				ЗначениеРеквизитаДляЗагрузки = ИсточникДанных[Правило.ИмяИсточника];
			Иначе
				Попытка
					//Трошин И.В. 20.11.2017 (
					ЗначениеРеквизита = ИсточникДанных[Правило.ИмяИсточника];
					Если НЕ ЗначениеЗаполнено(ЗначениеРеквизита) Тогда
						ЗначениеРеквизитаДляЗагрузки = Неопределено;
					Иначе
						ТипВсеСправочники = Справочники.ТипВсеСсылки();
						ТипВсеДокументы = Документы.ТипВсеСсылки();
						ТипВсеПВХ = ПланыВидовХарактеристик.ТипВсеСсылки();
						ТипВсеПеречисление = Перечисления.ТипВсеСсылки();
						ОбъектМетаданных = СтруктураДанных.МетаданныеПриемника.Реквизиты[Правило.ИмяПриемника];
						Для Каждого ТипРеквизитаПриемника Из ОбъектМетаданных.Тип.Типы() Цикл
							ЭтоСправочник = ТипВсеСправочники.СодержитТип(ТипРеквизитаПриемника);
							ЭтоДокумент = ТипВсеДокументы.СодержитТип(ТипРеквизитаПриемника);
							ЭтоПВХ = ТипВсеПВХ.СодержитТип(ТипРеквизитаПриемника);
							ЭтоПеречисление = ТипВсеПеречисление.СодержитТип(ТипРеквизитаПриемника);
							пОбъектМетаданных = Метаданные.НайтиПоТипу(ТипРеквизитаПриемника);
							Если пОбъектМетаданных = Неопределено Тогда
								Продолжить;
							КонецЕсли;
							ИмяОбъекта = пОбъектМетаданных.Имя;
							Если Правило.СпособСопоставления = "СтрокаGUID" Тогда
								Если ЭтоСправочник Тогда
									ЗначениеРеквизитаДляЗагрузки = Справочники[ИмяОбъекта].ПолучитьСсылку(Новый УникальныйИдентификатор(ЗначениеРеквизита));
								ИначеЕсли ЭтоДокумент Тогда
									ЗначениеРеквизитаДляЗагрузки = Документы[ИмяОбъекта].ПолучитьСсылку(Новый УникальныйИдентификатор(ЗначениеРеквизита));
								ИначеЕсли ЭтоПВХ Тогда
									ЗначениеРеквизитаДляЗагрузки = ПланыВидовХарактеристик[ИмяОбъекта].ПолучитьСсылку(Новый УникальныйИдентификатор(ЗначениеРеквизита));
								ИначеЕсли ЭтоПеречисление Тогда
									ЗначениеРеквизитаДляЗагрузки = Перечисления[ИмяОбъекта].ПолучитьСсылку(Новый УникальныйИдентификатор(ЗначениеРеквизита));
								КонецЕсли;
							ИначеЕсли Правило.СпособСопоставления = "Наименование" Тогда							
									Если ЭтоСправочник Тогда
										ЗначениеРеквизитаДляЗагрузки = Справочники[ИмяОбъекта].НайтиПоНаименованию(ЗначениеРеквизита, Истина);
									ИначеЕсли ЭтоПВХ Тогда
										ЗначениеРеквизитаДляЗагрузки = ПланыВидовХарактеристик[ИмяОбъекта].НайтиПоНаименованию(ЗначениеРеквизита, Истина);
									ИначеЕсли ЭтоПеречисление Тогда
										ЗначениеРеквизитаДляЗагрузки = ПредопределенноеЗначение("Перечисление." + ИмяОбъекта + "." + ЗначениеРеквизита);	
									КонецЕсли;
							ИначеЕсли Правило.СпособСопоставления = "Код" Тогда
								Если ЭтоСправочник Тогда
									ЗначениеРеквизитаДляЗагрузки = Справочники[ИмяОбъекта].НайтиПоКоду(ЗначениеРеквизита);
								ИначеЕсли ЭтоПВХ Тогда
									ЗначениеРеквизитаДляЗагрузки = ПланыВидовХарактеристик[ИмяОбъекта].НайтиПоКоду(ЗначениеРеквизита);	
								КонецЕсли;
							КонецЕсли;
							Если ТипЗнч(ЗначениеРеквизитаДляЗагрузки) = ТипРеквизитаПриемника
								И НЕ ЗначениеРеквизитаДляЗагрузки.ПолучитьОбъект() = Неопределено Тогда //Трошин И.В. 22.01.2018 Критично для УТ 10.3 и УПП 1.3 т.к. реквизит СкладОрдер пытается получить документ.
								Прервать;
							КонецЕсли;
						КонецЦикла;
					КонецЕсли;
					//Трошин И.В. 20.11.2017 )
				Исключение
					СообщениеОбОшибках = СтруктураДанных.СообщениеОбОшибках + Символы.ВК + "Не удалось получить значение реквизита Mobile SMARTS [" + Правило.СинонимИсточника + "]";
					СтруктураДанных.Вставить("СообщениеОбОшибках", СообщениеОбОшибках);
				КонецПопытки;
			КонецЕсли;

			//Если СтруктураДанных.СтрокаНастройкиТЧ.СопоставлятьСОсновнойТЧ Тогда
			//	
			//	Отбор = Новый Структура();
			//	Отбор.Вставить("Таблица1СПриемник", СтруктураДанных.МетаданныеПриемника.Имя);
			//	Отбор.Вставить("ИндексСтрокиMS", СтруктураДанных.ИндексСтрокиMS);
			//	
			//	СтрокиТЧ = СтруктураДанных.ДанныеДляЗагрузкиПоКлючам.НайтиСтроки(Отбор);
			//	Если СтрокиТЧ.Количество() > 0 Тогда
			//		СтрокаТЧ = СтрокиТЧ[0];
			//		СтрокаОсновнойТЧ = СтруктураДанных.ДокументДляЗаписи.Товары.Получить(СтрокаТЧ.ИндексСтроки1С);
			//		СтруктураДанных.СтрокаДокумента1С.КлючСвязи = СтрокаОсновнойТЧ.КлючСвязи;
			//	КонецЕсли;
			//КонецЕсли;
			
		КонецЕсли;	
		СтруктураДанных[СтруктураДанных.ИмяПриемникаДанных].Вставить(Правило.ИмяПриемника, ЗначениеРеквизитаДляЗагрузки);
		// Временное решение. если в таблице нет колонки с именем приемника, например, "АкцизнаяМарка", то создаем её и помещаем
		// в неё найденное значение реквизита
		// это необходимо для дальнейшей возможности поиска по таблице MS подходящей строки из 1С
		Если ТаблицаMS <> Неопределено Тогда
			Если ТаблицаMS.Колонки.Найти(Правило.ИмяПриемника) = Неопределено Тогда
				ТаблицаMS.Колонки.Добавить(Правило.ИмяПриемника);
			КонецЕсли;	
			ИсточникДанных[Правило.ИмяПриемника] = ЗначениеРеквизитаДляЗагрузки;
		КонецЕсли;  		
	КонецЦикла;
	
КонецПроцедуры

Процедура ГлЯдро_ЗаполнитьДанныеДляЗагрузкиВычислимымиПолями(СтруктураДанных)
	
	Если ТипЗнч(СтруктураДанных.ПравилаЗагрузки) <> Тип("ТаблицаЗначений") ИЛИ СтруктураДанных.ПравилаЗагрузки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ОтобранныеПравила = СтруктураДанных.ПравилаЗагрузки.НайтиСтроки(Новый Структура("ТипИсточника", "ВычислимоеПоле"));
	
	ИсточникДанных = СтруктураДанных[СтруктураДанных.ИмяИсточникаДанных];
	Если СтруктураДанных.ИмяПриемникаДанных = "ДанныеДляЗагрузки_Строка" Тогда
		ИсточникДанных = ИсточникДанных.Получить(СтруктураДанных.ИндексСтрокиMS);
	КонецЕсли;
	
	Для Каждого Правило Из ОтобранныеПравила Цикл
		ЗначениеРеквизитаДляЗагрузки = "";
		Если ЗначениеЗаполнено(Правило.ИмяПриемника) И ЗначениеЗаполнено(Правило.ИмяИсточника) Тогда
			Попытка
				ЗначениеРеквизитаДляЗагрузки = ИсточникДанных[Правило.ИмяИсточника];
			Исключение	
				СообщениеОбОшибках = СтруктураДанных.СообщениеОбОшибках + Символы.ВК + "Не удалось получить значение вычислимого поля [" + Правило.СинонимИсточника + "]";
				СтруктураДанных.Вставить("СообщениеОбОшибках", СообщениеОбОшибках);
			КонецПопытки;
			СтруктураДанных[СтруктураДанных.ИмяПриемникаДанных].Вставить(Правило.ИмяПриемника, ЗначениеРеквизитаДляЗагрузки);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ГлЯдро_ЗаполнитьДанныеДляЗагрузкиПроизвольнымиЗначениями(СтруктураДанных)
	
	Если ТипЗнч(СтруктураДанных.ПравилаЗагрузки) <> Тип("ТаблицаЗначений") ИЛИ СтруктураДанных.ПравилаЗагрузки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ОтобранныеПравила = СтруктураДанных.ПравилаЗагрузки.НайтиСтроки(Новый Структура("ТипИсточника", "ПроизвольноеЗначение"));
	
	Для Каждого Правило Из ОтобранныеПравила Цикл
		ЗначениеРеквизитаДляЗагрузки = "";
		Если ЗначениеЗаполнено(Правило.ИмяПриемника) И ЗначениеЗаполнено(Правило.ЗначениеИсточника) Тогда
			Попытка
				ЗначениеРеквизитаДляЗагрузки = Правило.ЗначениеИсточника;
			Исключение	
				СообщениеОбОшибках = СтруктураДанных.СообщениеОбОшибках + Символы.ВК + "Не удалось произвольное значение для реквизита [" + Правило.ИмяПриемника + "]";
				СтруктураДанных.Вставить("СообщениеОбОшибках", СообщениеОбОшибках);
			КонецПопытки;
			СтруктураДанных[СтруктураДанных.ИмяПриемникаДанных].Вставить(Правило.ИмяПриемника, ЗначениеРеквизитаДляЗагрузки);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ГлЯдро_ЗаполнитьДанныеДляЗагрузкиГлобальнымиПараметрами(СтруктураДанных)
	
	Если ТипЗнч(СтруктураДанных.ПравилаЗагрузки) <> Тип("ТаблицаЗначений") ИЛИ СтруктураДанных.ПравилаЗагрузки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ОтобранныеПравила = СтруктураДанных.ПравилаЗагрузки.НайтиСтроки(Новый Структура("ТипИсточника", "ГлобальныйПараметр"));
	
	Для Каждого Правило Из ОтобранныеПравила Цикл
		ЗначениеРеквизитаДляЗагрузки = "";
		Если ЗначениеЗаполнено(Правило.ИмяИсточника) И ЗначениеЗаполнено(Правило.ИмяПриемника) И ТипЗнч(СтруктураДанных.ЗначенияПараметров) = Тип("ТаблицаЗначений") Тогда
			НайденныйГП = СтруктураДанных.ЗначенияПараметров.Найти(Правило.ИмяИсточника);
			Если НайденныйГП <> Неопределено Тогда
				ЗначениеРеквизитаДляЗагрузки = НайденныйГП.Значение;
			Иначе
				СообщениеОбОшибках = СтруктураДанных.СообщениеОбОшибках + Символы.ВК + "Не удалось получить значение глобального параметра [" + Правило.СинонимИсточника + "]";
				СтруктураДанных.Вставить("СообщениеОбОшибках", СообщениеОбОшибках);
			КонецЕсли;
			СтруктураДанных[СтруктураДанных.ИмяПриемникаДанных].Вставить(Правило.ИмяПриемника, ЗначениеРеквизитаДляЗагрузки);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ГлЯдро_ЗаполнитьДанныеДляЗагрузкиПроизвольнымиКодами(СтруктураДанных)
	
	Если ТипЗнч(СтруктураДанных.ПравилаЗагрузки) <> Тип("ТаблицаЗначений") ИЛИ СтруктураДанных.ПравилаЗагрузки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураПеременных = Новый Структура;
	СтруктураПеременных.Вставить("ОбъектДокумент1С", СтруктураДанных.ДокументДляЗаписи);
	СтруктураПеременных.Вставить("СсылкаДокументОснование1С", СтруктураДанных.ДокументОснование);
	СтруктураПеременных.Вставить("ДанныеДляЗагрузки_Шапка", СтруктураДанных.ДанныеДляЗагрузки_Шапка);
	Если СтруктураДанных.ИмяПриемникаДанных = "ДанныеДляЗагрузки_Строка" Тогда
		СтруктураПеременных.Вставить("СтрокаТЧДокумента1С", СтруктураДанных.СтрокаДокумента1С);
		СтруктураПеременных.Вставить("ДанныеДляЗагрузки_Строка", СтруктураДанных.ДанныеДляЗагрузки_Строка);
	КонецЕсли;
	
	Если СтруктураДанных.ИмяПриемникаДанных = "ДанныеДляЗагрузки_Шапка" Тогда
		ПроизвольныеКоды = СтруктураДанных.ПроизвольныеКодыШапки;
	ИначеЕсли СтруктураДанных.ИмяПриемникаДанных = "ДанныеДляЗагрузки_Строка" Тогда
		ПроизвольныеКоды = СтруктураДанных.ПроизвольныеКодыТабличнойЧасти;
	КонецЕсли;
	
	ОтобранныеПравила = СтруктураДанных.ПравилаЗагрузки.НайтиСтроки(Новый Структура("ТипИсточника", "ПроизвольныйКод"));
	
	Для Каждого Правило Из ОтобранныеПравила Цикл
		ЗначениеРеквизитаДляЗагрузки = "";
		Если ЗначениеЗаполнено(Правило.ИмяИсточника) И ЗначениеЗаполнено(Правило.ИмяПриемника) И ТипЗнч(ПроизвольныеКоды) = Тип("ТаблицаЗначений") Тогда
			НайденныйПК = ПроизвольныеКоды.Найти(Правило.ИмяИсточника);
			Если НайденныйПК <> Неопределено Тогда
				РезультатВыполненияКода = ГлЯдро_ВыполнитьПроизвольныйКод(НайденныйПК.ТекстПроизвольногоКода, СтруктураПеременных);
				Если РезультатВыполненияКода.Статус Тогда
					ЗначениеРеквизитаДляЗагрузки = РезультатВыполненияКода.Данные;
				Иначе
					СообщениеОбОшибках = СтруктураДанных.СообщениеОбОшибках + Символы.ВК + "Не удалось выполнить произвольный код [" + Правило.СинонимИсточника + "]";
					СтруктураДанных.Вставить("СообщениеОбОшибках", СообщениеОбОшибках);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		СтруктураДанных[СтруктураДанных.ИмяПриемникаДанных].Вставить(Правило.ИмяПриемника, ЗначениеРеквизитаДляЗагрузки);
		СтруктураПеременных[СтруктураДанных.ИмяПриемникаДанных].Вставить(Правило.ИмяПриемника, ЗначениеРеквизитаДляЗагрузки);
	КонецЦикла;
	
КонецПроцедуры

Процедура ГлЯдро_НайтиПодходящуюСтрокуТаблицы1СПоКлючам(СтруктураДанных)
	
	ТекущаяСтрокаMS = СтруктураДанных.ТаблицаMS.Получить(СтруктураДанных.ИндексСтрокиMS);		
	
	// Если мы дошли до конца таблицы 1С и не нашли подходящую строку либо, если правила поиска отсутствуют, то всегда создаем новую строку 1С
	Если СтруктураДанных.ИндексСтрокиДляПоиска >= СтруктураДанных.Таблица1С.Количество() ИЛИ НЕ СтруктураДанных.ПравилаПоиска.Количество() Тогда
		ЭтоПодходящаяСтрока = Ложь;
	Иначе	
	
		Для ТекущийИндекс = СтруктураДанных.ИндексСтрокиДляПоиска По СтруктураДанных.Таблица1С.Количество() - 1 Цикл
			
			ЭтоПодходящаяСтрока = Истина;
			ТекущаяСтрока1С = СтруктураДанных.Таблица1С.Получить(ТекущийИндекс);
			
			Для Каждого СтрокаПравила Из СтруктураДанных.ПравилаПоиска Цикл
				
				// если в таблице MS нашли колонку с именем приемника, то используем данные из неё, например, "АкцизнаяМарка" вместо "АлкоПДФ"
				// + дополнение: если поле "имя приемника" (например, "Номенклатура" не найдено среди выч.полей, также используем имя приемника, 
				// т.к. возможна ситуация, когда выч.поле "Номенклатура" (источник) - это алкоголь, а "НоменклатураСоответствие" (приемник) - обычная ном-ра
				Если СтруктураДанных.ТаблицаMS.Колонки.Найти(СтрокаПравила.ИмяПриемника) <> Неопределено И ВычислимыеПоля.СписокПолейMS.НайтиПоЗначению(СтрокаПравила.ИмяПриемника) = Неопределено Тогда
					ЗначениеMSДляСравнения = ТекущаяСтрокаMS[СтрокаПравила.ИмяПриемника];
				Иначе
					ЗначениеMSДляСравнения = ТекущаяСтрокаMS[СтрокаПравила.ИмяИсточника];
				КонецЕсли;	
				
				Если СтрокаПравила.ПравилоПоиска = "Равно" Тогда
					Если НЕ (ТекущаяСтрока1С[СтрокаПравила.ИмяПриемника] = ЗначениеMSДляСравнения 
							ИЛИ (НЕ ЗначениеЗаполнено(ТекущаяСтрока1С[СтрокаПравила.ИмяПриемника]) И НЕ ЗначениеЗаполнено(ЗначениеMSДляСравнения))) Тогда
						ЭтоПодходящаяСтрока = Ложь;
						Прервать;
					КонецЕсли;
				ИначеЕсли СтрокаПравила.ПравилоПоиска = "РавноПусто1С" Тогда
					Если НЕ (ТекущаяСтрока1С[СтрокаПравила.ИмяПриемника] = ЗначениеMSДляСравнения 
							ИЛИ НЕ ЗначениеЗаполнено(ТекущаяСтрока1С[СтрокаПравила.ИмяПриемника])) Тогда
						ЭтоПодходящаяСтрока = Ложь;
						Прервать;
					КонецЕсли;
				ИначеЕсли СтрокаПравила.ПравилоПоиска = "РавноПустоТСД" Тогда
					Если НЕ (ТекущаяСтрока1С[СтрокаПравила.ИмяПриемника] = ЗначениеMSДляСравнения 
							ИЛИ НЕ ЗначениеЗаполнено(ЗначениеMSДляСравнения)) Тогда
						ЭтоПодходящаяСтрока = Ложь;
						Прервать;
					КонецЕсли;
				КонецЕсли;
				
				Если НЕ ЭтоПодходящаяСтрока Тогда
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
			Если ЭтоПодходящаяСтрока Тогда
				СтруктураДанных.Вставить("ИндексСтроки1С", ТекущийИндекс);
				СтруктураДанных.Вставить("ЭтоНоваяСтрока1С", Ложь);
				СтруктураДанных.Вставить("ИндексСтрокиДляПоиска", ТекущийИндекс + 1);
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Если НЕ ЭтоПодходящаяСтрока Тогда
		НоваяСтрока = СтруктураДанных.Таблица1С.Добавить();
		СтруктураДанных.Вставить("ИндексСтроки1С", СтруктураДанных.Таблица1С.Индекс(НоваяСтрока));
		СтруктураДанных.Вставить("ЭтоНоваяСтрока1С", Истина);
		СтруктураДанных.Вставить("ИндексСтрокиДляПоиска", 0);
	КонецЕсли;
	
КонецПроцедуры

Процедура ГлЯдро_ЗаполнитьАгрегатноеЗначение(СтруктураДанных)
	
	Если СтруктураДанных.Агрегирование_ЭтоКлючСвязи Тогда
		// 1. Поиск подходящего ключа в 1С
		
		// 2. Поиск подходящих строк в Таблице товаров MS
		
		// 3. Замена ключей
	Иначе
		Если ТипЗнч(СтруктураДанных.СтрокаДокумента1С[СтруктураДанных.Агрегирование_Колонка1С]) = Тип("Число")
			И ТипЗнч(СтруктураДанных.ДанныеДляЗагрузки_Строка[СтруктураДанных.Агрегирование_Колонка1С]) = Тип("Число") Тогда
			Агрегат = СтруктураДанных.СтрокаДокумента1С[СтруктураДанных.Агрегирование_Колонка1С] + СтруктураДанных.ДанныеДляЗагрузки_Строка[СтруктураДанных.Агрегирование_Колонка1С];
			СтруктураДанных.СтрокаДокумента1С[СтруктураДанных.Агрегирование_Колонка1С] = Агрегат;
		ИначеЕсли ТипЗнч(СтруктураДанных.СтрокаДокумента1С[СтруктураДанных.Агрегирование_Колонка1С]) = Тип("Строка")
			И ТипЗнч(СтруктураДанных.ДанныеДляЗагрузки_Строка[СтруктураДанных.Агрегирование_Колонка1С]) = Тип("Строка") Тогда
			Разделитель = ?(ЗначениеЗаполнено(СтруктураДанных.СтрокаДокумента1С[СтруктураДанных.Агрегирование_Колонка1С]), ", ", "");
			Агрегат = СтруктураДанных.СтрокаДокумента1С[СтруктураДанных.Агрегирование_Колонка1С] + Разделитель + СтруктураДанных.ДанныеДляЗагрузки_Строка[СтруктураДанных.Агрегирование_Колонка1С];
			СтруктураДанных.СтрокаДокумента1С[СтруктураДанных.Агрегирование_Колонка1С] = Агрегат;
		ИначеЕсли ТипЗнч(СтруктураДанных.СтрокаДокумента1С[СтруктураДанных.Агрегирование_Колонка1С]) = Тип("Булево")
			И ТипЗнч(СтруктураДанных.ДанныеДляЗагрузки_Строка[СтруктураДанных.Агрегирование_Колонка1С]) = Тип("Булево") Тогда			
			Агрегат = СтруктураДанных.ДанныеДляЗагрузки_Строка[СтруктураДанных.Агрегирование_Колонка1С];
			СтруктураДанных.СтрокаДокумента1С[СтруктураДанных.Агрегирование_Колонка1С] = Агрегат;			
		Иначе
			// если поле непримитивного типа, то просто заменяем его значение в строке 1С на значение, полученное из MS
			Агрегат = СтруктураДанных.ДанныеДляЗагрузки_Строка[СтруктураДанных.Агрегирование_Колонка1С];
			СтруктураДанных.СтрокаДокумента1С[СтруктураДанных.Агрегирование_Колонка1С] = Агрегат;			 
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ГлЯдро_ПодготовитьТаблицуСерий(СтруктураДанных, ИмяТЧ_MS)
	
	ЗагружаемыеПоля = СтруктураДанных.ПравилаЗагрузки.НайтиСтроки(Новый Структура("Загружать", Истина));
	СтруктураДанных.Вставить("ТаблицаMS", Новый ТаблицаЗначений);
	СтруктураДанных.ТаблицаТоваровMS.Колонки.Добавить("КлючСвязиСерий");
	СтруктураДанных.ТаблицаMS.Колонки.Добавить("КлючСвязиСерий");
	Для Каждого ЗагружаемоеПоле Из ЗагружаемыеПоля Цикл
		СтруктураДанных.ТаблицаMS.Колонки.Добавить(ЗагружаемоеПоле.ИмяИсточника);
	КонецЦикла;
	
	Если ИмяТЧ_MS = "СерииФакт" ИЛИ ИмяТЧ_MS = "СерииПлан" Тогда
		ИмяПоляСерии = "Серия";
	ИначеЕсли ИмяТЧ_MS = "СерийныеНомераФакт" ИЛИ ИмяТЧ_MS = "СерийныеНомераПлан" Тогда
		ИмяПоляСерии = "СН";
	Иначе
		Возврат;
	КонецЕсли;
	
	Если СтруктураДанных.ТаблицаТоваровMS.Колонки.Найти(ИмяПоляСерии) = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого СтрокаТаблицы1С Из СтруктураДанных.ТаблицаТоваровMS Цикл
		Если ЗначениеЗаполнено(СтрокаТаблицы1С.ИмяПоляСерии) Тогда
			НоваяСтрока = СтруктураДанных.ТаблицаMS.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы1С);
			НовыйКлюч = Новый УникальныйИдентификатор();
			НоваяСтрока.КлючСвязиСерий = НовыйКлюч;
			СтрокаТаблицы1С.КлючСвязиСерий = НовыйКлюч;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ГлобальныйКонтекст_Документы_1С_ВспомогательныеМеханизмы

Функция ГлЯдро_ПолучитьТипДокументаПоСсылке(СсылкаДокумента) Экспорт
	
	Если ТипЗнч(СсылкаДокумента) = Тип("Массив") Тогда
		Возврат СсылкаДокумента[0].Метаданные().Имя;	
	Иначе		
		Возврат СсылкаДокумента.Метаданные().Имя;
	КонецЕсли;

КонецФункции

Функция ГлЯдро_ПолучитьКомпоновкуСКДДляОтбораДокументов1С(ИмяДокумента, ПараметрыУзлов) Экспорт
	
	ИмяТабличнойЧастиДокумента = ГлЯдро_ПолучитьИмяТабличнойЧастиДокумента(ИмяДокумента);
	
	СхемаСКД = Новый СхемаКомпоновкиДанных;
	
	ИсточникСКД = СхемаСКД.ИсточникиДанных.Добавить();
	ИсточникСКД.Имя = "ТекущаяБаза";
	ИсточникСКД.СтрокаСоединения = "";
	ИсточникСКД.ТипИсточникаДанных = "Local";
	                                        
	ДанныеСКД = СхемаСКД.НаборыДанных.Добавить(Тип("НаборДанныхЗапросСхемыКомпоновкиДанных"));
	ДанныеСКД.Имя = "ЗапросСКД";
	ДанныеСКД.ИсточникДанных = ИсточникСКД.Имя;
	ДанныеСКД.АвтоЗаполнениеДоступныхПолей = Истина;
	
	Если ИмяТабличнойЧастиДокумента <> Неопределено Тогда
		ДанныеСКД.Запрос = 
		"ВЫБРАТЬ
		|	ИмяДокумента.*,
		|	ТабличнаяЧасть.НомерСтроки КАК Количество
		|ИЗ
		|	Документ.ИмяДокумента КАК ИмяДокумента
		|	ЛЕВОЕ СОЕДИНЕНИЕ Документ.ИмяДокумента.ИмяТабличнойЧастиДокумента КАК ТабличнаяЧасть
		|	ПО ИмяДокумента.Ссылка = ТабличнаяЧасть.Ссылка
		|ГДЕ
		|	НАЧАЛОПЕРИОДА(ИмяДокумента.Дата, ДЕНЬ) >= ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(&ТекущаяДата, ДЕНЬ), ДЕНЬ, -&ГлубинаОтбора)
		|	И ВЫБОР
		|			КОГДА ВЫРАЗИТЬ(&КомментарийОтсечения КАК СТРОКА(200)) = """"
		|				ТОГДА ИСТИНА
		|			ИНАЧЕ НЕ ВЫРАЗИТЬ(ИмяДокумента.Комментарий КАК СТРОКА(200)) ПОДОБНО &КомментарийОтсечения
		|		КОНЕЦ";
		
		ДанныеСКД.Запрос = СтрЗаменить(ДанныеСКД.Запрос, "ИмяТабличнойЧастиДокумента", ИмяТабличнойЧастиДокумента);

	Иначе 
		ДанныеСКД.Запрос = 
		"ВЫБРАТЬ
		|	ИмяДокумента.*,
		|	0 КАК Количество
		|ИЗ
		|	Документ.ИмяДокумента КАК ИмяДокумента
		|ГДЕ
		|	НАЧАЛОПЕРИОДА(ИмяДокумента.Дата, ДЕНЬ) >= ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(&ТекущаяДата, ДЕНЬ), ДЕНЬ, -&ГлубинаОтбора)
		|	И ВЫБОР
		|			КОГДА ВЫРАЗИТЬ(&КомментарийОтсечения КАК СТРОКА(200)) = """"
		|				ТОГДА ИСТИНА
		|			ИНАЧЕ НЕ ВЫРАЗИТЬ(ИмяДокумента.Комментарий КАК СТРОКА(200)) ПОДОБНО &КомментарийОтсечения
		|		КОНЕЦ";
	КонецЕсли;
	
	ДанныеСКД.Запрос = СтрЗаменить(ДанныеСКД.Запрос, "ИмяДокумента", ИмяДокумента);
	
	ПолеИтога = СхемаСКД.ПоляИтога.Добавить();
	ПолеИтога.Выражение = "Максимум(Количество)";
	ПолеИтога.ПутьКДанным = "Количество";
	
	КомпоновщикСКД = Новый КомпоновщикНастроекКомпоновкиДанных;
	КомпоновщикСКД.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаСКД));
	
	// Предопределенные параметры запроса
	Для Каждого ПараметрКомпоновщика Из КомпоновщикСКД.Настройки.ПараметрыДанных.ДоступныеПараметры.Элементы Цикл
		ПараметрСхемыКомпоновкиДанных = СхемаСКД.Параметры.Добавить();
		ЗаполнитьЗначенияСвойств(ПараметрСхемыКомпоновкиДанных, ПараметрКомпоновщика);
		ПараметрСхемыКомпоновкиДанных.ВключатьВДоступныеПоля   = Ложь;
		ПараметрСхемыКомпоновкиДанных.Имя                      = Строка(ПараметрКомпоновщика.Параметр);
		Если Строка(ПараметрКомпоновщика.Параметр) = "ТекущаяДата" Тогда
			ПараметрСхемыКомпоновкиДанных.ОграничениеИспользования = Истина;
			ПараметрСхемыКомпоновкиДанных.Значение = ТекущаяДата();
		КонецЕсли;
		Если Строка(ПараметрКомпоновщика.Параметр) = "ГлубинаОтбора" Тогда
			ПараметрСхемыКомпоновкиДанных.Значение = 0;
		КонецЕсли;
		ПараметрСхемыКомпоновкиДанных.Использование = ИспользованиеПараметраКомпоновкиДанных.Всегда;
	КонецЦикла;
	
	// Определяемые общие параметры
	Если НЕ ПараметрыУзлов = Ложь Тогда
		Для Каждого ПараметрУзла Из ПараметрыУзлов Цикл
			ПараметрСхемыКомпоновкиДанных = СхемаСКД.Параметры.Добавить();
			ПараметрСхемыКомпоновкиДанных.Имя                      = ПараметрУзла.ID_Параметра;
			ПараметрСхемыКомпоновкиДанных.Заголовок                = СокрЛП(ПараметрУзла.Наименование);
			ПараметрСхемыКомпоновкиДанных.ВключатьВДоступныеПоля   = Истина;
			ПараметрСхемыКомпоновкиДанных.ОграничениеИспользования = Истина;
			ПараметрСхемыКомпоновкиДанных.Использование            = ИспользованиеПараметраКомпоновкиДанных.Авто;
			ПараметрСхемыКомпоновкиДанных.ТипЗначения.Типы().Добавить(ТипЗнч(ПараметрУзла.Значение));
			ПараметрСхемыКомпоновкиДанных.Значение                 = ПараметрУзла.Значение;
		КонецЦикла;
	КонецЕсли;
	
	Возврат СхемаСКД;
	
КонецФункции

Функция ГлЯдро_ОтобратьДокументы1СЧерезСКД(НастройкиКомпоновки, ТипДокумента1С, ПараметрыУзлов,СписокПолей = Неопределено) Экспорт		
	
	СхемаСКД = ГлЯдро_ПолучитьКомпоновкуСКДДляОтбораДокументов1С(ТипДокумента1С, ПараметрыУзлов);
	
	КомпоновщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных;
	КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаСКД));
	КомпоновщикНастроек.ЗагрузитьНастройки(НастройкиКомпоновки);
	РезультатНастройкиКомпоновки = КомпоновщикНастроек.ПолучитьНастройки();
	
	РезультатНастройкиКомпоновки.ПараметрыВывода.УстановитьЗначениеПараметра("ВертикальноеРасположениеОбщихИтогов", РасположениеИтоговКомпоновкиДанных.Нет);
	
	Если СписокПолей  <> Неопределено 
		И СписокПолей.Количество() > 0 Тогда
		
		Если СписокПолей.НайтиПоЗначению("Ссылка") = Неопределено Тогда // Временное решение
			СписокПолей.Добавить("Ссылка", "Ссылка");
		КонецЕсли;
		
		Для Каждого Поле Из СписокПолей Цикл
			ВыбранноеПоле = РезультатНастройкиКомпоновки.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
			ВыбранноеПоле.Заголовок = Поле.Представление;
			ВыбранноеПоле.Использование = Истина;
			ВыбранноеПоле.Поле = Новый ПолеКомпоновкиДанных(Поле.Значение);	
		КонецЦикла;
		
		ГруппировкаДокументов = РезультатНастройкиКомпоновки.Структура.Добавить(Тип("ГруппировкаКомпоновкиДанных"));
		Для Каждого Поле Из СписокПолей Цикл
			Если Поле.Значение = "Количество" Тогда
				Продолжить;
			КонецЕсли;
			ПолеГруппировки = ГруппировкаДокументов.ПоляГруппировки.Элементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));    
			ПолеГруппировки.Использование = Истина;
			ПолеГруппировки.Поле = Новый ПолеКомпоновкиДанных(Поле.Значение);	
		КонецЦикла;

	Иначе
		ВыбранноеПоле = РезультатНастройкиКомпоновки.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
		ВыбранноеПоле.Заголовок = "Ссылка";
		ВыбранноеПоле.Использование = Истина;
		ВыбранноеПоле.Поле = Новый ПолеКомпоновкиДанных("Ссылка");
		ВыбранноеПоле = РезультатНастройкиКомпоновки.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
		ВыбранноеПоле.Заголовок = "Дата";
		ВыбранноеПоле.Использование = Истина;
		ВыбранноеПоле.Поле = Новый ПолеКомпоновкиДанных("Дата");
		ВыбранноеПоле = РезультатНастройкиКомпоновки.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
		ВыбранноеПоле.Заголовок = "Номер";
		ВыбранноеПоле.Использование = Истина;		
		ВыбранноеПоле.Поле = Новый ПолеКомпоновкиДанных("Номер");
		ВыбранноеПоле = РезультатНастройкиКомпоновки.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
		ВыбранноеПоле.Заголовок = "Количество";
		ВыбранноеПоле.Использование = Истина;
		ВыбранноеПоле.Поле = Новый ПолеКомпоновкиДанных("Количество");	
		
		ГруппировкаДокументов = РезультатНастройкиКомпоновки.Структура.Добавить(Тип("ГруппировкаКомпоновкиДанных"));
		ПолеГруппировки = ГруппировкаДокументов.ПоляГруппировки.Элементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));    
		ПолеГруппировки.Использование = Истина;
		ПолеГруппировки.Поле = Новый ПолеКомпоновкиДанных("Ссылка");
		ПолеГруппировки = ГруппировкаДокументов.ПоляГруппировки.Элементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));    
		ПолеГруппировки.Использование = Истина;
		ПолеГруппировки.Поле = Новый ПолеКомпоновкиДанных("Дата");
		ПолеГруппировки = ГруппировкаДокументов.ПоляГруппировки.Элементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));    
		ПолеГруппировки.Использование = Истина;
		ПолеГруппировки.Поле = Новый ПолеКомпоновкиДанных("Номер");
	КонецЕсли;
	
	АвтоПоле = ГруппировкаДокументов.Выбор.Элементы.Добавить(Тип("АвтоВыбранноеПолеКомпоновкиДанных"));
	АвтоПоле.Использование = Истина;	
	
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаСКД, РезультатНастройкиКомпоновки,,,Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
	
	//ТекстЗапроса = МакетКомпоновки.НаборыДанных.ЗапросСКД.Запрос;
	//	
	//Запрос = Новый Запрос(ТекстЗапроса);
	//Для Каждого Параметр Из МакетКомпоновки.ЗначенияПараметров Цикл
	//	Запрос.УстановитьПараметр(Параметр.Имя, Параметр.Значение);
	//КонецЦикла;
	//
	//Результат = Запрос.Выполнить().Выгрузить();
	
	// Если в СКД используются группировки и ресурсы, то нужно использовать процессоры компоновки и вывода,
	// иначе выгрузятся просто детальные записи
	ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновки.Инициализировать(МакетКомпоновки);
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	Результат = ПроцессорВывода.Вывести(ПроцессорКомпоновки);	
	
	Возврат Результат;

КонецФункции

Функция ГлЯдро_ОтобратьДокументы1СЧерезПроизвольныйОтбор(ID_ПроизвольногоОтбора) Экспорт
	
	ПроизвольныеОтборыДокументов = ГлЯдро_ПолучитьИзКэшаНастройкуSMARTS("ПроизвольныеОтборыДокументов");
	
	Если ТипЗнч(ПроизвольныеОтборыДокументов) <> Тип("ТаблицаЗначений") Тогда
		Возврат Неопределено;
	КонецЕсли;	
	
	НайденнаяСтрока = ПроизвольныеОтборыДокументов.Найти(ID_ПроизвольногоОтбора, "ID_ПроизвольногоОтбора");
	
	Если НайденнаяСтрока = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли; 							
	
	ТекстПроизвольногоОтбора = СтрЗаменить(НайденнаяСтрока.ТекстПроизвольногоОтбора, Символы.ВК, "");
	ТекстПроизвольногоОтбора = СтрЗаменить(ТекстПроизвольногоОтбора, "¶", "");
	
	Результат = Неопределено;
	
	Попытка
		Выполнить(ТекстПроизвольногоОтбора);													
	Исключение						
		Сообщить(ОписаниеОшибки());
		Возврат Неопределено;
	КонецПопытки; 
	
	Если ТипЗнч(Результат) <> Тип("Запрос") Тогда
		Возврат Неопределено;
	КонецЕсли; 							
	
	Попытка
		ТаблицаЗначений = Результат.Выполнить().Выгрузить();
	Исключение
		ТаблицаЗначений = Неопределено;
	КонецПопытки; 	
	
	Возврат ТаблицаЗначений;
	
КонецФункции	

Функция ГлЯдро_ПолучитьСсылкуНаДокументПоИд(ТипДокумента, ИдДокументаМС)
	
	СсылкаНаДокумент = Неопределено;
	Попытка
		ИдДокументаОснования = ИдДокументаМС;
		Если Найти(ИдДокументаОснования,"#")>0  Тогда
			ИдДокументаОснования = Лев(ИдДокументаОснования, Найти(ИдДокументаОснования,"#")-1 );
		КонецЕсли;
		СсылкаНаДокумент = Документы[ТипДокумента].ПолучитьСсылку(Новый УникальныйИдентификатор(ИдДокументаОснования));				
	Исключение
	КонецПопытки;		
	
	Возврат СсылкаНаДокумент;
КонецФункции

Функция ГлЯдро_ПолучитьИмяТабличнойЧастиДокумента(ИмяДокумента) Экспорт
	
	ИмяТабличнойЧасти = Неопределено;
	МетаданныеТабличныеЧастиДокумента = СтруктураМетаданных.Документы1С[ИмяДокумента].ТабличныеЧасти;
	
	Если МетаданныеТабличныеЧастиДокумента.Свойство("Товары") Тогда // Сначала попробуем найти самое используемое название в конфигурациях
		ИмяТабличнойЧасти = "Товары";
		
	ИначеЕсли МетаданныеТабличныеЧастиДокумента.Свойство("Состав") Тогда // Используется в Асторе
		ИмяТабличнойЧасти = "Состав";
		
	ИначеЕсли МетаданныеТабличныеЧастиДокумента.Количество() > 0 Тогда // Если среди популярных названий не нашлось, проверим, есть ли вообще ТЧ у документа и вернем первую попавшуюся
		Для Каждого КлючИЗначение Из МетаданныеТабличныеЧастиДокумента Цикл
			ИмяТабличнойЧасти = КлючИЗначение.Ключ;
			Прервать;
		КонецЦикла
	КонецЕсли;
	
	Возврат ИмяТабличнойЧасти;
КонецФункции

Функция ГлЯдро_ПолучитьТаблицуАлкогольнойПродукции(Запрос, НастройкаБП, Документ1С);
	Попытка
		Возврат  Документы.ТТНВходящаяЕГАИС.ВходящиеАкцизныеМарки(Документ1С)
	Исключение
		
	КонецПопытки;	
КонецФункции	

Функция ГлЯдро_ПолучитьАгрегатнуюФункцию(ПолеАгрегирования)
			
	Если ПолеАгрегирования.Тип.СодержитТип(Тип("Число")) Тогда
		Результат = "Сумма";
	ИначеЕсли ПолеАгрегирования.Тип.СодержитТип(Тип("Строка")) Тогда
		Результат = "Конкатенация";	
	Иначе			
		Результат = "Замена";
	КонецЕсли; 
	
	Возврат Результат;
	
КонецФункции	

#КонецОбласти

#КонецОбласти

#Область ГлобальныйКонтекст_УниверсальныеМеханизмы

Функция ГлЯдро_ПолучитьМакетОбработки(ИмяМакета) Экспорт
	Возврат ПолучитьМакет(ИмяМакета);
КонецФункции

Функция ГлЯдро_РазложитьСтрокуВМассивПодстрок(Знач Стр, Разделитель = ",") Экспорт
	
	МассивСтрок = Новый Массив();
	Если Разделитель = " " Тогда
		Стр = СокрЛП(Стр);
		Пока 1 = 1 Цикл
			Поз = Найти(Стр, Разделитель);
			Если Поз = 0 Тогда
				МассивСтрок.Добавить(Стр);
				Возврат МассивСтрок;
			КонецЕсли;
			МассивСтрок.Добавить(Лев(Стр, Поз - 1));
			Стр = СокрЛ(Сред(Стр, Поз));
		КонецЦикла;
	Иначе
		ДлинаРазделителя = СтрДлина(Разделитель);
		Пока 1 = 1 Цикл
			Поз = Найти(Стр, Разделитель);
			Если Поз = 0 Тогда
				Если (СокрЛП(Стр) <> "") Тогда
					МассивСтрок.Добавить(Стр);
				КонецЕсли;
				Возврат МассивСтрок;
			КонецЕсли;
			МассивСтрок.Добавить(Лев(Стр,Поз - 1));
			Стр = Сред(Стр, Поз + ДлинаРазделителя);
		КонецЦикла;
	КонецЕсли;
	
КонецФункции

Функция ГлЯдро_ПолучитьПрефиксКонфигурации() Экспорт
	Возврат Конф_ПолучитьПрефиксКонфигурации();
КонецФункции

Функция ГлЯдро_ЭтоПримитивныйТип(Значение)
	Возврат ТипЗнч(Значение) = Тип("Строка") ИЛИ ТипЗнч(Значение) = Тип("Число") ИЛИ ТипЗнч(Значение) = Тип("Дата") ИЛИ ТипЗнч(Значение) = Тип("Булево");
КонецФункции

Функция ГлЯдро_СложныеТипыОтсутствуют(ОписаниеТипов)
	
	Результат = Истина;
	Для Каждого ВыбранныйТип Из ОписаниеТипов.Типы() Цикл
		Если НЕ (ВыбранныйТип = Тип("Строка") ИЛИ ВыбранныйТип = Тип("Число") ИЛИ ВыбранныйТип = Тип("Дата") ИЛИ ВыбранныйТип = Тип("Булево")) Тогда
			Результат = Ложь;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
		
КонецФункции

Функция ГлЯдро_ПолучитьСтруктуруШтрихкодаEAN13(Штрихкод) Экспорт
	
	СтруктураШтрихкода = Новый Структура;
	СтруктураШтрихкода.Вставить("ЭтоВесовойТовар", Ложь);
	СтруктураШтрихкода.Вставить("КоличествоТовара", 1);
	СтруктураШтрихкода.Вставить("КодСтрока", Штрихкод);
	//20.07.2018
	//Аксис Сергей
	
	//СтруктураШтрихкода.Вставить("КодЧисло", -1);
	//Попытка 
	//	СтруктураШтрихкода.Вставить("КодЧисло", Число(Штрихкод));
	//Исключение	
	//КонецПопытки;	
	
	Если СтрДлина(Штрихкод) <= 32 Тогда
		Попытка
			СтруктураШтрихкода.Вставить("КодЧисло", Число(Штрихкод));
		Исключение
			СтруктураШтрихкода.Вставить("КодЧисло", -1);
		КонецПопытки;
	Иначе
		СтруктураШтрихкода.Вставить("КодЧисло", -1);
	КонецЕсли;
	
	//Конец Аксис Сергей
	//20.07.2018	
	
	ИспользоватьШаблонВесовогоТовара = ГлЯдро_ПолучитьИзКэшаНастройкуSMARTS("ИспользоватьШаблоныВесовогоТовара");
	ПрефиксШК = ?(ИспользоватьШаблонВесовогоТовара, ГлЯдро_ПолучитьИзКэшаНастройкуSMARTS("ПрефиксКодаВесовогоТовара"), "");
	Если СтрДлина(Штрихкод) = 13 
		И (ИспользоватьШаблонВесовогоТовара = Истина) 
		И (ПрефиксШК <> "") Тогда
						
		ДлинаШК = ?(ИспользоватьШаблонВесовогоТовара, ГлЯдро_ПолучитьИзКэшаНастройкуSMARTS("ДлинаКодаВесовогоТовара"), 0);
		ДробиШК = ?(ИспользоватьШаблонВесовогоТовара, ГлЯдро_ПолучитьИзКэшаНастройкуSMARTS("ЧислоЗнаковПослеЗапятойВесТовара"), 0);
		ПрефиксВключенВКод = ?(ИспользоватьШаблонВесовогоТовара, ГлЯдро_ПолучитьИзКэшаНастройкуSMARTS("ПрефиксВключенВКодВесовогоТовара"),Ложь);
		
		МассивПС = ГлЯдро_РазложитьСтрокуВМассивПодстрок(ПрефиксШК, ",");
		Префикс = "";					
		Для каждого Эл Из МассивПС Цикл
			Если Лев(Штрихкод, СтрДлина(Эл)) = Эл Тогда
				Префикс = Эл;
				СтруктураШтрихкода.Вставить("ЭтоВесовойТовар", Истина);
				Прервать;
			КонецЕсли;	
		КонецЦикла; 
			
		Если СтруктураШтрихкода.ЭтоВесовойТовар Тогда						
			КоэффициентВычисленияВеса = 1;
			Для Счетчик = 1 По Число(ДробиШК) Цикл
				КоэффициентВычисленияВеса = КоэффициентВычисленияВеса * 10;
			КонецЦикла; 
			
			КоличествоТовара = Сред(Штрихкод, Число(ДлинаШК) + 3, Число(ДлинаШК));
			Попытка
				СтруктураШтрихкода.Вставить("КоличествоТовара", Число(КоличествоТовара)/КоэффициентВычисленияВеса);
			Исключение
			КонецПопытки;
			
			Если ПрефиксВключенВКод = Истина Тогда
				КодПоиска = Лев(Штрихкод, СтрДлина(Префикс) + Число(ДлинаШК));
			Иначе
				КодПоиска = Сред(Штрихкод, СтрДлина(Префикс) + 1, Число(ДлинаШК));
			КонецЕсли;
			СтруктураШтрихкода.Вставить("КодСтрока", КодПоиска);
			Попытка 
				СтруктураШтрихкода.Вставить("КодЧисло", Число(КодПоиска));
			Исключение	
			КонецПопытки;	
		КонецЕсли;	
	КонецЕсли;
	
	Возврат СтруктураШтрихкода;
	
КонецФункции

Функция ГлЯдро_ПолучитьМетаданныеНСИ() Экспорт
	Возврат Конф_ПолучитьМетаданныеНСИ();
КонецФункции

Функция ГлЯдро_ПолучитьДанныеНоменклатурыПоШтрихкоду(Штрихкод, МетаданныеНСИ) Экспорт
	
	ТекстЗапроса = "";
	Для Каждого РеквизитХранилища Из МетаданныеНСИ.Штрихкоды.Реквизиты Цикл
		ТекстЗапроса = ТекстЗапроса + ",
		|    ХранилищеШтрихкодов." + РеквизитХранилища.Значение + " КАК " + РеквизитХранилища.Ключ;
	КонецЦикла;
	ТекстЗапроса = Сред(ТекстЗапроса, 2);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 		
	"ВЫБРАТЬ" + ТекстЗапроса + "
	|ИЗ
	|    "+ МетаданныеНСИ.Штрихкоды.Путь_ОбъектМетаданных + "  КАК ХранилищеШтрихкодов
	|ГДЕ
	|	 ХранилищеШтрихкодов." + МетаданныеНСИ.Штрихкоды.Реквизиты.Штрихкод + " В(&Штрихкод)";   
	Запрос.УстановитьПараметр("ШтрихКод", Штрихкод);
	
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	
	Возврат РезультатЗапроса;
	
КонецФункции

Функция ГлЯдро_ПолучитьЗначениеСправочникаПоID(ИмяСправочника, ID) 
	
	Если ТипЗнч(ИмяСправочника) = Тип("Массив") Тогда
		ЗначениеСправочника = Справочники[ИмяСправочника[0]].ПустаяСсылка();
		Для Каждого ИмяСправочникаИзМассива Из ИмяСправочника Цикл
			Попытка
				ЗначениеСправочника = Справочники[ИмяСправочникаИзМассива].ПолучитьСсылку(Новый УникальныйИдентификатор(ID));
			Исключение
			КонецПопытки;
			Если ЗначениеЗаполнено(ЗначениеСправочника) Тогда
				Прервать;
			КонецЕслИ;
		КонецЦикла;
	Иначе
		ЗначениеСправочника = Справочники[ИмяСправочника].ПустаяСсылка();
		Попытка
			ЗначениеСправочника = Справочники[ИмяСправочника].ПолучитьСсылку(Новый УникальныйИдентификатор(ID));
		Исключение
	КонецПопытки;
		
	КонецЕсли;
	
	
	Возврат ЗначениеСправочника;
	
КонецФункции

Функция ГлЯдро_ПолучитьЗначениеСправочникаПоНаименованию(ИмяСправочника, ЗначениеДляПоиска, ВладелецЗначения = Неопределено) 		
	
	МетаданныеНСИ = Конф_ПолучитьМетаданныеНСИ();
	
	Если ТипЗнч(ИмяСправочника) = Тип("Массив") Тогда
		Для Каждого ИмяСправочникаИзМассива Из ИмяСправочника Цикл
			Если ИмяСправочникаИзМассива = МетаданныеНСИ.ЕдиницыИзмерения.ИмяСправочника И Найти(ЗначениеДляПоиска, "_") Тогда
				НовоеЗначениеДляПоиска = Лев(1, Найти(ЗначениеДляПоиска, "_") - 1);
			Иначе
				НовоеЗначениеДляПоиска = ЗначениеДляПоиска;
			КонецЕсли;	
			Если ВладелецЗначения = Неопределено Тогда
				ЗначениеСправочника = Справочники[ИмяСправочникаИзМассива].НайтиПоНаименованию(НовоеЗначениеДляПоиска);
			Иначе
				ЗначениеСправочника = Справочники[ИмяСправочникаИзМассива].НайтиПоНаименованию(НовоеЗначениеДляПоиска,,, ВладелецЗначения);
			КонецЕсли;
			Если ЗначениеЗаполнено(ЗначениеСправочника) Тогда
				Прервать;
			КонецЕслИ;
		КонецЦикла;
	Иначе
		Если ИмяСправочника = МетаданныеНСИ.ЕдиницыИзмерения.ИмяСправочника И Найти(ЗначениеДляПоиска, "_") Тогда
			НовоеЗначениеДляПоиска = Лев(ЗначениеДляПоиска, Найти(ЗначениеДляПоиска, "_") - 1);
		Иначе
			НовоеЗначениеДляПоиска = ЗначениеДляПоиска;
		КонецЕсли;			
		Если ВладелецЗначения = Неопределено Тогда
			ЗначениеСправочника = Справочники[ИмяСправочника].НайтиПоНаименованию(НовоеЗначениеДляПоиска);
		Иначе
			ЗначениеСправочника = Справочники[ИмяСправочника].НайтиПоНаименованию(НовоеЗначениеДляПоиска,,, ВладелецЗначения);
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеСправочника = Неопределено Тогда
		ЗначениеСправочника = Справочники[ИмяСправочника].ПустаяСсылка();
	КонецЕсли;
	
	Возврат ЗначениеСправочника;
	
КонецФункции

Функция ГлЯдро_ПолучитьАлкономенклатуруПоАлкокоду(ЗначениеДляПоиска, МетаданныеНСИ) 
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	АлкоНоменклатура.Ссылка,
	|	АлкоНоменклатура." + МетаданныеНСИ.АлкоНоменклатура.Реквизиты.АлкоКод + " КАК АлкоКод
	|ИЗ
	|	Справочник." + МетаданныеНСИ.АлкоНоменклатура.ИмяСправочника + " КАК АлкоНоменклатура
	|ГДЕ
	|	АлкоНоменклатура." + МетаданныеНСИ.АлкоНоменклатура.Реквизиты.АлкоКод + " В(&ЗначениеДляПоиска)";
	Запрос.УстановитьПараметр("ЗначениеДляПоиска", ЗначениеДляПоиска);
	
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	
	Возврат РезультатЗапроса;
	
КонецФункции

Функция ГлЯдро_ПолучитьНоменклатуруПоСоответствиям(СоответствиеID, СоответствиеШК, ID_Номенклатуры, ШК_Номенклатуры)
	
	ЗначениеНоменклатуры = СоответствиеID.Получить(ID_Номенклатуры);
	Если ЗначениеНоменклатуры = Неопределено Тогда
		ЗначениеНоменклатуры = СоответствиеШК.Получить(ШК_Номенклатуры);
	КонецЕсли;
	
	Возврат ЗначениеНоменклатуры;
	
КонецФункции

Функция ГлЯдро_ПолучитьТипГруппыОтбораПоСтроке(ТипГруппыСтрокой)
	
	ТипГруппыОтбора = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
	
	Если ТипГруппыСтрокой = "Or" Тогда
		ТипГруппыОтбора = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
	ИначеЕсли ТипГруппыСтрокой = "And" Тогда
		ТипГруппыОтбора = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
	ИначеЕсли ТипГруппыСтрокой = "Not" Тогда
		ТипГруппыОтбора = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаНе;
	КонецЕсли;

	Возврат ТипГруппыОтбора;
	
КонецФункции

Функция ГлЯдро_ПолучитьВидСравненияПоСтроке(ВидСравненияСтрокой)
	
	ВыбранныйВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	
	Если ВидСравненияСтрокой = "==" Тогда
		ВыбранныйВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ИначеЕсли ВидСравненияСтрокой = "!=" Тогда
		ВыбранныйВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно;
	ИначеЕсли ВидСравненияСтрокой = ">" Тогда
		ВыбранныйВидСравнения = ВидСравненияКомпоновкиДанных.Больше;
	ИначеЕсли ВидСравненияСтрокой = "<" Тогда
		ВыбранныйВидСравнения = ВидСравненияКомпоновкиДанных.Меньше;
	ИначеЕсли ВидСравненияСтрокой = ">=" Тогда
		ВыбранныйВидСравнения = ВидСравненияКомпоновкиДанных.БольшеИлиРавно;
	ИначеЕсли ВидСравненияСтрокой = "<=" Тогда
		ВыбранныйВидСравнения = ВидСравненияКомпоновкиДанных.МеньшеИлиРавно;
	ИначеЕсли ВидСравненияСтрокой = "Contains" Тогда
		ВыбранныйВидСравнения = ВидСравненияКомпоновкиДанных.Содержит;
	ИначеЕсли ВидСравненияСтрокой = "StartsWith" Тогда
		ВыбранныйВидСравнения = ВидСравненияКомпоновкиДанных.НачинаетсяС;
	КонецЕсли;
	
	Возврат ВыбранныйВидСравнения;
	
КонецФункции

Функция ГлЯдро_ПолучитьЗначениеДляОтбора(ИмяТаблицы, ИмяПоля, ЗначениеПоля, МетаданныеНСИ)
	
	НовоеЗначениеПоля = ЗначениеПоля;
	
	Если ИмяТаблицы = "Характеристики" И МетаданныеНСИ.Характеристики.Использование Тогда
		Если ИмяПоля = "КлючХарактеристик" Тогда
			НовоеЗначениеПоля = ГлЯдро_ПолучитьЗначениеСправочникаПоID(МетаданныеНСИ.Характеристики.Владельцы, ЗначениеПоля);
		ИначеЕсли ИмяПоля = "Ид" Тогда
			НовоеЗначениеПоля = ГлЯдро_ПолучитьЗначениеСправочникаПоID(МетаданныеНСИ.Характеристики.ИмяСправочника, ЗначениеПоля);
		КонецЕсли;
	КонецЕсли;
	
	Если ИмяТаблицы = "Серии" И МетаданныеНСИ.Серии.Использование Тогда
		Если ИмяПоля = "КлючСерий" Тогда
			НовоеЗначениеПоля = ГлЯдро_ПолучитьЗначениеСправочникаПоID(МетаданныеНСИ.Серии.Владельцы, ЗначениеПоля);
		ИначеЕсли ИмяПоля = "Ид" Тогда
			НовоеЗначениеПоля = ГлЯдро_ПолучитьЗначениеСправочникаПоID(МетаданныеНСИ.Серии.ИмяСправочника, ЗначениеПоля);
		КонецЕсли;
	КонецЕсли;
	
	Если ИмяТаблицы = "Склады" Тогда
		Если ИмяПоля = "Ид" ИЛИ ИмяПоля = "ИдРодителя" Тогда
			НовоеЗначениеПоля = ГлЯдро_ПолучитьЗначениеСправочникаПоID(МетаданныеНСИ.Склады.ИмяСправочника, ЗначениеПоля);
		КонецЕсли;
	КонецЕсли;
	
	Если ИмяТаблицы = "Контрагенты" Тогда
		Если ИмяПоля = "Ид" ИЛИ ИмяПоля = "ИдРодителя" Тогда
			НовоеЗначениеПоля = ГлЯдро_ПолучитьЗначениеСправочникаПоID(МетаданныеНСИ.Контрагенты.ИмяСправочника, ЗначениеПоля);
		КонецЕсли;
	КонецЕсли;
	
	Если ИмяТаблицы = "Остатки" Тогда
		Если ИмяПоля = "ИдСклада1С" Тогда
			НовоеЗначениеПоля = ГлЯдро_ПолучитьЗначениеСправочникаПоID(МетаданныеНСИ.Склады.ИмяСправочника, ЗначениеПоля);
		ИначеЕсли ИмяПоля = "ИдНоменклатуры" ИЛИ ИмяПоля = "ИдТовара" Тогда
			НовоеЗначениеПоля = ГлЯдро_ПолучитьЗначениеСправочникаПоID(МетаданныеНСИ.Номенклатура.ИмяСправочника, ЗначениеПоля);
		ИначеЕсли ИмяПоля = "ИдХарактеристики" Тогда
			НовоеЗначениеПоля = ГлЯдро_ПолучитьЗначениеСправочникаПоID(МетаданныеНСИ.Характеристики.ИмяСправочника, ЗначениеПоля);
		ИначеЕсли ИмяПоля = "ИдСерии" Тогда
			НовоеЗначениеПоля = ГлЯдро_ПолучитьЗначениеСправочникаПоID(МетаданныеНСИ.Серии.ИмяСправочника, ЗначениеПоля);
		КонецЕсли;
	КонецЕсли;
	
	Если ИмяТаблицы = "Цены" Тогда
		Если ИмяПоля = "ИдНоменклатуры" ИЛИ ИмяПоля = "ИдТовара" Тогда
			НовоеЗначениеПоля = ГлЯдро_ПолучитьЗначениеСправочникаПоID(МетаданныеНСИ.Номенклатура.ИмяСправочника, ЗначениеПоля);
		ИначеЕсли ИмяПоля = "Упаковка" Тогда
			НовоеЗначениеПоля = ГлЯдро_ПолучитьЗначениеСправочникаПоID(МетаданныеНСИ.ЕдиницыИзмерения.ИмяСправочника, ЗначениеПоля);
		ИначеЕсли ИмяПоля = "ИдХарактеристики" Тогда
			НовоеЗначениеПоля = ГлЯдро_ПолучитьЗначениеСправочникаПоID(МетаданныеНСИ.ЕдиницыИзмерения.ИмяСправочника, ЗначениеПоля);
		КонецЕсли;
	КонецЕсли;
	
	Если ИмяТаблицы = "ОстаткиПоЯчейкам" Тогда
		Если ИмяПоля = "ИдСклада" Тогда
			МассивИменСправочников = Новый Массив;
			МассивИменСправочников.Добавить(МетаданныеНСИ.Склады.ИмяСправочника);	
			Если МетаданныеНСИ.Свойство("Помещения") Тогда
				МассивИменСправочников.Добавить(МетаданныеНСИ.Помещения.ИмяСправочника);			
			КонецЕсли;	
			НовоеЗначениеПоля = ГлЯдро_ПолучитьЗначениеСправочникаПоID(МассивИменСправочников, ЗначениеПоля);		
		ИначеЕсли ИмяПоля = "ИдЯчейки" Тогда
			НовоеЗначениеПоля = ГлЯдро_ПолучитьЗначениеСправочникаПоID(МетаданныеНСИ.Ячейки.ИмяСправочника, ЗначениеПоля);
		ИначеЕсли ИмяПоля = "ИдНоменклатуры" Тогда
			НовоеЗначениеПоля = ГлЯдро_ПолучитьЗначениеСправочникаПоID(МетаданныеНСИ.Номенклатура.ИмяСправочника, ЗначениеПоля);			
		ИначеЕсли ИмяПоля = "ИдХарактеристики" Тогда
			НовоеЗначениеПоля = ГлЯдро_ПолучитьЗначениеСправочникаПоID(МетаданныеНСИ.Характеристики.ИмяСправочника, ЗначениеПоля);			
		ИначеЕсли ИмяПоля = "ИдСерии" Тогда
			НовоеЗначениеПоля = ГлЯдро_ПолучитьЗначениеСправочникаПоID(МетаданныеНСИ.Серии.ИмяСправочника, ЗначениеПоля);			
		ИначеЕсли ИмяПоля = "ИдЕдиницыИзмерения" Тогда
			НовоеЗначениеПоля = ГлЯдро_ПолучитьЗначениеСправочникаПоID(МетаданныеНСИ.ЕдиницыИзмерения.ИмяСправочника, ЗначениеПоля);						
		КонецЕсли;
	КонецЕсли;
	
	Если ИмяТаблицы = "Резерв" Тогда		
		Если ИмяПоля = "ИдДокумента" Тогда			
			ТаблицаБизнесПроцессов = ГлЯдро_ПолучитьИзКэшаЗначениеТабличнойНастройкиSMARTS("НастройкиБизнесПроцессов", Новый Структура("ТипДокументаMS", "ПодборЗаказа"));			
			Если ТипЗнч(ТаблицаБизнесПроцессов) = Тип("ТаблицаЗначений") ИЛИ ТипЗнч(ТаблицаБизнесПроцессов) = Тип("Массив") Тогда				
				НовоеЗначениеПоля = Неопределено;				
				Для Каждого СтрокаТЗ из ТаблицаБизнесПроцессов Цикл					
					Если ТипЗнч(СтрокаТЗ) = Тип("Структура") И СтрокаТЗ.Свойство("ЭтоТаблицаЗначений") И СтрокаТЗ.ЭтоТаблицаЗначений Тогда
						Продолжить;
					КонецЕсли;						
					ТипДокумента1С = СтрокаТЗ.ТипИсходногоДокумента1С;															
					Попытка
						Если Найти(Документы[ТипДокумента1С].ПолучитьСсылку(Новый УникальныйИдентификатор(ЗначениеПоля)), "бъект") = 0 Тогда
							НовоеЗначениеПоля = Документы[ТипДокумента1С].ПолучитьСсылку(Новый УникальныйИдентификатор(ЗначениеПоля));
						КонецЕсли;
					Исключение
					КонецПопытки;					
					Если ЗначениеЗаполнено(НовоеЗначениеПоля) Тогда
						Прервать;
					КонецЕсли;										
				КонецЦикла;				
			КонецЕсли;						
		КонецЕсли;			
	КонецЕсли;
	
	Если ИмяТаблицы = "ДопРеквизиты" Тогда
		Если ИмяПоля = "ИдТовара" Тогда
			НовоеЗначениеПоля = ГлЯдро_ПолучитьЗначениеСправочникаПоID(МетаданныеНСИ.Номенклатура.ИмяСправочника, ЗначениеПоля);
		КонецЕсли;
	КонецЕсли;
	
	Возврат НовоеЗначениеПоля;
	
КонецФункции

Функция ГлЯдро_ВыполнитьПроизвольныйКод(ТекстПроизвольногоКода, СтруктураПеременных)
	
	Результат = "";
	РезультатСтатус = Истина;
	
	ВыполняемыйКод = "";
	Для Каждого ИмяПеременной Из СтруктураПеременных Цикл
		ВыполняемыйКод = ВыполняемыйКод + ИмяПеременной.Ключ + " = СтруктураПеременных." + ИмяПеременной.Ключ + ";" + Символы.ВК;
	КонецЦикла;
	ВыполняемыйКод = ВыполняемыйКод + Символы.ВК + ТекстПроизвольногоКода;
	
	Попытка
		Выполнить(ВыполняемыйКод);
	Исключение
		РезультатСтатус = Ложь;
	КонецПопытки;
	
	РезультатВыполненияКода = Новый Структура("Статус,Данные", РезультатСтатус, Результат);
	
	Возврат РезультатВыполненияКода;
	
КонецФункции

Функция ГлЯдро_ВыполнитьПроизвольныйОбработчик(СтруктураВызова)
	
	Результат = Неопределено;
	
	ТипМетода = СтруктураВызова.ТипМетода;
	ИмяМетода = СтруктураВызова.ИмяМетода;
	
	СтрокаПараметровМетода = "";
	Если СтруктураВызова.Свойство("ПараметрыМетода") Тогда
		ПараметрыМетода = СтруктураВызова.ПараметрыМетода;
		Для Каждого Параметр Из СтруктураВызова.ПараметрыМетода Цикл
			СтрокаПараметровМетода = СтрокаПараметровМетода + ", ПараметрыМетода." + Параметр.Ключ;
		КонецЦикла;
		СтрокаПараметровМетода = Сред(СтрокаПараметровМетода, 3);
	КонецЕсли;
	
	СтрокаВызова = "ИнтеграционнаяОбработка." + ИмяМетода + "(" + СтрокаПараметровМетода + ");";
	Если ТипМетода = "Функция" Тогда
		СтрокаВызова = "Результат = " + СтрокаВызова;
	КонецЕсли;
	
	Выполнить(СтрокаВызова);
	
	Возврат Результат;
	
КонецФункции

Функция ГлЯдро_ПроверитьДоступностьОбработчика(ИмяОбработчика, СтруктураПараметров) Экспорт
	
	РезультатПроверки = Новый Структура("Статус,Сообщение", Ложь, "");
	СообщениеОбОшибке = "";
	Попытка
		Выполнить("РезультатПроверки = ИнтеграционнаяОбработка." + ИмяОбработчика + "(СтруктураПараметров, Истина)");
	Исключение
	КонецПопытки;
	
	Возврат РезультатПроверки;
	
КонецФункции

Функция ГлЯдро_ПолучитьУниверсальноеИмяОбработчика(ТипОбработчика, ТипДокумента = "") Экспорт
	
	УниверсальноеИмяОбработчика = Конф_ПолучитьПрефиксКонфигурации();
	Если ЗначениеЗаполнено(ТипДокумента) Тогда
		УниверсальноеИмяОбработчика = УниверсальноеИмяОбработчика + "_" + ТипДокумента;
	КонецЕсли;
	УниверсальноеИмяОбработчика = УниверсальноеИмяОбработчика + "_" + ТипОбработчика;
	
	Возврат УниверсальноеИмяОбработчика;
	
КонецФункции

Процедура ГлЯдро_ПодобратьКоличествоСКонтролемПлана(СтруктураДанных)
	
	Если СтруктураДанных.Таблица1С.Колонки.Найти(СтруктураДанных.ПодборКоличества_Колонка1С_План) = Неопределено Тогда
		// Добавляем колонку для плана, переносим в нее факт, и очищаем факт.
		// Срабатывает только при первом обращении по первой строке, данные теряться не должны
		СтруктураДанных.Таблица1С.Колонки.Добавить(СтруктураДанных.ПодборКоличества_Колонка1С_План, Новый ОписаниеТипов("Число"));
		Для Каждого Строка1С Из СтруктураДанных.Таблица1С Цикл
			//Трошин И.В. 26.12.2017 (
			КолонкаИсходныйПлан = "";
			Если НЕ СтруктураДанных.Свойство("ПодборКоличества_Колонка1С_ИсходныйПлан",КолонкаИсходныйПлан) Тогда
				КолонкаИсходныйПлан = СтруктураДанных.ПодборКоличества_Колонка1С;
			КонецЕсли;
			//Трошин И.В. 26.12.2017 )
			Строка1С[СтруктураДанных.ПодборКоличества_Колонка1С_План] = Строка1С[КолонкаИсходныйПлан];
			Строка1С[СтруктураДанных.ПодборКоличества_Колонка1С] = 0;
		КонецЦикла;
	КонецЕсли;
	
	Если СтруктураДанных.ТаблицаMS.Колонки.Найти(СтруктураДанных.ПодборКоличества_КолонкаMS + "_Остаток") = Неопределено Тогда
		// Добавляем колонку для остатка распределения, переносим в нее весь факт ТСД.
		// Срабатывает только при первом обращении по первой строке, данные теряться не должны
		СтруктураДанных.ТаблицаMS.Колонки.Добавить(СтруктураДанных.ПодборКоличества_КолонкаMS + "_Остаток", Новый ОписаниеТипов("Число"));
		Для Каждого СтрокаMS Из СтруктураДанных.ТаблицаMS Цикл
			СтрокаMS[СтруктураДанных.ПодборКоличества_КолонкаMS + "_Остаток"] = СтрокаMS[СтруктураДанных.ПодборКоличества_КолонкаMS];
		КонецЦикла;
	КонецЕсли;
	
	Строка1С = СтруктураДанных.СтрокаДокумента1С;
	СтрокаMS = СтруктураДанных.ТаблицаMS.Получить(СтруктураДанных.ИндексСтрокиMS);
	
	ТекущееФактическоеКоличество_ТСД = СтрокаMS[СтруктураДанных.ПодборКоличества_КолонкаMS];
	КоличествоДляРаспределения_ТСД  = СтрокаMS[СтруктураДанных.ПодборКоличества_КолонкаMS + "_Остаток"];
	ТекущееПлановоеКоличество_1С    = Строка1С[СтруктураДанных.ПодборКоличества_Колонка1С_План];
	ТекущееФактическоеКоличество_1С = Строка1С[СтруктураДанных.ПодборКоличества_Колонка1С];
	СвободноеКоличество_1С = ?(ТекущееПлановоеКоличество_1С = 0, КоличествоДляРаспределения_ТСД, ТекущееПлановоеКоличество_1С - ТекущееФактическоеКоличество_1С);
	
	КоличествоРаспределено_1C   = Мин(СвободноеКоличество_1С, КоличествоДляРаспределения_ТСД);
	КоличествоНеРаспределено_ТСД = КоличествоДляРаспределения_ТСД - КоличествоРаспределено_1C;
	
	ТекущееФактическоеКоличество_1С = ТекущееФактическоеКоличество_1С + КоличествоРаспределено_1C;
	
	СтрокаMS[СтруктураДанных.ПодборКоличества_КолонкаMS + "_Остаток"] = КоличествоНеРаспределено_ТСД;
	Строка1С[СтруктураДанных.ПодборКоличества_Колонка1С] = ТекущееФактическоеКоличество_1С;
	
	СтруктураДанных.Вставить("СтрокаMSРазнесена", КоличествоНеРаспределено_ТСД = 0);
	
КонецПроцедуры

Процедура ГлЯдро_ПодобратьКоличествоСуммированием(СтруктураДанных)
	
	Строка1С = СтруктураДанных.Таблица1С.Получить(СтруктураДанных.ИндексСтроки1С);
	СтрокаMS = СтруктураДанных.ТаблицаMS.Получить(СтруктураДанных.ИндексСтрокиMS);
	
	Строка1С[СтруктураДанных.ПодборКоличества_Колонка1С] = Строка1С[СтруктураДанных.ПодборКоличества_Колонка1С] + СтрокаMS[СтруктураДанных.ПодборКоличества_КолонкаMS];
	
	СтруктураДанных.Вставить("СтрокаMSРазнесена", Истина);
	
КонецПроцедуры

Процедура ГлЯдро_ОчиститьКолонкуТаблицыЗначений(ИсходнаяТаблица, ИмяКолонки)
	
	ЗначениеДляЗаполнения = Неопределено;
	
	ТипыЗначенийКолонки = ИсходнаяТаблица.Колонки[ИмяКолонки].ТипЗначения.Типы();
	
	Если ТипыЗначенийКолонки.Количество() = 1 Тогда
		
		ТипКолонкиСтрокой = Строка(ТипыЗначенийКолонки[0]);
		
		Если ТипКолонкиСтрокой = "Число" Тогда
			ЗначениеДляЗаполнения = 0;
		ИначеЕсли ТипКолонкиСтрокой = "Строка" Тогда
			ЗначениеДляЗаполнения = "";
		ИначеЕсли ТипКолонкиСтрокой = "Дата" Тогда
			ЗначениеДляЗаполнения = Дата(1,1,1);
		ИначеЕсли ТипКолонкиСтрокой = "Булево" Тогда
			ЗначениеДляЗаполнения = Ложь;
		ИначеЕсли Лев(ТипКолонкиСтрокой, 10) = "Справочник" Тогда
			ПозицияТочки = Найти(ТипКолонкиСтрокой, ".");
			ИмяСправочника = Сред(ТипКолонкиСтрокой, ПозицияТочки + 1);
			ЗначениеДляЗаполнения = Справочники[ИмяСправочника].ПустаяСсылка();
		ИначеЕсли Лев(ТипКолонкиСтрокой, 8) = "Документ" Тогда
			ПозицияТочки = Найти(ТипКолонкиСтрокой, ".");
			ИмяДокумента = Сред(ТипКолонкиСтрокой, ПозицияТочки + 1);
			ЗначениеДляЗаполнения = Документы[ИмяДокумента].ПустаяСсылка();
		ИначеЕсли Лев(ТипКолонкиСтрокой, 12) = "Перечисление" Тогда
			ПозицияТочки = Найти(ТипКолонкиСтрокой, ".");
			ИмяПеречисления = Сред(ТипКолонкиСтрокой, ПозицияТочки + 1);
			ЗначениеДляЗаполнения = Перечисления[ИмяПеречисления].ПустаяСсылка();
		КонецЕсли;	
	КонецЕсли;
	
	ИсходнаяТаблица.ЗаполнитьЗначения(ЗначениеДляЗаполнения, ИмяКолонки);
	
КонецПроцедуры

Функция ГлЯдро_ПолучитьЗначенияГлобальныхПараметров(ОбщиеПараметры = Неопределено, ЧастныеПараметры = Неопределено) Экспорт
	
	ТаблицаПараметров = Новый ТаблицаЗначений;
	ТаблицаПараметров.Колонки.Добавить("ID_Параметра");
	ТаблицаПараметров.Колонки.Добавить("Наименование");
	ТаблицаПараметров.Колонки.Добавить("Значение");
	
	Если ОбщиеПараметры = Неопределено Тогда
		ОбщиеПараметры = ГлЯдро_ПолучитьИзКэшаНастройкуSMARTS("ГлобальныеПараметры");
	КонецЕсли;
	
	Если ЧастныеПараметры = Неопределено Тогда
		ЧастныеПараметры = ГлЯдро_ПолучитьИзКэшаНастройкуSMARTS("ЗначенияПараметровУзлов");
	КонецЕсли;
	
	Если ТипЗнч(ОбщиеПараметры) = Тип("ТаблицаЗначений") Тогда
		ИспользуемыеОбщиеПараметры = ОбщиеПараметры.НайтиСтроки(Новый Структура("Использование", Истина)); 
		Для Каждого СтрокаОбщегоПараметра Из ИспользуемыеОбщиеПараметры Цикл
			ЗаполнитьЗначенияСвойств(ТаблицаПараметров.Добавить(), СтрокаОбщегоПараметра);
		КонецЦикла;
	КонецЕсли;
	
	ТаблицаПараметров.Колонки.Добавить("Использование");
	Если ТипЗнч(ЧастныеПараметры) = Тип("ТаблицаЗначений") Тогда
		ИспользуемыеЧастныеПараметры = ЧастныеПараметры.НайтиСтроки(Новый Структура("Использование", Истина)); 
		Для Каждого СтрокаЧастногоПараметра Из ИспользуемыеЧастныеПараметры Цикл
			ОбновляемаяСтрокаПараметра = ТаблицаПараметров.Найти(СтрокаЧастногоПараметра.ID_Параметра, "ID_Параметра");
			Если ОбновляемаяСтрокаПараметра <> Неопределено Тогда
				ОбновляемаяСтрокаПараметра.Значение = СтрокаЧастногоПараметра.Значение;
				ОбновляемаяСтрокаПараметра.Использование = Истина;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат ТаблицаПараметров;
	
КонецФункции

Функция ГлЯдро_ШтрихКодЕстьВБазе1С(Штрихкод, СтруктураХраненияШК) Экспорт
			
	Запрос = Новый Запрос("ВЫБРАТЬ
							|    Штрихкоды." + СтруктураХраненияШК.ШК_ИзмерениеШтрихкода + " КАК Штрихкод
							|ИЗ
							|    " + СтруктураХраненияШК.ШК_ОбъектМетаданных + " КАК Штрихкоды
							|ГДЕ
							|	Штрихкоды." + СтруктураХраненияШК.ШК_ИзмерениеШтрихкода + " = &Штрихкод");   
	
	Запрос.УстановитьПараметр("ШтрихКод", Штрихкод);
	
	Возврат НЕ Запрос.Выполнить().Пустой();	
	
КонецФункции

Функция ГлЯдро_ПолучитьДанныеШтрихКода(Штрихкод) Экспорт

	ДанныеШК = Неопределено;
	Если ИнтеграционнаяОбработка <> Неопределено Тогда
		Попытка
			ДанныеШК = ИнтеграционнаяОбработка.ГлЯдро_ПолучитьДанныеШтрихКода(Штрихкод);
		Исключение
		КонецПопытки;
	КонецЕсли;
		
	Возврат ДанныеШК;
	
КонецФункции

Функция ГлЯдро_ПолучитьЕдиницуИзмеренияПоУмолчанию(ТоварСсылка) Экспорт		
	
	ДанныеШК = Неопределено;
	
	Если ИнтеграционнаяОбработка <> Неопределено Тогда
		Попытка
			ДанныеШК = ИнтеграционнаяОбработка.ГлЯдро_ПолучитьЕдиницуИзмеренияПоУмолчанию(ТоварСсылка);
		Исключение
		КонецПопытки;
	КонецЕсли;
		
	Возврат ДанныеШК;
	
КонецФункции

Функция ГлЯдро_ТипДокументаЕстьВ1С(ИмяТипаДокумента) Экспорт
	
	ДокументСуществует = Ложь;
	
	Для каждого ТипДокумента Из СтруктураМетаданных.Документы1С Цикл
		Если ВРег(СокрЛП(ТипДокумента.Значение.Имя)) = ВРег(СокрЛП(ИмяТипаДокумента)) Тогда
			ДокументСуществует = Истина;
			Прервать;
		КонецЕсли;	
	КонецЦикла;
	
	Возврат ДокументСуществует;

КонецФункции

Функция ГлЯдро_ПолучитьЗначениеРеквизитаНастройкиБизнесПроцесса(НастройкаБП, ИмяРеквизита) Экспорт
	
	Если НастройкаБП.Свойство(ИмяРеквизита) Тогда
		ЗначениеРеквизита = НастройкаБП[ИмяРеквизита];
	Иначе	
		ЗначениеРеквизита = Неопределено;
	КонецЕсли;	
	
	Возврат ЗначениеРеквизита;
	
КонецФункции	

Функция ГлЯдро_СформироватьПодробноеСообщениеОВыгрузкеТаблицы(Знач Сообщение, ПредставлениеВремениОбщее, ПредставлениеВремени1С, ПредставлениеВремениMS) Экспорт

	Результат = Сообщение;	
	
	Результат = Результат 
				+ Символы.ВК + "Затраченное время:"
				+ Символы.ВК + Символы.Таб + "- " + ПредставлениеВремениОбщее 	+ " - общее время выгрузки"
				+ Символы.ВК + Символы.Таб + "- " + ПредставлениеВремени1С 		+ " - на построение таблицы в 1С"
				+ Символы.ВК + Символы.Таб + "- " + ПредставлениеВремениMS 		+ " - на выгрузку данных в Mobile SMARTS"
				+ Символы.ВК + Символы.ВК;	
				
	Возврат Результат;				

КонецФункции

Функция ГлЯдро_ПолучитьДопРеквизитыПредставленияДокумента(ИмяДокумента1С) Экспорт
	
	Результат = Неопределено;
	
	Попытка
		Выполнить("Результат = ИнтеграционнаяОбработка.ПолучитьДопРеквизитыПредставленияДокумента(ИмяДокумента1С)");
	Исключение
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

Функция ГлЯдро_ПолучитьПредставлениеДокументаПоНастройкам(Документ1С, ТаблицаНастроек)
	
	СтрокаПредставлениеДокумента = "";
	ОтмеченныеРеквизиты = ТаблицаНастроек.НайтиСтроки(Новый Структура("ИспользоватьПриВыгрузке",Истина));
	Если ОтмеченныеРеквизиты.Количество() > 0 Тогда		
		Для Каждого СтрокаНастройки Из ОтмеченныеРеквизиты Цикл
			СтрокаПредставлениеДокумента = СтрокаПредставлениеДокумента+?(СтрокаПредставлениеДокумента = "","",", ") +Документ1С[СтрокаНастройки.НазваниеРеквизита];	
		КонецЦикла;
	КонецЕсли;
	
	Возврат СтрокаПредставлениеДокумента;
КонецФункции

Процедура ГлЯдро_ЗаписатьСобытиеВЖурналРегистрации(ИмяСобытия, УровеньСтрокой, Комментарий)
	
	//Если РежимОтладки = Истина Тогда	
		
		Если УровеньСтрокой = "Информация" Тогда
			
			Уровень = УровеньЖурналаРегистрации.Информация;
			
		ИначеЕсли УровеньСтрокой = "Ошибка" Тогда	
			
			Уровень = УровеньЖурналаРегистрации.Ошибка;		
			
		ИначеЕсли УровеньСтрокой = "Предупреждение" Тогда
			
			Уровень = УровеньЖурналаРегистрации.Предупреждение;
			
		ИначеЕсли УровеньСтрокой = "Примечание" Тогда
			
			Уровень = УровеньЖурналаРегистрации.Примечание;			
			
		Иначе
			
			Уровень = УровеньЖурналаРегистрации.Информация;	
			
		КонецЕсли; 
		
		ЗаписьЖурналаРегистрации("КлеверенсСофт." + ИмяСобытия, Уровень, , , Комментарий);	
		
	//КонецЕсли; 
		
КонецПроцедуры

Функция ГлЯдро_СвернутьТаблицуЗначений(ТаблицаЗначений, КолонкиСуммирования = "")
	КолонкиГруппировок = "";
	Для каждого Колонка Из ТаблицаЗначений.Колонки Цикл
		Если НЕ Найти(ВРег(СокрЛП(КолонкиСуммирования)), ВРег(СокрЛП(Колонка.Имя))) Тогда
			КолонкиГруппировок = КолонкиГруппировок + Колонка.Имя + ",";
		КонецЕсли;	
	КонецЦикла; 
	ТаблицаЗначений.Свернуть(КолонкиГруппировок, КолонкиСуммирования);
	
	Возврат Истина;
КонецФункции // СвернутьТаблицуЗначений()

Функция ГлЯдро_ТаблицаЗначенийВCOMSafeArray(ТаблицаЗначений)
	
	Результат = Новый COMSafeArray("VT_VARIANT", ТаблицаЗначений.Количество() + 1);
	
	Колонки = Новый Массив;
	Для каждого Колонка Из ТаблицаЗначений.Колонки Цикл
		Колонки.Добавить(Колонка.Имя);			
	КонецЦикла; 
	
	КолонкиArr = Новый COMSafeArray(Колонки, "VT_BSTR", Колонки.Количество()); 
	
	Результат.SetValue(0, КолонкиArr);
	
	Инд = 1;
	Для каждого Строка Из ТаблицаЗначений Цикл
		
		СтрокаРезультата = Новый Массив;
		
		Для каждого Колонка Из ТаблицаЗначений.Колонки Цикл
			СтрокаРезультата.Добавить(Строка[Колонка.Имя]);					
		КонецЦикла; 
		
		СтрокаРезультатаArr = Новый COMSafeArray(СтрокаРезультата, "VT_VARIANT", СтрокаРезультата.Количество()); 
		
		Результат.SetValue(Инд, СтрокаРезультатаArr);
		Инд = Инд + 1;	
	
	КонецЦикла; 
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область ГлобальныйКонтекст_МеханизмыИзБСП

// Возвращает текстовое представление интервала времени, заданного в секундах.
//
// Параметры:
//
//  Время - Число - интервал времени в секундах.
//
//  ПолноеПредставление	- Булево - кратное или полное представление времени.
//		Например, интервал 1 000 000 секунд:
//		- полное представление:  11 дней 13 часов 46 минут 40 секунд;
//		- краткое представление: 11 дней 13 часов.
//
// Возвращаемое значение:
//   Строка - представление интервала времени.
//
Функция ГлЯдро_ПредставлениеВремени(Знач Время, ПолноеПредставление = Истина, ВыводитьСекунды = Истина) Экспорт
	Результат = "";
	
	// Представление единиц измерения времени в винительном падеже для количеств: 1, 2-4, 5-20.
	ПредставлениеНедель = НСтр("ru = ';%1 неделю;;%1 недели;%1 недель;%1 недели'");
	ПредставлениеДней   = НСтр("ru = ';%1 день;;%1 дня;%1 дней;%1 дня'");
	ПредставлениеЧасов  = НСтр("ru = ';%1 час;;%1 часа;%1 часов;%1 часа'");
	ПредставлениеМинут  = НСтр("ru = ';%1 минуту;;%1 минуты;%1 минут;%1 минуты'");
	ПредставлениеСекунд = НСтр("ru = ';%1 секунду;;%1 секунды;%1 секунд;%1 секунды'");
	ПредставлениеЧасов  = НСтр("ru = ';%1 ч;;%1 ч;%1 ч;%1 ч'");
	ПредставлениеМинут  = НСтр("ru = ';%1 мин;;%1 мин;%1 мин;%1 мин'");
	ПредставлениеСекунд = НСтр("ru = ';%1 сек;;%1 сек;%1 сек;%1 сек'");
	
	ПредставлениеВремени = "ЧДЦ=0; ЧРГ=' '; ЧН=0; ЧГ=3,0; ЧО=1";
	
	Время = Число(Время);
	
	Если Время < 0 Тогда
		Время = -Время;
	КонецЕсли;
	
	КоличествоНедель = Цел(Время / 60/60/24/7);
	КоличествоДней   = Цел(Время / 60/60/24);
	КоличествоЧасов  = Цел(Время / 60/60);
	КоличествоМинут  = Цел(Время / 60);
	КоличествоСекунд = Цел(Время);
	
	КоличествоСекунд = КоличествоСекунд - КоличествоМинут * 60;
	КоличествоМинут  = КоличествоМинут - КоличествоЧасов * 60;
	КоличествоЧасов  = КоличествоЧасов - КоличествоДней * 24;
	КоличествоДней   = КоличествоДней - КоличествоНедель * 7;
	
	Если Не ВыводитьСекунды Тогда
		КоличествоСекунд = 0;
	КонецЕсли;
	
	Если КоличествоНедель > 0 И КоличествоДней+КоличествоЧасов+КоличествоМинут+КоличествоСекунд=0 Тогда
		//Результат = ГлЯдро_СтрокаСЧисломДляЛюбогоЯзыка(ПредставлениеНедель, КоличествоНедель);
		Результат = ГлЯдро_СтрокаСЧисломДляЛюбогоЯзыка(ПредставлениеНедель, КоличествоНедель, , ПредставлениеВремени) + " нед ";
	Иначе
		КоличествоДней = КоличествоДней + КоличествоНедель * 7;
		
		Счетчик = 0;
		Если КоличествоДней > 0 Тогда
			//Результат = Результат + ГлЯдро_СтрокаСЧисломДляЛюбогоЯзыка(ПредставлениеДней, КоличествоДней) + " ";
			Результат = Результат + ГлЯдро_СтрокаСЧисломДляЛюбогоЯзыка(ПредставлениеДней, КоличествоДней, , ПредставлениеВремени) + " дн ";
			Счетчик = Счетчик + 1;
		КонецЕсли;
		
		Если КоличествоЧасов > 0 Тогда
			//Результат = Результат + ГлЯдро_СтрокаСЧисломДляЛюбогоЯзыка(ПредставлениеЧасов, КоличествоЧасов) + " ";
			Результат = Результат + ГлЯдро_СтрокаСЧисломДляЛюбогоЯзыка(ПредставлениеЧасов, КоличествоЧасов, , ПредставлениеВремени) + " ч ";
			Счетчик = Счетчик + 1;
		КонецЕсли;
		
		Если (ПолноеПредставление Или Счетчик < 2) И КоличествоМинут > 0 Тогда
			//Результат = Результат + ГлЯдро_СтрокаСЧисломДляЛюбогоЯзыка(ПредставлениеМинут, КоличествоМинут) + " ";
			Результат = Результат + ГлЯдро_СтрокаСЧисломДляЛюбогоЯзыка(ПредставлениеМинут, КоличествоМинут, , ПредставлениеВремени) + " мин ";
			Счетчик = Счетчик + 1;
		КонецЕсли;
		
		Если (ПолноеПредставление Или Счетчик < 2) И (КоличествоСекунд > 0 Или КоличествоНедель+КоличествоДней+КоличествоЧасов+КоличествоМинут = 0) Тогда
			//Результат = Результат + ГлЯдро_СтрокаСЧисломДляЛюбогоЯзыка(ПредставлениеСекунд, КоличествоСекунд);
			Результат = Результат + ГлЯдро_СтрокаСЧисломДляЛюбогоЯзыка(ПредставлениеСекунд, КоличествоСекунд, , ПредставлениеВремени) + " сек";
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат СокрП(Результат);
	
КонецФункции

// Формирует представление числа для определенного языка и параметров числа.
//
// Параметры:
//  Шаблон          - Строка - Строка, содержит перечисленные через точку с запятой 6 форм строки
//                             для каждой категории числительного: 
//                             - %1 обозначает позицию числа;
//  Число           - Число - Число, которое будет подставлено в строку вместо параметра "%1".
//  Вид             - ВидЧисловогоЗначения - Определяет вид числового значения, для которого формируется представление. 
//                             - Количественное (по умолчанию) или Порядковое.
//  ФорматнаяСтрока - Строка - Строка параметров форматирования. См. аналогичный параметр в СтрокаСЧислом. 
//
// Возвращаемое значение:
//  Строка - Представление строки числа в требуемой форме.
//
// Пример:
//
//  // Представление параметров:
//  //
//  // Lang | Zero | One             | Two            | Few               | Many                  | Other
//  // ============================================================================================================
//  // ru   |      | XX1 / X11       |                | XX2-XX4 / X12-X14 | XX0, XX5-XX9, X11-X14 | дробные
//  // Card.|      | остался %1 день |                | осталось %1 дня   | осталось %1 дней      | осталось %1 дня
//  //      |      | вижу %1 рыбу    |                | вижу %1-х рыб     | вижу %5 рыб           | вижу %1 рыбы
//  // ------------------------------------------------------------------------------------------------------------
//  // ru   |      |                 |                |                   |                       | других нет
//  // Ord. |      |                 |                |                   |                       | %1-й день 
//  // ------------------------------------------------------------------------------------------------------------
//  // en   |      | для 1           |                |                   |                       | остальное
//  // Card.|      | left %1 day     |                |                   |                       | left %1 days
//  // ------------------------------------------------------------------------------------------------------------
//  // en   |      | XX1 / X11       | XX2 / X12      | XX3 / X13         |                       | остальное
//  // Ord. |      | %1st day        | %1nd day       | %1rd day          |                       | %1th day.
//
//  // Card. - Cardinal - Количественное;
//  // Ord.  - Ordinal  - Порядковое;
//  // X - любая цифра;
//  // / - кроме.
//  
//  Строка = СтроковыеФункцииКлиентСервер.СтрокаСЧисломДляЛюбогоЯзыка(
//		НСтр("ru=';остался %1 день;;осталось %1 дня;осталось %1 дней;осталось %1 дня';
//		     |en=';left %1 day;;;;left %1 days'"), 
//		0.05,, "ЧДЦ=1");
// 
Функция ГлЯдро_СтрокаСЧисломДляЛюбогоЯзыка(Шаблон, Число, Вид = Неопределено, ФорматнаяСтрока = Неопределено) Экспорт

	// В версиях платформы 8.3.9 и ниже отсутствует метод "СтрокаСЧислом" и перечисление "ВидЧисловогоЗначения"
	// Поэтому используем метод "Формат"	
	
	Возврат Формат(Число, ФорматнаяСтрока);
		
	//Если ПустаяСтрока(Шаблон) Тогда
	//	Возврат Формат(Число, ФорматнаяСтрока); 
	//КонецЕсли;

	//Если Вид = Неопределено Тогда
	//	Вид = ВидЧисловогоЗначения.Количественное;
	//КонецЕсли;

	//Возврат СтрокаСЧислом(Шаблон, Число, Вид, ФорматнаяСтрока);

КонецФункции

#КонецОбласти

#Область КомпонентаMobileSMARTS

#Область КомпонентаMobileSMARTS_Подключение

Функция КомЯдро_ПодключитьсяКСерверуSMARTS(IdBaseSMARTS = "", mXmlDoc = Неопределено)
	
	Если ЗначениеЗаполнено(IdBaseSMARTS) Тогда
		ID_ПодключаемойБазы = IdBaseSMARTS;
	Иначе
		ID_ПодключаемойБазы = ?(ТипЗнч(ПараметрыПодключенияMS) = Тип("Структура"), ПараметрыПодключенияMS.Ид, "");
	КонецЕсли;
	
	Если СтруктураПодключенияMS = Неопределено 
		 ИЛИ НЕ ЗначениеЗаполнено(СтруктураПодключенияMS.IdBaseSMARTS)
		 ИЛИ СтруктураПодключенияMS.IdBaseSMARTS <> ID_ПодключаемойБазы
		 ИЛИ Строка(СтруктураПодключенияMS.TerminalConnector) <> "COMОбъект" 
		 ИЛИ (mXmlDoc <> Неопределено И СтруктураПодключенияMS.SessionSMARTS = Неопределено) Тогда
		СтруктураПодключенияMS = КомЯдро_ПолучитьСтруктуруПодключенияБазыСМАРТС(ID_ПодключаемойБазы, mXmlDoc);
	КонецЕсли;
	
	// закомментили, потому что при первом запуске обработки в конфигурации нет подключенной базы 
	// и в форме настройки подключения, методе "ПолучитьСписокБаз" вызывается данный метод и выбрасывает исключение
	Если СтруктураПодключенияMS = Неопределено Тогда
		ЕстьПодключение = Ложь;
	Иначе
		ЕстьПодключение = Строка(СтруктураПодключенияMS.TerminalConnector) = "COMОбъект";
	//	Если ЗначениеЗаполнено(СтруктураПодключенияMS.StorageConnector.ИдПодключеннойБазы) тогда
	//		ЕстьПодключение = СтруктураПодключенияMS.StorageConnector.ПроверитьСоединение();
	//	Иначе
	//		ЕстьПодключение = Ложь;
	//	КонецЕсли;
	КонецЕсли;	
	
	//Если НЕ ЕстьПодключение Тогда
	//	ВызватьИсключение "Отсутствует соединение с базой Mobile SMARTS";
	//Иначе
		Возврат ЕстьПодключение;
	//КонецЕсли;				
	
КонецФункции

Функция КомЯдро_ПолучитьСтруктуруПодключенияБазыСМАРТС(ID_ПодключаемойБазы, mXmlDoc)
	
	TerminalConnector = Неопределено;
	Попытка
		TerminalConnector = Новый COMОбъект("AddIn.Cl.TerminalConnector");
		КОМсоздан = Истина;
	Исключение
		КОМсоздан = Ложь;
	КонецПопытки;
	
	Если TerminalConnector = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	TerminalConnector.SetOneCVersion("v8");
	StorageConnector  = TerminalConnector.StorageConnector;
	
	Если mXmlDoc = Неопределено Тогда
		SessionSMARTS = Неопределено;
	Иначе
		SessionSMARTS = StorageConnector.FromXml(mXmlDoc);		
		ID_ПодключаемойБазы  = SessionSMARTS.ServerAppInstanceId;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ID_ПодключаемойБазы) Тогда 
		СписокБаз = Новый Массив;
		СписокБаз.Добавить(ID_ПодключаемойБазы);
		TerminalConnector.Подключить(СписокБаз,"");
	КонецЕсли;
	
	СтруктураПодключенияMSСМАРТС = Новый Структура;
	СтруктураПодключенияMSСМАРТС.Вставить("TerminalConnector", TerminalConnector);
	СтруктураПодключенияMSСМАРТС.Вставить("StorageConnector", StorageConnector);
	СтруктураПодключенияMSСМАРТС.Вставить("SessionSMARTS", SessionSMARTS);
	СтруктураПодключенияMSСМАРТС.Вставить("IdBaseSMARTS", ID_ПодключаемойБазы);
	
	Возврат СтруктураПодключенияMSСМАРТС;
	
КонецФункции

Функция КомЯдро_ПолучитьОшибку()
	ОписаниеОшибки = "";
	Ошибка = СтруктураПодключенияMS.TerminalConnector.ПолучитьОшибку(ОписаниеОшибки);
	Возврат ОписаниеОшибки;
КонецФункции

Функция ГлЯдро_ПроверитьСозданиеКОМОбъекта() Экспорт
	Возврат КОМСоздан;
КонецФункции

#КонецОбласти

#Область КомпонентаMobileSMARTS_БазыSMARTS

Функция КомЯдро_ПолучитьСписокБазНаСервереSMARTS()
	
	Если НЕ КомЯдро_ПодключитьсяКСерверуSMARTS() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Результат = Новый ТаблицаЗначений;
	Результат.Колонки.Добавить("Ид");
	Результат.Колонки.Добавить("Имя");
	Результат.Колонки.Добавить("Комментарий");
	Результат.Колонки.Добавить("СтрокаПодключения");
	Результат.Колонки.Добавить("РабочийКаталог");
	Результат.Колонки.Добавить("ИдПриложения");
	Результат.Колонки.Добавить("ИдОсновногоПриложения");
	Результат.Колонки.Добавить("ИмяПриложения");
	Результат.Колонки.Добавить("УровеньПриложения");
	Результат.Колонки.Добавить("ПапкаОбмена");
	Результат.Колонки.Добавить("РаботаСУстройствомНапрямую");
	Результат.Колонки.Добавить("РаботаСКаталогом");
	Результат.Колонки.Добавить("РаботаССервером");
	Результат.Колонки.Добавить("РаботаСЛокальнымСервером");
	Результат.Колонки.Добавить("РаботаСУдаленнымСервером");
	Результат.Колонки.Добавить("ИмяИнтеграционнойОбработки");
	Результат.Колонки.Добавить("ПутьИнтеграционнойОбработки");
	
	СписокБазНаСервере = СтруктураПодключенияMS.TerminalConnector.ПолучитьСписокБазСМАРТС("");
	Для Индекс = 0 По СписокБазНаСервере.Количество - 1 Цикл
		ВыбраннаяБазаSMARTS = СписокБазНаСервере.Элемент(Индекс);
		НастройкиБазыСМАРТС = ВыбраннаяБазаSMARTS.ПолучитьНастройки();   	
		
		СтрокаСписка = Результат.Добавить();
		СтрокаСписка.Ид                = ВыбраннаяБазаSMARTS.Ид;
		СтрокаСписка.Имя               = ВыбраннаяБазаSMARTS.Имя;
		СтрокаСписка.Комментарий       = ВыбраннаяБазаSMARTS.Комментарий;
		СтрокаСписка.СтрокаПодключения = ВыбраннаяБазаSMARTS.СтрокаПодключения;
		СтрокаСписка.РабочийКаталог    = ВыбраннаяБазаSMARTS.РабочийКаталог;
		СтрокаСписка.ИдПриложения      = ВыбраннаяБазаSMARTS.Приложение.Id;
		СтрокаСписка.ИмяПриложения     = ВыбраннаяБазаSMARTS.Приложение.Name;
		СтрокаСписка.УровеньПриложения = ВыбраннаяБазаSMARTS.Приложение.Level;
		СтрокаСписка.ИдОсновногоПриложения	 	= ВыбраннаяБазаSMARTS.Приложение.ParentId;
		СтрокаСписка.РаботаСУстройствомНапрямую = НастройкиБазыСМАРТС.РаботаСУстройствомНапрямую;
		СтрокаСписка.РаботаСКаталогом           = НастройкиБазыСМАРТС.РаботаСКаталогом;
		СтрокаСписка.РаботаССервером            = НастройкиБазыСМАРТС.РаботаССервером;
		СтрокаСписка.РаботаСЛокальнымСервером   = НастройкиБазыСМАРТС.РаботаСЛокальнымСервером;
		СтрокаСписка.РаботаСУдаленнымСервером   = НастройкиБазыСМАРТС.РаботаСУдаленнымСервером;
		СтрокаСписка.ПапкаОбмена = НастройкиБазыСМАРТС.ПолучитьТекущуюПапкуОбмена();
		
		Попытка // Если нет связи с удаленной базой смартс, то платформа выдает ошибку
			ИмяИнтеграционнойОбработки 	= НастройкиБазыСМАРТС.Получить("ИмяИнтеграционнойОбработкиКонфигурации1С");
			ПутьИнтеграционнойОбработки = НастройкиБазыСМАРТС.Получить("ПутьИнтеграционнойОбработкиКонфигурации1С");
		Исключение
			ИмяИнтеграционнойОбработки 	= Неопределено;
			ПутьИнтеграционнойОбработки = Неопределено;
		КонецПопытки;

		СтрокаСписка.ИмяИнтеграционнойОбработки  = ?(ИмяИнтеграционнойОбработки = Неопределено,"ИнтеграционнаяОбработка.epf",ИмяИнтеграционнойОбработки);
		СтрокаСписка.ПутьИнтеграционнойОбработки = ?(ИмяИнтеграционнойОбработки = Неопределено,"\Обработки 1С\Обработки интеграции\",ПутьИнтеграционнойОбработки);
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция КомЯдро_ПолучитьБазуНаСервереSMARTS(ИдентификаторБазы = "")
	
	Если ИдентификаторБазы = "" Тогда
		БазаSMARTS = СтруктураПодключенияMS.TerminalConnector.ПолучитьБазуСМАРТСПоИД(СтруктураПодключенияMS.IdBaseSMARTS);
	Иначе
		БазаSMARTS = СтруктураПодключенияMS.TerminalConnector.ПолучитьБазуСМАРТСПоИД(ИдентификаторБазы);
	КонецЕсли;
	
	Возврат БазаSMARTS;
	
КонецФункции

#КонецОбласти

#Область КомпонентаMobileSMARTS_НастройкиSMARTS

Функция КомЯдро_ПолучитьНастройкиНаСервереSMARTS(ИдентификаторБазы = Неопределено)
	
	НастройкиБазыSMARTS = Неопределено;
	Если ИдентификаторБазы = Неопределено Тогда 
		БазаSMARTS = КомЯдро_ПолучитьБазуНаСервереSMARTS(СтруктураПодключенияMS.IdBaseSMARTS);
	Иначе
		БазаSMARTS = КомЯдро_ПолучитьБазуНаСервереSMARTS(ИдентификаторБазы);
	КонецЕсли;
	Если БазаSMARTS <> Неопределено Тогда
		НастройкиБазыSMARTS = БазаSMARTS.ПолучитьНастройки();
	КонецЕсли;
	
	Возврат НастройкиБазыSMARTS;
	
КонецФункции

Функция КомЯдро_ЗаполнитьНастройкиSMARTS(СтруктураНастроек, УзловыеНастройки, ID_Узла = "")
	
	Если НЕ КомЯдро_ПодключитьсяКСерверуSMARTS() Тогда
		Возврат СтруктураНастроек;
	КонецЕсли;
	
	НастройкиБазыSMARTS = КомЯдро_ПолучитьНастройкиНаСервереSMARTS();
	Если НастройкиБазыSMARTS = Неопределено Тогда
		Возврат СтруктураНастроек;
	КонецЕсли;
	
	Для Каждого Настройка Из СтруктураНастроек Цикл
		ИтоговыйКлючНастройки = Настройка.Ключ;
		Если УзловыеНастройки.Найти(Настройка.Ключ) <> Неопределено Тогда
			ИтоговыйКлючНастройки = ИтоговыйКлючНастройки + ?(ID_Узла = "", "", "_"+ ID_Узла);
		КонецЕсли;
		ЗначениеНастройки = НастройкиБазыSMARTS.Получить(ИтоговыйКлючНастройки);
		// Для совместимости со старыми настройками
		Если ЗначениеНастройки = "Да" Тогда
			ЗначениеНастройки = Истина;
		ИначеЕсли ЗначениеНастройки = "Нет" Тогда
			ЗначениеНастройки = Ложь;	
		КонецЕсли;
		СтруктураНастроек.Вставить(Настройка.Ключ, ?(ЗначениеНастройки = Неопределено, Ложь, ЗначениеНастройки));
	КонецЦикла;
	
	Возврат СтруктураНастроек;
	
КонецФункции

Процедура КомЯдро_ЗаписатьНастройкиSMARTS(СтруктураНастроек, УзловыеНастройки, ID_Узла = "")
	
	Если НЕ КомЯдро_ПодключитьсяКСерверуSMARTS() Тогда
		Возврат;
	КонецЕсли;
	
	БазаSMARTS = КомЯдро_ПолучитьБазуНаСервереSMARTS(СтруктураПодключенияMS.IdBaseSMARTS); 
	Если БазаSMARTS = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	НастройкиБазыSMARTS = БазаSMARTS.ПолучитьНастройки();
	Если НастройкиБазыSMARTS = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого Настройка Из СтруктураНастроек Цикл
		ИтоговыйКлючНастройки = Настройка.Ключ;
		Если УзловыеНастройки.Найти(Настройка.Ключ) <> Неопределено Тогда
			ИтоговыйКлючНастройки = ИтоговыйКлючНастройки + ?(ID_Узла = "", "", "_"+ ID_Узла);
		КонецЕсли;
		НастройкиБазыSMARTS.Настройка(ИтоговыйКлючНастройки).Значение = Настройка.Значение;
	КонецЦикла;
	
	БазаSMARTS.СохранитьНастройки(НастройкиБазыSMARTS);
	
	StorageConnector 	= СтруктураПодключенияMS.StorageConnector;
	ConnectorID 		= "OneC_Connector";
	
	Попытка
		StorageConnector.DeinitializeConnector(ConnectorID);	
	Исключение	
	КонецПопытки; 	
	
	// StorageConnector явно можно не инициализировать, т.к. это долго ( ~8 сек),
	// а количество интерактивных сохранений настроек может быть много
	// Данная инициализация будет выполняться при запросе с терминала
	
	//StorageConnector.InitializeConnector(ConnectorID);	
	
КонецПроцедуры

Процедура КомЯдро_УдалитьНастройкиSMARTS(СтруктураНастроек, УзловыеНастройки, ID_Узла = "")
	
	Если НЕ КомЯдро_ПодключитьсяКСерверуSMARTS() Тогда
		Возврат;
	КонецЕсли;
	
	БазаSMARTS = КомЯдро_ПолучитьБазуНаСервереSMARTS(СтруктураПодключенияMS.IdBaseSMARTS); 
	Если БазаSMARTS = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	НастройкиБазыSMARTS = БазаSMARTS.ПолучитьНастройки();
	Если НастройкиБазыSMARTS = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого Настройка Из СтруктураНастроек Цикл
		ИтоговыйКлючНастройки = Настройка.Ключ;
		Если УзловыеНастройки.Найти(Настройка.Ключ) <> Неопределено Тогда
			ИтоговыйКлючНастройки = ИтоговыйКлючНастройки + ?(ID_Узла = "", "", "_"+ ID_Узла);
		КонецЕсли;
		НастройкиБазыSMARTS.Удалить(ИтоговыйКлючНастройки);
	КонецЦикла;
	
	БазаSMARTS.СохранитьНастройки(НастройкиБазыSMARTS);
	
КонецПроцедуры

#КонецОбласти

#Область КомпонентаMobileSMARTS_EnironmentSMARTS

Функция КомЯдро_ПолучитьМетаданныеДокументовMS()
	
	Если НЕ КомЯдро_ПодключитьсяКСерверуSMARTS() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если НЕ СтруктураПодключенияMS.Свойство("Окружение") ИЛИ СтруктураПодключенияMS.Окружение = Неопределено Тогда
		СтруктураПодключенияMS.Вставить("Окружение", СтруктураПодключенияMS.TerminalConnector.GetEnvironment());
	КонецЕсли;
	
	МетаданныеДокументовMS = Новый Структура;
	
	СписокОбязательныхПолей = Новый СписокЗначений;
	СписокОбязательныхПолей.Добавить("Ид", "Идентификатор");
	СписокОбязательныхПолей.Добавить("СозданНаТСД", "Создан на ТСД");
	СписокОбязательныхПолей.Добавить("Имя", "Имя");
	СписокОбязательныхПолей.Добавить("Назначение", "Назначение");
	СписокОбязательныхПолей.Добавить("ДатаСоздания", "Дата создания");
	СписокОбязательныхПолей.Добавить("ИмяТипаДокумента", "Имя типа документа");
	СписокОбязательныхПолей.Добавить("ИдСклада", "Идентификатор склада");
	СписокОбязательныхПолей.Добавить("Штрихкод", "Штрихкод");
	СписокОбязательныхПолей.Добавить("Приоритет", "Приоритет");
	СписокОбязательныхПолей.Добавить("Описание", "Описание");
	СписокОбязательныхПолей.Добавить("ВыдаватьПоШтрихкоду", "Выдавать по штрихкоду");
	СписокОбязательныхПолей.Добавить("ИсполняемыйНаСервере", "Исполняемый на сервере");
	СписокОбязательныхПолей.Добавить("Завершен", "Завершен");
	СписокОбязательныхПолей.Добавить("ВОбработке", "В обработке");
	СписокОбязательныхПолей.Добавить("Изменен", "Изменен");
	СписокОбязательныхПолей.Добавить("ИдПользователя", "Идентификатор пользователя");
	
	СписокОбязательныхПолейТЧ = Новый СписокЗначений;
	СписокОбязательныхПолейТЧ.Добавить("ИдТовара", "Идентификатор номенклатуры");
	СписокОбязательныхПолейТЧ.Добавить("ИдУпаковки", "Идентификатор упаковки");
	СписокОбязательныхПолейТЧ.Добавить("КоличествоПлан", "Количество (План)");
	СписокОбязательныхПолейТЧ.Добавить("КоличествоФакт", "Количество (Факт)");
	СписокОбязательныхПолейТЧ.Добавить("ИдПервогоМеста", "Ид первого места");
	СписокОбязательныхПолейТЧ.Добавить("ИдВторогоМеста", "Ид второго места");
	СписокОбязательныхПолейТЧ.Добавить("ШтрихкодПервогоМеста", "Штрихкод первого места");
	СписокОбязательныхПолейТЧ.Добавить("ШтрихкодВторогоМеста", "Штрихкод второго места");
	СписокОбязательныхПолейТЧ.Добавить("КодЕдиницыХранения", "Код единицы хранения");
	СписокОбязательныхПолейТЧ.Добавить("ДатаРегистрации", "Дата регистрации");
	СписокОбязательныхПолейТЧ.Добавить("СрокГодности", "Срок годности");
	СписокОбязательныхПолейТЧ.Добавить("Переполнение", "Переполнение");
	СписокОбязательныхПолейТЧ.Добавить("Недобор", "Недобор");
	СписокОбязательныхПолейТЧ.Добавить("ЕстьНедоборИлиПереполнение", "Есть недобор или переполнение");
	СписокОбязательныхПолейТЧ.Добавить("Остаток", "Остаток");
	//СписокОбязательныхПолейТЧ.Добавить("СвязаннаяСтрока", "Связанная строка");
	СписокОбязательныхПолейТЧ.Добавить("BindedLine", "Связанная строка");
	
	РеквизитыСерии = Новый СписокЗначений;
	РеквизитыСерии.Добавить("ИдСерии", "Идентификатор Серии");
	РеквизитыСерии.Добавить("ИмяСерии", "Имя серии");
	РеквизитыСерии.Добавить("ДатаСерии", "Дата серии");
	РеквизитыСерии.Добавить("НомерСерии", "Номер серии");
	//РеквизитыСерии.Добавить("СерияДополнительно", "Дополнительно");
	РеквизитыСерии.Добавить("ИдТовара", "Идентификатор Номенклатуры");
	РеквизитыСерии.Добавить("КоличествоФакт", "Количество (Факт)");
	РеквизитыСерии.Добавить("Характеристика", "Характеристика");
	
	РеквизитыСерийныеНомера = Новый СписокЗначений;
	РеквизитыСерийныеНомера.Добавить("СН", "Серийный номер");
	РеквизитыСерийныеНомера.Добавить("ИдСерии", "Идентификатор Серии");
	РеквизитыСерийныеНомера.Добавить("ИдТовара", "Идентификатор Номенклатуры");
	РеквизитыСерийныеНомера.Добавить("КоличествоФакт", "Количество (факт)");
	РеквизитыСерийныеНомера.Добавить("Характеристика", "Характеристика");
	
	Для Каждого ТипДокумента из СтруктураПодключенияMS.Окружение.DocumentTypes Цикл
		
		Если ТипДокумента.Virtual ИЛИ ТипДокумента.RemoveAfterFinish Тогда    //  Виртуальный, УдалятьСразуПослеЗавершения	
			Продолжить;
		КонецЕсли;
		
		СтруктураДокумента = Новый Структура();
		СтруктураДокумента.Вставить("Имя", ТипДокумента.Name);
		СтруктураДокумента.Вставить("Синоним", ТипДокумента.Alias);
		// реквизиты документа
		СписокРеквизитов = КомЯдро_ПолучитьСписокРеквизитовСущностиMS(ТипДокумента.Fields, СписокОбязательныхПолей);
		СтруктураДокумента.Вставить("Реквизиты", СписокРеквизитов);
		// реквизиты табличной части
		СписокРеквизитов = КомЯдро_ПолучитьСписокРеквизитовСущностиMS(ТипДокумента.Columns, СписокОбязательныхПолейТЧ);
		СтруктураДокумента.Вставить("РеквизитыТЧ", СписокРеквизитов);
		// серии и серийные номера
		СтруктураДокумента.Вставить("РеквизитыСерии", РеквизитыСерии);
		СтруктураДокумента.Вставить("РеквизитыСерийныеНомера", РеквизитыСерийныеНомера);
		
		// + ZHKN 12.09.2017
		// Дополнительные таблицы
		СписокДополнительныхТаблиц = Новый СписокЗначений();
			
		Для ИндексТаблицы = 0 По ТипДокумента.Tables.Count-1 Цикл 
			ДопТаблица = ТипДокумента.Tables.Item(ИндексТаблицы); 	
			СписокПолейДопТаблицы = КомЯдро_ПолучитьСписокРеквизитовСущностиMS(ДопТаблица.Fields);
			СписокДополнительныхТаблиц.Добавить(СписокПолейДопТаблицы, ДопТаблица.Name);
		КонецЦикла;
									
		СтруктураДокумента.Вставить("ДополнительныеТаблицы", СписокДополнительныхТаблиц);									
		// - ZHKN 12.09.2017
		
		МетаданныеДокументовMS.Вставить(ТипДокумента.Name, СтруктураДокумента);
		
	КонецЦикла; 
	
	Возврат МетаданныеДокументовMS;
	
КонецФункции

Функция КомЯдро_ПолучитьСписокРеквизитовСущностиMS(СущностьMS, ДополнительныйСписок = Неопределено)
	
	СписокРеквизитов = Новый СписокЗначений;
	Для Индекс = 0 По СущностьMS.Количество - 1 Цикл
		ДанныеРеквизита = СущностьMS.Элемент(Индекс);
		Если НЕ ДанныеРеквизита.ReadOnly Тогда
			СписокРеквизитов.Добавить(ДанныеРеквизита.ИмяПоля, ДанныеРеквизита.ИмяПоля);
		КонецЕсли;
	КонецЦикла;
	
	Если ДополнительныйСписок <> Неопределено Тогда
		Для Каждого ДополнительныйЭлемент Из ДополнительныйСписок Цикл
			СписокРеквизитов.Добавить(ДополнительныйЭлемент.Значение, ДополнительныйЭлемент.Значение);
		КонецЦикла;
	КонецЕсли;
	
	СписокРеквизитов.СортироватьПоЗначению();
	
	Возврат СписокРеквизитов;
	
КонецФункции

Процедура КомЯдро_ОбновитьШаблоныВесовогоТовараMS(ТаблицаШаблонов)
	
	Если НЕ КомЯдро_ПодключитьсяКСерверуSMARTS() Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ СтруктураПодключенияMS.Свойство("Окружение") ИЛИ СтруктураПодключенияMS.Окружение = Неопределено Тогда
		СтруктураПодключенияMS.Вставить("Окружение", СтруктураПодключенияMS.TerminalConnector.GetEnvironment());
	КонецЕсли;
	
	КоллекцияШаблонов = СтруктураПодключенияMS.Окружение.ProductSchema.CommonTemplates;
	
	// Удаление существующих шаблонов
	КоличествоШаблоновКУдалению = КоллекцияШаблонов.Количество;
	Для Счетчик = -(КоличествоШаблоновКУдалению-1) По 0 Цикл
		ТекущийШаблон = КоллекцияШаблонов.Элемент(-Счетчик);
		Если Найти(ТекущийШаблон, "OneC:1") > 0 Тогда
			КоллекцияШаблонов.Удалить(ТекущийШаблон);
		КонецЕсли;
	КонецЦикла;
	
	// Добавление новых шаблонов
	Для Каждого Шаблон из ТаблицаШаблонов Цикл
		ЦелаяЧасть = Шаблон.ЦелаяЧасть - СтрДлина(Шаблон.Префикс);
		Если Шаблон.ПрефиксВключенВКод Тогда
			КоллекцияШаблонов.Добавить("{Barcode:@" + Шаблон.Префикс + ".{" + Шаблон.ДлинаКодаВесовогоТовара + "}}{Quantity:" + ЦелаяЧасть + "." + Шаблон.ДробнаяЧасть + "}{OneC:1}");
		Иначе
			КоллекцияШаблонов.Добавить(Шаблон.Префикс + "{Barcode:" + Шаблон.ДлинаКодаВесовогоТовара + "}{Quantity:" + ЦелаяЧасть + "." + Шаблон.ДробнаяЧасть + "}{OneC:1}");
		КонецЕсли;
	КонецЦикла;
	
	СтруктураПодключенияMS.TerminalConnector.SetEnvironment(СтруктураПодключенияMS.Окружение);
	
КонецПроцедуры

Функция КомЯдро_ПолучитьПользователейMS()
	
	Если НЕ КомЯдро_ПодключитьсяКСерверуSMARTS() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если НЕ СтруктураПодключенияMS.Свойство("Окружение") ИЛИ СтруктураПодключенияMS.Окружение = Неопределено Тогда
		СтруктураПодключенияMS.Вставить("Окружение", СтруктураПодключенияMS.TerminalConnector.GetEnvironment());
	КонецЕсли;
	
	СписокПользователейMS = Новый СписокЗначений;
	
	СписокПользователейMS.Добавить("Выгружать всем;Выгружать всем"); 	
	СписокПользователейMS.Добавить("Спрашивать при выгрузке;Спрашивать при выгрузке");	
	
	Для Инд = 0 По СтруктураПодключенияMS.Окружение.Users.count - 1 Цикл
		ТекущийПользователь = СтруктураПодключенияMS.Окружение.Users.Item(Инд);
		СписокПользователейMS.Добавить(ТекущийПользователь.Id + ";" + ТекущийПользователь.Name, ТекущийПользователь.GroupId + ";" + ТекущийПользователь.GroupName);
	КонецЦикла;	
	
	ПользователиMS = Новый ДеревоЗначений;
	ПользователиMS.Колонки.Добавить("Выгружать", 			Новый ОписаниеТипов("Булево"), "Выгружать");
	ПользователиMS.Колонки.Добавить("ГруппаПользователь", 	Новый ОписаниеТипов("Строка"), "Группа/пользователь");
	ПользователиMS.Колонки.Добавить("ИдГруппыПользователя", Новый ОписаниеТипов("Строка"), "Ид группы/пользователя");	
	
	Для Каждого Пользователь из СписокПользователейMS Цикл
		
		ИдИИмяПользователя 	= ГлЯдро_РазложитьСтрокуВМассивПодстрок(Пользователь.Значение, 		";");
		ИдИИмяГруппы 		= ГлЯдро_РазложитьСтрокуВМассивПодстрок(Пользователь.Представление, ";");
		
		Если ИдИИмяГруппы.Количество() >= 2 Тогда
			ИдГруппы  	= ИдИИмяГруппы[0];
			ИмяГруппы 	= ИдИИмяГруппы[1];			
		Иначе
			ИдГруппы 	= Неопределено;
			ИмяГруппы 	= Неопределено;			
		КонецЕсли;	
		
		ИдПользователя  = ИдИИмяПользователя[0];
		ИмяПользователя = ИдИИмяПользователя[1];		
		
		// Если у элемента нет группы, значит, элемент сам является группой, добавляем его в корень дерева пользователей MS
		Если ИдГруппы = Неопределено Тогда
			
			СтрокаДерева 						= ПользователиMS.Строки.Добавить();
			СтрокаДерева.ИдГруппыПользователя 	= ИдПользователя;
			СтрокаДерева.ГруппаПользователь 	= ИмяПользователя;					
			
		Иначе	
			
			// иначе - ищем группу в корне дерева
			СтрокаПоискаГруппы = ПользователиMS.Строки.Найти(ИдГруппы, "ИдГруппыПользователя");			
			
			// если не нашли, добавляем группу в корень дерева, а в группу - пользователя
			Если СтрокаПоискаГруппы = Неопределено Тогда
				
				СтрокаГруппы 						= ПользователиMS.Строки.Добавить();
				СтрокаГруппы.ИдГруппыПользователя 	= ИдГруппы;
				СтрокаГруппы.ГруппаПользователь 	= ИмяГруппы;
				
				СтрокаПользователя 						= СтрокаГруппы.Строки.Добавить();
				СтрокаПользователя.ИдГруппыПользователя = ИдПользователя;
				СтрокаПользователя.ГруппаПользователь 	= ИмяПользователя;			
				
			Иначе
				
				// иначе - добавляем в найденную группу пользователя
				СтрокаДерева 						= СтрокаПоискаГруппы.Строки.Добавить();
				СтрокаДерева.ИдГруппыПользователя 	= ИдПользователя;
				СтрокаДерева.ГруппаПользователь 	= ИмяПользователя;			
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;	
	
	Возврат ПользователиMS;
	
КонецФункции

#КонецОбласти

#Область КомпонентаMobileSMARTS_ДокументыSMARTS

Функция КомЯдро_СформироватьНовыйДокументSMARTS(ДанныеДокумента,НазначенныйПользователь = "")
	
	ДокументSMARTS = Новый COMОбъект("Cleverence.Warehouse.Document");
	
	Для Каждого РеквизитДокумента Из ДанныеДокумента.ШапкаДокумента Цикл
		Попытка
			ДокументSMARTS.SetField(РеквизитДокумента.Ключ, РеквизитДокумента.Значение);
		Исключение
		КонецПопытки;
	КонецЦикла;
	
	Если НазначенныйПользователь <> "" Тогда 
		ДокументSMARTS.SetField("Назначение", НазначенныйПользователь);
		ДокументSMARTS.SetField("Ид",ДокументSMARTS.Id+"#"+СтрЗаменить(НазначенныйПользователь,"|",""))
	КонецЕсли;
	
	Если ДанныеДокумента.Свойство("ТабличныеЧасти") И ДанныеДокумента.ТабличныеЧасти.Количество() > 0 Тогда
		Для Каждого ТабличнаяЧасть Из ДанныеДокумента.ТабличныеЧасти Цикл
			Если КомЯдро_ЭтоОсновнаяТаблица(ТабличнаяЧасть.Ключ) Тогда
				Для каждого СтрокаТЧ Из ТабличнаяЧасть.Значение Цикл												
					СтрокаДокументаSMARTS = Новый COMОбъект("Cleverence.Warehouse.DocumentItem");
					Для Каждого РеквизитСтроки Из СтрокаТЧ Цикл
						Попытка
							СтрокаДокументаSMARTS.SetField(РеквизитСтроки.Ключ, РеквизитСтроки.Значение);
						Исключение
						КонецПопытки;
					КонецЦикла;
					
					ДокументSMARTS[ТабличнаяЧасть.Ключ].Добавить(СтрокаДокументаSMARTS);					
				КонецЦикла; 
			Иначе
				ДопТаблицаSMARTS = Новый COMОбъект("Cleverence.Warehouse.Table");		
				ДопТаблицаSMARTS.Name = ТабличнаяЧасть.Ключ;
				
				Для каждого СтрокаТЧ Из ТабличнаяЧасть.Значение Цикл
					Row = Новый COMОбъект("Cleverence.Warehouse.Row");
					Для Каждого РеквизитСтроки Из СтрокаТЧ Цикл
						Попытка
							Row.SetField(РеквизитСтроки.Ключ, РеквизитСтроки.Значение);
						Исключение
						КонецПопытки;
					КонецЦикла;
					ДопТаблицаSMARTS.Rows.Add(Row);
				КонецЦикла;
				ДокументSMARTS.Tables.Add(ДопТаблицаSMARTS);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат ДокументSMARTS;
	
КонецФункции

Функция КомЯдро_ЭтоОсновнаяТаблица(ИмяТаблицы) 
	
	ОсновныеТЧ = Новый Массив;
	ОсновныеТЧ.Добавить("СтрокиПлан");
	ОсновныеТЧ.Добавить("СтрокиФакт");
	ОсновныеТЧ.Добавить("СерииПлан");
	ОсновныеТЧ.Добавить("СерииФакт");
	ОсновныеТЧ.Добавить("СерийныеНомераПлан");
	ОсновныеТЧ.Добавить("СерийныеНомераФакт");
	Если ОсновныеТЧ.Найти(ИмяТаблицы) <> Неопределено Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
КонецФункции

Процедура КомЯдро_ЗаписатьДокументВБазуSMARTS(ДокументSMARTS, ID_БазыSMARTS = "", mXmlDoc = Неопределено)
	
	Если НЕ КомЯдро_ПодключитьсяКСерверуSMARTS(ID_БазыSMARTS, mXmlDoc) Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураПодключенияMS.StorageConnector.SetDocument(ДокументSMARTS);
	
КонецПроцедуры

Функция КомЯдро_ПолучитьСписокДокументовНаСервереSMARTS(ТаблицаДокументов, ID_БазыSMARTS = "")
	
	Если НЕ КомЯдро_ПодключитьсяКСерверуSMARTS(ID_БазыSMARTS) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	// заполняем таблицу
	СписокДокументовSMARTS = СтруктураПодключенияMS.TerminalConnector.ПолучитьДокументы(Неопределено);
	Для ИндексДокумента = 0 По СписокДокументовSMARTS.Количество - 1 Цикл
		ТекущаяСтрокаТаблицы = ТаблицаДокументов.Добавить();
		ЗаполнитьЗначенияСвойств(ТекущаяСтрокаТаблицы, СписокДокументовSMARTS.Элемент(ИндексДокумента));
		ТекущаяСтрокаТаблицы.СтрокиПланКоличество = СписокДокументовSMARTS.Элемент(ИндексДокумента).СтрокиПлан.Количество;
		ТекущаяСтрокаТаблицы.СтрокиФактКоличество = СписокДокументовSMARTS.Элемент(ИндексДокумента).СтрокиФакт.Количество;
		// убрать, когда все поля из платформы можно будет получать по ключу - []
		ТекущаяСтрокаТаблицы.НастройкаБизнесПроцесса 			= СписокДокументовSMARTS.Элемент(ИндексДокумента).ПолучитьПоле("НастройкаБизнесПроцесса");
		ТекущаяСтрокаТаблицы.ПредставлениеИмениДокумента 	= СписокДокументовSMARTS.Элемент(ИндексДокумента).ПолучитьПоле("ПредставлениеИмениДокумента");
		ТекущаяСтрокаТаблицы.ИдИсходныхДокументов 			= СписокДокументовSMARTS.Элемент(ИндексДокумента).ПолучитьПоле("ИдИсходныхДокументов");
	КонецЦикла;
	
	Возврат ТаблицаДокументов;
	
КонецФункции

Функция КомЯдро_ПолучитьДанныеДокументаНаСервереSMARTS(ID_Документа, СтруктураДокументаMS, ID_БазыSMARTS = "",ФильтрТЧПоИдДокумента = Неопределено)
	
	Если НЕ КомЯдро_ПодключитьсяКСерверуSMARTS(ID_БазыSMARTS) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ДокументSMARTS = СтруктураПодключенияMS.StorageConnector.ПолучитьДокумент(ID_Документа);
	
	ДанныеДокументаMS = Новый Структура;
	
	// Шапка
	РеквизитыШапки = Новый Структура;
	Для Каждого РеквизитДокумента Из СтруктураДокументаMS.Реквизиты Цикл
		Попытка
			РеквизитыШапки.Вставить(РеквизитДокумента.Значение, ДокументSMARTS.GetField(РеквизитДокумента.Значение));
		Исключение
			Сообщить("Реквизит с именем [" + РеквизитДокумента.Значение + "] отсутствует в шапке документа");
		КонецПопытки; 		
	КонецЦикла;
	ДанныеДокументаMS.Вставить("ШапкаДокумента", РеквизитыШапки);
	
	// Подготовка табличных частей
	ТабличнаяЧастьФакт = Новый ТаблицаЗначений;
	ТабличнаяЧастьПлан = Новый ТаблицаЗначений;
	ТабличнаяЧастьСовмещенные = Новый ТаблицаЗначений;
	Для Каждого РеквизитТЧ Из СтруктураДокументаMS.РеквизитыТЧ Цикл
		ТабличнаяЧастьФакт.Колонки.Добавить(РеквизитТЧ.Значение);
		ТабличнаяЧастьПлан.Колонки.Добавить(РеквизитТЧ.Значение);
		ТабличнаяЧастьСовмещенные.Колонки.Добавить(РеквизитТЧ.Значение);
	КонецЦикла;
	
	Для Каждого РеквизитСерии Из СтруктураДокументаMS.РеквизитыСерии Цикл
		// данное поле будет добавлено при заполнении вычислимых полей
		Если Найти(ВРег(СокрЛП("Характеристика")), ВРег(СокрЛП(РеквизитСерии.Значение))) Тогда
			Продолжить;
		КонецЕсли;	
		Если ТабличнаяЧастьФакт.Колонки.Найти(РеквизитСерии.Значение) = Неопределено Тогда
			ТабличнаяЧастьФакт.Колонки.Добавить(РеквизитСерии.Значение);
		КонецЕсли;	
		Если ТабличнаяЧастьПлан.Колонки.Найти(РеквизитСерии.Значение) = Неопределено Тогда
			ТабличнаяЧастьПлан.Колонки.Добавить(РеквизитСерии.Значение);
		КонецЕсли;	
	КонецЦикла;
	
	Для Каждого РеквизитСерийныеНомера Из СтруктураДокументаMS.РеквизитыСерийныеНомера Цикл
		// данное поле будет добавлено при заполнении вычислимых полей
		Если Найти(ВРег(СокрЛП("Характеристика")), ВРег(СокрЛП(РеквизитСерийныеНомера.Значение))) Тогда
			Продолжить;
		КонецЕсли;	
		Если ТабличнаяЧастьФакт.Колонки.Найти(РеквизитСерийныеНомера.Значение) = Неопределено Тогда
			ТабличнаяЧастьФакт.Колонки.Добавить(РеквизитСерийныеНомера.Значение);
		КонецЕсли;
		Если ТабличнаяЧастьПлан.Колонки.Найти(РеквизитСерийныеНомера.Значение) = Неопределено Тогда
			ТабличнаяЧастьПлан.Колонки.Добавить(РеквизитСерийныеНомера.Значение);
		КонецЕсли;	
	КонецЦикла;	
	
	// План
	Для Индекс = 0 По ДокументSMARTS.СтрокиПлан.Количество - 1 Цикл
		// фильтр ТЧ если она была объединена из нескольких документов
		Если ЗначениеЗаполнено(ФильтрТЧПоИдДокумента) Тогда
			ИдДокументаВладелецСтроки = ДокументSMARTS.СтрокиПлан.Элемент(Индекс).GetField("ИдДокумента");
			Если ИдДокументаВладелецСтроки <> ФильтрТЧПоИдДокумента Тогда
				Продолжить;
			КонецЕсли;
		КонецЕсли;

		НоваяСтрока = ТабличнаяЧастьПлан.Добавить();
		Для Каждого РеквизитТЧ Из ТабличнаяЧастьПлан.Колонки Цикл
			Попытка
				НоваяСтрока[РеквизитТЧ.Имя] = ДокументSMARTS.СтрокиПлан.Элемент(Индекс).GetField(РеквизитТЧ.Имя);
			Исключение
			    Сообщить("Реквизит с именем [" + РеквизитДокумента.Имя + "] отсутствует в табличной части [СтрокиПлан]");
			КонецПопытки; 			
		КонецЦикла;
	КонецЦикла;
	ДанныеДокументаMS.Вставить("СтрокиПлан", ТабличнаяЧастьПлан);
	
	// Факт
	Для Индекс = 0 По ДокументSMARTS.СтрокиФакт.Количество - 1 Цикл
		// фильтр ТЧ если она была объединена из нескольких документов
		Если ЗначениеЗаполнено(ФильтрТЧПоИдДокумента) Тогда
			ИдДокументаВладелецСтроки = ДокументSMARTS.СтрокиФакт.Элемент(Индекс).GetField("ИдДокумента");
			// Если ИдДокумента пустой, но не неопределено, то возможно это старая конфа и можно поискать в BindedLine
			Если ИдДокументаВладелецСтроки = "" Тогда
				СвязаннаяСтрокаИзФакта = ДокументSMARTS.СтрокиФакт.Элемент(Индекс).GetField("СвязаннаяСтрока");
				Если Найти(ВРег(СвязаннаяСтрокаИзФакта), ВРег(СокрЛП("COMОбъект")))  Тогда
					ИдДокументаВладелецСтроки = СвязаннаяСтрокаИзФакта.GetField("ИдДокумента")
				КонецЕсли;
			КонецЕсли;
			Если ИдДокументаВладелецСтроки <> ФильтрТЧПоИдДокумента 
				И НЕ (ID_Документа = ФильтрТЧПоИдДокумента И ИдДокументаВладелецСтроки = "") // Это условие нужно для загрузки всех строк, которых не было по плану в первый документ
				Тогда 
				Продолжить;
			КонецЕсли;
		КонецЕсли;

		НоваяСтрока = ТабличнаяЧастьФакт.Добавить();
		Для Каждого РеквизитТЧ Из ТабличнаяЧастьФакт.Колонки Цикл
			Попытка
				
				ЗначениеРеквизита = ДокументSMARTS.СтрокиФакт.Элемент(Индекс).GetField(РеквизитТЧ.Имя);
				
				Если Найти(ВРег(СокрЛП("BindedLine/СвязаннаяСтрока")), ВРег(СокрЛП(РеквизитТЧ.Имя))) Тогда
					
					СвязаннаяСтрока = Новый Структура;
					
					Для Каждого РеквизитСвязаннойСтроки Из ТабличнаяЧастьФакт.Колонки Цикл
																
						ЗначениеРеквизитаСвязаннойСтроки = ЗначениеРеквизита.GetField(РеквизитСвязаннойСтроки.Имя);					
						
						Если НЕ Найти(ВРег(СокрЛП(ЗначениеРеквизитаСвязаннойСтроки)), ВРег(СокрЛП("COMОбъект"))) Тогда
							
							СвязаннаяСтрока.Вставить(РеквизитСвязаннойСтроки.Имя, ЗначениеРеквизитаСвязаннойСтроки);
							
						КонецЕсли;							
						
						НоваяСтрока[РеквизитТЧ.Имя] = СвязаннаяСтрока;
					
					КонецЦикла;
					
				Иначе	
					
					НоваяСтрока[РеквизитТЧ.Имя] = ЗначениеРеквизита;
					
				КонецЕсли;	
											
			Исключение
			    //Сообщить("Реквизит с именем [" + РеквизитТЧ.Имя + "] отсутствует в табличной части [СтрокиФакт]");
			КонецПопытки; 			
		КонецЦикла;
	КонецЦикла;
	ДанныеДокументаMS.Вставить("СтрокиФакт", ТабличнаяЧастьФакт);
	
	// СовмещенныеСтроки
	Для Индекс = 0 По ДокументSMARTS.CombinedItems.Количество - 1 Цикл
		НоваяСтрока = ТабличнаяЧастьСовмещенные.Добавить();
		Для Каждого РеквизитТЧ Из ТабличнаяЧастьСовмещенные.Колонки Цикл
			Попытка
				
				ЗначениеРеквизита = ДокументSMARTS.CombinedItems.Элемент(Индекс).GetField(РеквизитТЧ.Имя);
				
				Если Найти(ВРег(СокрЛП("BindedLine/СвязаннаяСтрока")), ВРег(СокрЛП(РеквизитТЧ.Имя))) Тогда
					
					СвязаннаяСтрока = Новый Структура;
					
					Для Каждого РеквизитСвязаннойСтроки Из ТабличнаяЧастьСовмещенные.Колонки Цикл
																
						ЗначениеРеквизитаСвязаннойСтроки = ЗначениеРеквизита.GetField(РеквизитСвязаннойСтроки.Имя);					
						
						Если НЕ Найти(ВРег(СокрЛП(ЗначениеРеквизитаСвязаннойСтроки)), ВРег(СокрЛП("COMОбъект"))) Тогда
							
							СвязаннаяСтрока.Вставить(РеквизитСвязаннойСтроки.Имя, ЗначениеРеквизитаСвязаннойСтроки);
							
						КонецЕсли;																			
					
					КонецЦикла;
					
					НоваяСтрока[РеквизитТЧ.Имя] = СвязаннаяСтрока;
					
				Иначе	
					
					НоваяСтрока[РеквизитТЧ.Имя] = ЗначениеРеквизита;
					
				КонецЕсли;	
											
			Исключение
			    //Сообщить("Реквизит с именем [" + РеквизитТЧ.Имя + "] отсутствует в табличной части [СовмещенныеСтроки]");
			КонецПопытки; 			
		КонецЦикла;
	КонецЦикла;
	ДанныеДокументаMS.Вставить("СовмещенныеСтроки", ТабличнаяЧастьСовмещенные);	
	
	// Получение данных из доп.таблиц документа типа "ОплатыВозвраты", "Деньги" и т.д.
	Для каждого ДопТаблица Из СтруктураДокументаMS.ДополнительныеТаблицы Цикл		
		
		ИмяДопТаблицы			= ДопТаблица.Представление;
		СписокКолонокДопТаблицы = ДопТаблица.Значение;		
		ДопТабличнаяЧасть		= Новый ТаблицаЗначений;		
		
		Для каждого Колонка Из СписокКолонокДопТаблицы Цикл
			ДопТабличнаяЧасть.Колонки.Добавить(Колонка.Значение);					
		КонецЦикла; 
		
		СтрокиДокументаMS = ДокументSMARTS.ПолучитьПоле(ИмяДопТаблицы).Rows;				
		
		Для Индекс = 0 по СтрокиДокументаMS.Количество - 1 Цикл
			
			ТекущаяСтрокаMS	= СтрокиДокументаMS.Элемент(Индекс);			
			НоваяСтрока 	= ДопТабличнаяЧасть.Добавить();						
			
			Для Каждого Колонка из СписокКолонокДопТаблицы Цикл
				
				Попытка					
					ЗначениеРеквизита = ТекущаяСтрокаMS.ПолучитьПоле(Колонка.Значение);
				Исключение
					Попытка
						ЗначениеРеквизита = ТекущаяСтрокаMS[Колонка.Значение];											
					Исключение
						ЗначениеРеквизита = Неопределено;						
					КонецПопытки; 					
				КонецПопытки;		
								
				НоваяСтрока[Колонка.Значение] = ЗначениеРеквизита;				
				
			КонецЦикла;
							
			ПоляТекущейСтрокиMS = ТекущаяСтрокаMS.Поля;
			
			Для ИндексПоля = 0 По ПоляТекущейСтрокиMS.Количество - 1 Цикл
				
				ИмяПоля = ПоляТекущейСтрокиMS.Элемент(ИндексПоля).ИмяПоля;
				
				Если ДопТабличнаяЧасть.Колонки.Найти(ИмяПоля) = Неопределено Тогда							
					ДопТабличнаяЧасть.Колонки.Добавить(ИмяПоля);
				КонецЕсли;	
					
				Попытка					
					ЗначениеРеквизита = ТекущаяСтрокаMS.ПолучитьПоле(ИмяПоля);
				Исключение
					Попытка
						ЗначениеРеквизита = ТекущаяСтрокаMS[ИмяПоля];											
					Исключение
						ЗначениеРеквизита = Неопределено;						
					КонецПопытки; 					
				КонецПопытки;		
								
				НоваяСтрока[ИмяПоля] = ЗначениеРеквизита;										
				
			КонецЦикла;									
			
		КонецЦикла;	
		
		ДанныеДокументаMS.Вставить(ИмяДопТаблицы, ДопТабличнаяЧасть);	
		
	КонецЦикла;	
	
    // Получение данных доп.таблиц, которые не определены в метаданных документа, но существуют у самого экземпляра документа
    Для ИндексТаблицы = 0 По ДокументSMARTS.Таблицы.Количество - 1 Цикл
        
        ДопТаблицаMS = ДокументSMARTS.Таблицы.Элемент(ИндексТаблицы);
		
		Если ДопТаблицаMS.Строки.Количество = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		ДопТабличнаяЧасть 	= Новый ТаблицаЗначений;		
		ТекущаяСтрокаMS 	= ДопТаблицаMS.Строки.Элемент(0);				
		
		Для ИндексПоля = 0 По ТекущаяСтрокаMS.Поля.Количество - 1 Цикл		
			ДопТабличнаяЧасть.Колонки.Добавить(ТекущаяСтрокаMS.Поля.Элемент(ИндексПоля).ИмяПоля);					
		КонецЦикла; 				        
        
        Для ИндексСтроки = 0 По ДопТаблицаMS.Строки.Количество - 1 Цикл
            
            ТекущаяСтрокаMS = ДопТаблицаMS.Строки.Элемент(ИндексСтроки);            
            НоваяСтрока 	= ДопТабличнаяЧасть.Добавить();
            
            Для ИндексПоля = 0 По ТекущаяСтрокаMS.Поля.Количество - 1 Цикл
                
                ИмяПоля = ТекущаяСтрокаMS.Поля.Элемент(ИндексПоля).ИмяПоля;
                
                Попытка
                    ЗначениеРеквизита = ТекущаяСтрокаMS.ПолучитьПоле(ИмяПоля);
                Исключение
                    Попытка
                        ЗначениеРеквизита = ТекущаяСтрокаMS[ИмяПоля];
                    Исключение
                        ЗначениеРеквизита = Неопределено;
                    КонецПопытки;                 
                КонецПопытки;         	
                
                НоваяСтрока[ИмяПоля] = ЗначениеРеквизита;
                
            КонецЦикла;                                         
            
        КонецЦикла; 
        
        ДанныеДокументаMS.Вставить(ДопТаблицаMS.Имя, ДопТабличнаяЧасть);   
        
    КонецЦикла;	
	
	Возврат ДанныеДокументаMS;
	
КонецФункции

Функция КомЯдро_УдалитьДокументНаСервереSMARTS(ID_Документа, ID_БазыSMARTS = "")
	
	Если НЕ КомЯдро_ПодключитьсяКСерверуSMARTS(ID_БазыSMARTS) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	СтруктураПодключенияMS.StorageConnector.УдалитьДокумент(ID_Документа);
	
	Возврат Истина;
	
КонецФункции

Функция КомЯдро_УстановитьСтатусДокументаНаСервереSMARTS(ID_Документа, ID_БазыSMARTS = "", Статус)
	
	Если НЕ КомЯдро_ПодключитьсяКСерверуSMARTS(ID_БазыSMARTS) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ДокументSMARTS = СтруктураПодключенияMS.StorageConnector.ПолучитьДокумент(ID_Документа);			
	
	ДокументSMARTS.УстановитьПоле("Статус", Статус);
	ДокументSMARTS.Завершен = Ложь;
	ДокументSMARTS.ВОбработке = Ложь;
	
	Возврат Истина;
	
КонецФункции

#КонецОбласти

#Область КомпонентаMobileSMARTS_ТаблицыSMARTS

Функция КомЯдро_ВыгрузитьТаблицуНаСерверSMARTS(ИмяТаблицы, ДанныеДляВыгрузки, ID_БазыSMARTS = "", ПереписыватьНоменклатуруПриВыгрузке = Ложь)
	
	РезультатВыгрузки = Новый Структура;
	РезультатВыгрузки.Вставить("Статус"		, Истина);																			 
	РезультатВыгрузки.Вставить("Сообщение"	, "Таблица [" + ИмяТаблицы + "] успешно выгружена. Выгружено:" 
												+ Символы.ВК + Символы.Таб + "- " + Формат(ДанныеДляВыгрузки.МассивыСтрок.Количество(), "ЧН=0; ЧГ=3,0") + " строк");	
												
	Если ИмяТаблицы = "Номенклатура" Тогда											
		КоличествоРазличныхТоваров = ДанныеДляВыгрузки.КоличествоТоваров;
		РезультатВыгрузки.Сообщение = РезультатВыгрузки.Сообщение 
										+ Символы.ВК + Символы.Таб + "- " + Формат(КоличествоРазличныхТоваров, "ЧН=0; ЧГ=3,0") + " товаров";
	КонецЕсли;													
												
	Если НЕ КомЯдро_ПодключитьсяКСерверуSMARTS(ID_БазыSMARTS) Тогда
		РезультатВыгрузки.Вставить("Статус"		, Ложь);				
		РезультатВыгрузки.Вставить("Сообщение"	, "База Mobile SMARTS недоступна!");			
		Возврат РезультатВыгрузки;								
	КонецЕсли;		
	
	Если ИмяТаблицы = "Номенклатура" Тогда
		СтруктураПодключенияMS.TerminalConnector.ПерезаписыватьНоменклатуру(ПереписыватьНоменклатуруПриВыгрузке);
		РезультатПопытки = СтруктураПодключенияMS.TerminalConnector.НачатьВыгрузкуТоваров(ДанныеДляВыгрузки.МассивИмен);
	ИначеЕсли ИмяТаблицы = "Ячейки" Тогда	
		РезультатПопытки = СтруктураПодключенияMS.TerminalConnector.НачатьВыгрузкуЯчеек("1", ДанныеДляВыгрузки.МассивИмен, Истина);		
	Иначе
		РезультатПопытки = СтруктураПодключенияMS.TerminalConnector.НачатьВыгрузкуТаблицы(ИмяТаблицы, ДанныеДляВыгрузки.МассивИмен, Истина);
	КонецЕсли;
	
	Если НЕ РезультатПопытки Тогда				
		ОписаниеОшибки = КомЯдро_ПолучитьОшибку();								
		РезультатВыгрузки.Вставить("Статус"		, Ложь);				
		РезультатВыгрузки.Вставить("Сообщение"	, "Таблица [" + ИмяТаблицы + "] не выгружается!" + Символы.ВК + ОписаниеОшибки);		
		Возврат РезультатВыгрузки;				
	КонецЕсли;
	
	Если РезультатВыгрузки.Статус Тогда
		Для Каждого МассивСтрокиВыгрузки из ДанныеДляВыгрузки.МассивыСтрок Цикл
			Если ИмяТаблицы = "Номенклатура" Тогда
				РезультатПопытки = СтруктураПодключенияMS.TerminalConnector.ДобавитьВВыгрузкуТоваров(МассивСтрокиВыгрузки);
			ИначеЕсли ИмяТаблицы = "Ячейки" Тогда	
				РезультатПопытки = СтруктураПодключенияMS.TerminalConnector.ДобавитьВВыгрузкуЯчеек(МассивСтрокиВыгрузки);
			Иначе
				РезультатПопытки = СтруктураПодключенияMS.TerminalConnector.ДобавитьВВыгрузкуТаблицы(МассивСтрокиВыгрузки);
			КонецЕсли;
			Если НЕ РезультатПопытки Тогда
				ОписаниеОшибки = КомЯдро_ПолучитьОшибку();								
				РезультатВыгрузки.Вставить("Статус"		, Ложь);				
				РезультатВыгрузки.Вставить("Сообщение"	, "Ошибка выгрузки таблицы [" + ИмяТаблицы + "]." + Символы.ВК + ОписаниеОшибки);						
				Если ИмяТаблицы = "Ячейки" Тогда
					СтруктураПодключенияMS.TerminalConnector.ПрерватьВыгрузкуЯчеек();	
				ИначеЕсли ИмяТаблицы <> "Номенклатура" Тогда	
					СтруктураПодключенияMS.TerminalConnector.ПрерватьВыгрузкуТаблицы();			
				КонецЕсли;			
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если РезультатВыгрузки.Статус Тогда
		Если ИмяТаблицы = "Номенклатура" Тогда
			РезультатПопытки = СтруктураПодключенияMS.TerminalConnector.ЗавершитьВыгрузкуТоваров();	
		ИначеЕсли ИмяТаблицы = "Ячейки" Тогда	
			РезультатПопытки = СтруктураПодключенияMS.TerminalConnector.ЗавершитьВыгрузкуЯчеек();
		Иначе
			РезультатПопытки = СтруктураПодключенияMS.TerminalConnector.ЗавершитьВыгрузкуТаблицы();	
		КонецЕсли;
		
		Если НЕ РезультатПопытки Тогда
			РезультатВыгрузки.Вставить("Статус"		, Ложь);				
			РезультатВыгрузки.Вставить("Сообщение"	, "Не удалось закончить выгрузку таблицы [" + ИмяТаблицы + "]." + Символы.ВК + ОписаниеОшибки);
		КонецЕсли;
	КонецЕсли;

	СтруктураПодключенияMS.TerminalConnector.ОсвободитьРесурсы();
	
	Возврат РезультатВыгрузки;
	
КонецФункции

Функция КомЯдро_ОчиститьТаблицуНаСервереSMARTS(ИмяТаблицы, ID_БазыSMARTS = "") Экспорт

	РезультатВыгрузки = Новый Структура("Сообщение,Статус", "Таблица [" + ИмяТаблицы + "] успешно очищена", Истина);
	
	Если НЕ КомЯдро_ПодключитьсяКСерверуSMARTS(ID_БазыSMARTS) Тогда
		РезультатВыгрузки = Новый Структура("Сообщение,Статус", "Ошибка очистки таблицы [" + ИмяТаблицы + "]", Ложь);
		Возврат РезультатВыгрузки;
	КонецЕсли;
	
	Если ИмяТаблицы = "Номенклатура" Тогда
		СтруктураПодключенияMS.StorageConnector.ОчиститьСправочникТоваров();
	Иначе
		СтруктураПодключенияMS.StorageConnector.ОчиститьТаблицу(ИмяТаблицы);
	КонецЕсли;
	
	Возврат РезультатВыгрузки;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область ВнешниеВызовы

Функция ОбработатьЗапрос(ЗапросXML, userId, mXmlDoc = Неопределено) Экспорт
	
	Если НЕ НастройкиИнициализированы Тогда
		ГлЯдро_Инициализация();
	КонецЕсли;
	
	Если НЕ КомЯдро_ПодключитьсяКСерверуSMARTS(, mXmlDoc) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ГлЯдро_УстановитьДанныеТекущегоУзла(mXmlDoc);

	ДанныеДляВыгрузки = Неопределено;
	ОбъектЗапроса = СтруктураПодключенияMS.StorageConnector.FromXML(ЗапросXML);
	ИмяТаблицы = ОбъектЗапроса.From;
	
	Если ИмяТаблицы = "Узлы" Тогда				
		ДанныеДляВыгрузки = Новый ТаблицаЗначений;
		ДанныеДляВыгрузки.Колонки.Добавить("Ид");
		ДанныеДляВыгрузки.Колонки.Добавить("Наименование");
		ДанныеДляВыгрузки.Колонки.Добавить("Код");
		ДанныеДляВыгрузки.Колонки.Добавить("ШК");
		ДанныеДляВыгрузки.Колонки.Добавить("ЭтоПапка");
		ДанныеДляВыгрузки.Колонки.Добавить("ИдРодителя");
		ДанныеДляВыгрузки.Колонки.Добавить("НаименованиеДляПоиска");		 
		ДанныеДляВыгрузки.Колонки.Добавить("Владелец");		 
		ТаблицаМагазинов = ГлЯдро_ПолучитьИзКэшаНастройкуSMARTS("Узлы");
		ТаблицаПользователейТСД = ГлЯдро_ПолучитьНастройкуНаСервереSMARTS("ПользователиТСД");
		Если ТипЗнч(ТаблицаМагазинов) = Тип("ТаблицаЗначений") Тогда
			Для Каждого СтрокаТЗ из ТаблицаМагазинов Цикл
				НовСтрока = ДанныеДляВыгрузки.Добавить();
				НовСтрока.Ид = СтрокаТЗ.ID_Узла;
				НовСтрока.Наименование = СтрокаТЗ.Наименование;
				НовСтрока.Код = СтрокаТЗ.ID_Узла;
				НовСтрока.ШК = "";
				НовСтрока.ЭтоПапка = Ложь;
				НовСтрока.ИдРодителя = "";
				НовСтрока.НаименованиеДляПоиска = НРег(СтрокаТЗ.Наименование);
							
				СтрокаПользователейИГрупп = "";
				Если ТипЗнч(ТаблицаПользователейТСД) = Тип("ТаблицаЗначений") Тогда
					Для каждого Пользователь Из ТаблицаПользователейТСД Цикл							
						СимволВНачалеСтроки = ?(СтрокаПользователейИГрупп = "", "", ",");
						СтрокаПользователейИГрупп = СтрокаПользователейИГрупп + СимволВНачалеСтроки + """" + СокрЛП(Пользователь.ID_Пользователя) + """";			
					КонецЦикла; 										
				КонецЕсли;
				
				НовСтрока.Владелец = СтрокаПользователейИГрупп;
				
			КонецЦикла;
		КонецЕсли;
	ИначеЕсли ИмяТаблицы = "БизнесПроцессы" Тогда
		ДанныеДляВыгрузки = Новый ТаблицаЗначений;
		ДанныеДляВыгрузки.Колонки.Добавить("Ид");
		ДанныеДляВыгрузки.Колонки.Добавить("Наименование");
		ДанныеДляВыгрузки.Колонки.Добавить("ТипДокументаMobileSMARTS");
		ДанныеДляВыгрузки.Колонки.Добавить("ТипИсходногоДокумента");
		ДанныеДляВыгрузки.Колонки.Добавить("ТипРезультирующегоДокумента");
		ТаблицаБизнесПроцессов = ГлЯдро_ПолучитьИзКэшаНастройкуSMARTS("НастройкиБизнесПроцессов");
		Если ТипЗнч(ТаблицаБизнесПроцессов) = Тип("ТаблицаЗначений") Тогда
			Для Каждого СтрокаТЗ из ТаблицаБизнесПроцессов Цикл
				НовСтрока = ДанныеДляВыгрузки.Добавить();
				НовСтрока.Ид = СтрокаТЗ.ID_БизнесПроцесса;
				НовСтрока.Наименование = СтрокаТЗ.Название;
				НовСтрока.ТипДокументаMobileSMARTS = СтрокаТЗ.ТипДокументаMS;
				НовСтрока.ТипИсходногоДокумента = СтрокаТЗ.ТипИсходногоДокумента1С;
				НовСтрока.ТипРезультирующегоДокумента = СтрокаТЗ.ТипРезультирующегоДокумента1С;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	 
	Если ДанныеДляВыгрузки = Неопределено Тогда
		НастройкиКомпоновщика = "";
		Отбор = Новый Структура("ИмяТаблицы", ИмяТаблицы);
		НастройкаКомпоновщикаСтрокой = ГлЯдро_ПолучитьИзКэшаЗначениеТабличнойНастройкиSMARTS("НастройкиОбменаСправочников", Отбор, "НастройкаКомпоновщикаСтрокой");
		Если ЗначениеЗаполнено(НастройкаКомпоновщикаСтрокой) Тогда
			НастройкиКомпоновщика = ЗначениеИзСтрокиВнутр(НастройкаКомпоновщикаСтрокой);
		КонецЕслИ;
		ПараметрыКомпоновщика = ГлЯдро_ПолучитьЗначенияГлобальныхПараметров();
		ДанныеДляВыгрузки = ГлЯдро_ПолучитьДанныеТаблицыДляВыгрузкиНаСерверSMARTS(ИмяТаблицы, НастройкиКомпоновщика, ПараметрыКомпоновщика, ОбъектЗапроса.WhereRootElement);
	КонецЕсли;
	 
	Возврат ДанныеДляВыгрузки;
		
КонецФункции

Функция ПолучитьСписокДокументов(UserId = Неопределено, ТипДокумента = Неопределено, mXmlDoc = Неопределено) Экспорт
	
	Если НЕ НастройкиИнициализированы Тогда
		ГлЯдро_Инициализация();
	КонецЕсли;
	
	Если НЕ КомЯдро_ПодключитьсяКСерверуSMARTS(, mXmlDoc) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ГлЯдро_УстановитьДанныеТекущегоУзла(mXmlDoc);
	
	СтруктураНастроек = Новый Структура;
	НастройкиБП = ГлЯдро_ПолучитьИзКэшаНастройкуSMARTS("НастройкиБизнесПроцессов");
	
	СтруктураНастроек.Вставить("БизнесПроцессы", НастройкиБП);
	НастройкиОтборов = ГлЯдро_ПолучитьИзКэшаНастройкуSMARTS("НастройкиОтборовУзлов_Онлайн");
	Если ТипЗнч(НастройкиОтборов) <> Тип("ТаблицаЗначений") Тогда
		НастройкиОтборов = ГлЯдро_ПолучитьНастройкуНаСервереSMARTS("НастройкиОтборовУзлов_Онлайн");
	КонецЕсли;
	СтруктураНастроек.Вставить("НастройкиОтборов", НастройкиОтборов);
	ЗначенияПараметров = ГлЯдро_ПолучитьЗначенияГлобальныхПараметров();
	СтруктураНастроек.Вставить("ПараметрыУзлов", ЗначенияПараметров);
	
	ОтобранныеДокументы = ГлЯдро_ПолучитьСписокДокументов1С(СтруктураНастроек, ТипДокумента);
	
	ЕстьРеквизитЗаменыПредставления = НастройкиБП.Колонки.Найти("ЗаменитьПредставлениеДокументаПриВыгрузке") <> Неопределено;
	
	Если ОтобранныеДокументы <> Неопределено Тогда
		DocDescrs = Новый COMОбъект("Cleverence.Warehouse.DocumentDescriptionCollection");
		Для Каждого СтрокаДок из ОтобранныеДокументы Цикл
			DocDescr = Новый COMОбъект("Cleverence.Warehouse.DocumentDescription");
			DocDescr.Id = XMLСтрока(СтрокаДок.Ссылка);
			DocDescr.Name = Строка(СтрокаДок.Ссылка);
			DocDescr.DocumentTypeName = ТипДокумента;
			DocDescr.SetField("НастройкаБизнесПроцесса",СтрокаДок.НастройкаБизнесПроцесса);			
			DocDescr.SetField("ТипДокумента1С",СтрокаДок.ТипДокумента1С);
			Если ЕстьРеквизитЗаменыПредставления
				И ЗначениеЗаполнено(СтрокаДок.НастройкаБизнесПроцесса)   Тогда
				СтрокаБП = НастройкиБП.НайтиСтроки(Новый Структура("ID_БизнесПроцесса",СтрокаДок.НастройкаБизнесПроцесса))[0];
				Если СтрокаБП.ЗаменитьПредставлениеДокументаПриВыгрузке Тогда				
					DocDescr.SetField("ПредставлениеИмениДокумента",ГлЯдро_ПолучитьПредставлениеДокументаПоНастройкам(СтрокаДок.Ссылка,СтрокаБП.НастройкаПредставленийРеквизитовДокумента));	
				КонецЕсли;
			КонецЕсли;
			Попытка
				DocDescr.SetField("ИмяБП", Строка(СтрокаДок.ИмяБП));				
			Исключение
			КонецПопытки;				
			Попытка
				DocDescr.SetField("ИмяКонтрагента", Строка(СтрокаДок.ИмяКонтрагента));
			Исключение
			КонецПопытки;				
			Попытка
				DocDescr.SetField("ИмяСклада", Строка(СтрокаДок.ИмяСклада));
			Исключение
			КонецПопытки;				
			Попытка
				DocDescr.SetField("ИмяСкладаКуда", Строка(СтрокаДок.ИмяСкладаКуда));
			Исключение
			КонецПопытки;							
			DocDescrs.Add(DocDescr);
		КонецЦикла;
		СписокДокументов = СтруктураПодключенияMS.StorageConnector.ToXml(DocDescrs);
		Возврат СписокДокументов;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

Функция ПолучитьДокумент(UserId, КодДокумента, ОперацияТСД, Режим, mXmlDoc = Неопределено) Экспорт
	
	//Если ЗначениеЗаполнено(Режим) И Режим <> 0 Тогда
	//	Возврат Неопределено
	//КонецЕсли;
	
	Если НЕ НастройкиИнициализированы Тогда
		ГлЯдро_Инициализация();
	КонецЕсли;
	
	Если НЕ КомЯдро_ПодключитьсяКСерверуSMARTS(, mXmlDoc) Тогда
		Возврат Неопределено;
	КонецЕсли;			
	
	ГлЯдро_УстановитьДанныеТекущегоУзла(mXmlDoc);	
	
	Если Режим = 0 Тогда				
		
		SessionSMARTS 		= СтруктураПодключенияMS.StorageConnector.FromXml(mXmlDoc);
		ID_БизнесПроцесса 	= SessionSMARTS.DeviceInfo.Document.GetField("НастройкаБизнесПроцесса");
		
		Если НЕ ЗначениеЗаполнено(ID_БизнесПроцесса) Тогда
			ID_БизнесПроцесса = "";
		КонецЕсли;			
		
		Результат = ГлЯдро_ПолучитьДокумент1СДляВыгрузкиОнлайн(КодДокумента, ОперацияТСД, ID_БизнесПроцесса);
		
	ИначеЕсли Режим = 1 Тогда
		
		Результат = ГлЯдро_ПолучитьДокументПоШтрихкоду(UserId, КодДокумента, ОперацияТСД, mXmlDoc);		
		
	Иначе
		
		Результат =  "#Задан неверный режим получения документа: " + Режим;
		
	КонецЕсли;
	
	Возврат Результат; 
	
КонецФункции

Функция ДокументЗавершен(ID_Документа, mXmlDoc) Экспорт
	
	Если НЕ НастройкиИнициализированы Тогда
		ГлЯдро_Инициализация();
	КонецЕсли;
	
	Если НЕ КомЯдро_ПодключитьсяКСерверуSMARTS(, mXmlDoc) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ГлЯдро_УстановитьДанныеТекущегоУзла(mXmlDoc);
	
	SessionSMARTS = СтруктураПодключенияMS.StorageConnector.FromXml(mXmlDoc);		
	ID_ПодключаемойБазы  = SessionSMARTS.ServerAppInstanceId;
	
	//// +++ _Временное решение
	// Временное решение
	ДокументSMARTS = СтруктураПодключенияMS.StorageConnector.ПолучитьДокумент(ID_Документа);
	СтруктураДокумента = СтруктураМетаданных.ДокументыMS[ДокументSMARTS.DocumentTypeName];
	// !Правильное решение
	// СтруктураДокумента = СтруктураМетаданных.ДокументыMS[SessionSMARTS.DeviceInfo.DocumentTypeName];
	//// --- _Временное решение
	Если СтруктураДокумента.Реквизиты.НайтиПоЗначению("Статус") <> Неопределено И ДокументSMARTS.ПолучитьПоле("Статус") = "Отменен" Тогда
		// Если документ к удалению - удаляем
		РезультатЗаписи = ГлЯдро_УдалитьДокументНаСервереSMARTS(ID_Документа, ID_ПодключаемойБазы);
		СтруктураПодключенияMS.StorageConnector.ОтправитьСообщение(РезультатЗаписи.Сообщение, "", ДокументSMARTS.ИдПользователя); 
		Возврат РезультатЗаписи.Статус;
	КонецЕсли;	
	
	РезультатЗаписи = ГлЯдро_СформироватьИЗаписатьДокументВБазу1С_ПоID(ID_Документа, СтруктураДокумента,,, ID_ПодключаемойБазы, , , Истина);		
	
	РезультатЗаписи = ГлЯдро_ЗаписатьИПровестиДокумент1С(РезультатЗаписи, ДокументSMARTS.ПолучитьПоле("НастройкаБизнесПроцесса"), ДокументSMARTS.ИмяТипаДокумента, ДокументSMARTS.Имя); 
	
	ПользовательТСД = РезультатЗаписи.Дополнение;
	СтруктураПодключенияMS.StorageConnector.ОтправитьСообщение(РезультатЗаписи.Сообщение, "", ПользовательТСД); 
	Если РезультатЗаписи.Статус = Истина Тогда
		Результат = ГлЯдро_УдалитьДокументНаСервереSMARTS(ID_Документа, ID_ПодключаемойБазы);
	Иначе
		Результат = ГлЯдро_УстановитьСтатусДокументаНаСервереSMARTS(ID_Документа, ID_ПодключаемойБазы, "ОшибкаЗаписи");
	КонецЕсли;
	
	Возврат РезультатЗаписи.Статус;
	
КонецФункции

Функция НайтиНоменклатуруПоЧастиНаименования(ПараметрНоменклатуры, userId, mXmlDoc=Неопределено) Экспорт
	Возврат ПолучитьТовар(ПараметрНоменклатуры, "", UserId, 5, mXmlDoc);
КонецФункции

Функция ПолучитьСписокНоменклатуры(ПараметрНоменклатуры, userId, mXmlDoc=Неопределено, Режим = 0) Экспорт
		
	Возврат ПолучитьТовар(ПараметрНоменклатуры, "", UserId, 6, mXmlDoc);
	
КонецФункции

Функция ПолучитьТовары(ПараметрНоменклатуры, ПараметрУпаковки, UserId, mXmlDoc) Экспорт
	Возврат	ПолучитьТовар(ПараметрНоменклатуры, ПараметрУпаковки, UserId, 4, mXmlDoc);
КонецФункции

Функция ПолучитьТовар(ПараметрНоменклатуры, ПараметрУпаковки, UserId, Режим = 0, mXmlDoc = Неопределено, ИмяСобытия = "ПолучитьТовар") Экспорт
	
	Попытка
		ГлЯдро_ЗаписатьСобытиеВЖурналРегистрации(ИмяСобытия, "Информация", "Начало, Режим: "+ Режим +", Ид пользователя = "+ UserId);
		Если НЕ НастройкиИнициализированы Тогда
			ГлЯдро_Инициализация();
		КонецЕсли;
		
		Если НЕ КомЯдро_ПодключитьсяКСерверуSMARTS(, mXmlDoc) Тогда
			ГлЯдро_ЗаписатьСобытиеВЖурналРегистрации(ИмяСобытия, "Ошибка", "Подключится к серверу Mobile SMARTS не удалось, Режим: "+ Режим +", Ид пользователя = "+ UserId);
			Возврат Неопределено;
		КонецЕсли;		
	
		ГлЯдро_УстановитьДанныеТекущегоУзла(mXmlDoc);
		
		Если Режим = 0 Тогда
			Режим = "ПоискПоНоменклатуре";
		ИначеЕсли Режим = 1 Тогда
			Режим = "ПоискПоАртикулуКодуШК";
		ИначеЕсли Режим = 2 ИЛИ Режим = 3 Тогда
			Режим = "ПоискПоНоменклатуреУпаковке";
		ИначеЕсли Режим = 4 Тогда
			Режим = "ПоискПоМассивамНоменклатурыУпаковки";
		ИначеЕсли Режим = 5 Тогда
			Режим = "ПоискПоЧастиНаименования";
		ИначеЕсли Режим = 6 Тогда
			Режим = "СписокНоменклатуры";
		Иначе
			Режим = "";
		КонецЕсли;	
		
		НастройкиКомпоновщика = "";
		ИмяТаблицы_Номенклатура = "Номенклатура"; //"Номенклатура_ШК";
		//Отбор = Новый Структура("ИмяТаблицы", "Номенклатура");
		Отбор = Новый Структура("ИмяТаблицы", ИмяТаблицы_Номенклатура);
		НастройкаКомпоновщикаСтрокой = ГлЯдро_ПолучитьИзКэшаЗначениеТабличнойНастройкиSMARTS("НастройкиОбменаСправочников", Отбор, "НастройкаКомпоновщикаСтрокой");
		Если ЗначениеЗаполнено(НастройкаКомпоновщикаСтрокой) Тогда
			НастройкиКомпоновщика = ЗначениеИзСтрокиВнутр(НастройкаКомпоновщикаСтрокой);
		КонецЕслИ;
		ПараметрыУзлов = ГлЯдро_ПолучитьЗначенияГлобальныхПараметров();
		СтруктураШтрихкода = ГлЯдро_ПолучитьСтруктуруШтрихкодаEAN13(ПараметрНоменклатуры);
		ПараметрыОнлайн = Новый Структура("ПараметрНоменклатуры,ПараметрУпаковки,Режим,СтруктураШтрихкода", ПараметрНоменклатуры, ПараметрУпаковки, Режим, СтруктураШтрихкода);
		
		// + Лаптев АВ Поиск по ШК (равенство) 2019.11.06 тест ntcn
		//ТаблицаТоваров = ГлЯдро_ПолучитьДанныеТаблицыДляВыгрузкиНаСерверSMARTS("Номенклатура", НастройкиКомпоновщика, ПараметрыУзлов, ПараметрыОнлайн);		
		ТаблицаТоваров = ГлЯдро_ПолучитьДанныеТаблицыДляВыгрузкиНаСерверSMARTS(ИмяТаблицы_Номенклатура, НастройкиКомпоновщика, ПараметрыУзлов, ПараметрыОнлайн);		
		// + Лаптев АВ Поиск по ШК (равенство)
		
		Если СтруктураШтрихкода <> Неопределено И СтруктураШтрихкода.ЭтоВесовойТовар Тогда
			ТаблицаТоваров.Колонки.Добавить("Quantity");
			ТаблицаТоваров.ЗаполнитьЗначения(СтруктураШтрихкода.КоличествоТовара, "Quantity");	
		КонецЕсли;
	
		КолонкиТаблицыТоваров = ТаблицаТоваров.Колонки;
			
		// При запросе через "ПолучитьСписокНоменклатуры" Поля: ИмяХарактеристики, ИдХарактеристики, ИмяСерии, ИдСерии - очистить
		
		Если Режим = "СписокНоменклатуры" 
			ИЛИ Режим = "ПоискПоНоменклатуреУпаковке" 
			ИЛИ Режим = "ПоискПоМассивамНоменклатурыУпаковки" Тогда
			
			// т.к. не во всех конфигурациях ведется учет по хар-кам и сериям,
			// то перед очисткой проверяем наличие данных колонок в таблице товаров
			
			Если КолонкиТаблицыТоваров.Найти("Packing_ИмяХарактеристики") <> Неопределено Тогда
				ТаблицаТоваров.ЗаполнитьЗначения("", "Packing_ИмяХарактеристики");
			КонецЕсли;	
			Если КолонкиТаблицыТоваров.Найти("Packing_ИдХарактеристики") <> Неопределено Тогда
				ТаблицаТоваров.ЗаполнитьЗначения("", "Packing_ИдХарактеристики");
			КонецЕсли;	
			Если КолонкиТаблицыТоваров.Найти("Packing_ИмяСерии") <> Неопределено Тогда
				ТаблицаТоваров.ЗаполнитьЗначения("", "Packing_ИмяСерии");
			КонецЕсли;	
			Если КолонкиТаблицыТоваров.Найти("Packing_ИдСерии") <> Неопределено Тогда
				ТаблицаТоваров.ЗаполнитьЗначения("", "Packing_ИдСерии");
			КонецЕсли;						
			Если КолонкиТаблицыТоваров.Найти("Product_BasePackingId") <> Неопределено Тогда
				ТаблицаТоваров.ЗаполнитьЗначения("", "Product_BasePackingId");
			КонецЕсли;
			
			Если Режим = "ПоискПоНоменклатуреУпаковке" 
				ИЛИ Режим = "ПоискПоМассивамНоменклатурыУпаковки" Тогда
				Если КолонкиТаблицыТоваров.Найти("Packing_Barcode") <> Неопределено Тогда
					ТаблицаТоваров.ЗаполнитьЗначения("", "Packing_Barcode");
				КонецЕсли;				
				Если КолонкиТаблицыТоваров.Найти("Packing_price") <> Неопределено Тогда
					ТаблицаТоваров.ЗаполнитьЗначения(0, "Packing_price");
				КонецЕсли;
				Если КолонкиТаблицыТоваров.Найти("Packing_qty") <> Неопределено Тогда
					ТаблицаТоваров.ЗаполнитьЗначения(0, "Packing_qty");
				КонецЕсли;
			КонецЕсли;						
			ГлЯдро_СвернутьТаблицуЗначений(ТаблицаТоваров);									
		Иначе
			//Очищаем Product_BasePackingId для того что бы Mobile SMARTS не запрашивал 
			//данные по базовой упаковке еще раз, тем самым замедляя получение товаров из учетной системы
			Если КолонкиТаблицыТоваров.Найти("Product_BasePackingId") <> Неопределено Тогда
				ТаблицаТоваров.ЗаполнитьЗначения("", "Product_BasePackingId");
			КонецЕсли;
			ГлЯдро_СвернутьТаблицуЗначений(ТаблицаТоваров);
		КонецЕсли;	
		
	
	Исключение
		ОписаниеОшибки = ОписаниеОшибки();
		ГлЯдро_ЗаписатьСобытиеВЖурналРегистрации(ИмяСобытия, "Ошибка", "Ошибка: "+ ОписаниеОшибки +", Режим: "+ Режим +", Ид пользователя = "+ UserId);
		Результат = Неопределено;	
	КонецПопытки;
	
	Если ТаблицаТоваров <> Неопределено Тогда
		Результат = ГлЯдро_ТаблицаЗначенийВCOMSafeArray(ТаблицаТоваров);			
	КонецЕсли; 
	
	ГлЯдро_ЗаписатьСобытиеВЖурналРегистрации(ИмяСобытия, "Информация", "Конец, Режим: "+ Режим +", Ид пользователя = "+ UserId);
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область РегламентныеЗадания

Функция ГлЯдро_ВыгрузитьТаблицыНаСерверSMARTSПоРегламенту() Экспорт	
	
	ЗаписьЖурналаРегистрации("КлеверенсСофтТерминалыСбораДанных.Регламентный обмен справочниками", УровеньЖурналаРегистрации.Информация, , , "Началась выгрузка справочников на сервер Mobile SMARTS");
	
	// если сервер недоступен, то нам здесь делать нечего
	Если НЕ КомЯдро_ПодключитьсяКСерверуSMARTS() Тогда
		ЗаписьЖурналаРегистрации("КлеверенсСофтТерминалыСбораДанных.Регламентный обмен справочниками", УровеньЖурналаРегистрации.Ошибка, , , "Выгрузка прервана: не удалось подключиться к серверу Mobile SMARTS");
		Возврат Ложь;
	КонецЕсли;	
	
	Если НЕ НастройкиИнициализированы Тогда
		ГлЯдро_Инициализация();
	КонецЕсли;			
	
	Если НЕ НастройкиИнициализированы Тогда
		ЗаписьЖурналаРегистрации("КлеверенсСофтТерминалыСбораДанных.Регламентный обмен справочниками", УровеньЖурналаРегистрации.Ошибка, , , "Выгрузка прервана: не удалось получить настройки базы Mobile SMARTS");	
		Возврат Ложь;
	КонецЕсли;	
	
	НастройкиОбменаСправочников = ГлЯдро_ПолучитьИзКэшаНастройкуSMARTS("НастройкиОбменаСправочников");
	
	Если ТипЗнч(НастройкиОбменаСправочников) <> Тип("ТаблицаЗначений") Тогда
		НастройкиОбменаСправочников = ГлЯдро_ПолучитьНастройкуНаСервереSMARTS("НастройкиОбменаСправочников", ДанныеТекущегоУзла.ID_Узла);
	КонецЕсли;
	
	Если ТипЗнч(НастройкиОбменаСправочников) <> Тип("ТаблицаЗначений") Тогда		
		ЗаписьЖурналаРегистрации("КлеверенсСофтТерминалыСбораДанных.Регламентный обмен справочниками", УровеньЖурналаРегистрации.Ошибка, , , "Выгрузка прервана: не найдены настройки регламентного обмена справочниками");
		Возврат Ложь;
	КонецЕсли;	
	
	Для каждого Настройка Из НастройкиОбменаСправочников Цикл
		
		Если НЕ Настройка.Выгружать Тогда		
			Продолжить;
		КонецЕсли; 
		
		// пока уберу условие
		
		НастройкиКомпоновщика = Неопределено;
		
		//Если НЕ ЗначениеЗаполнено(СокрЛП(Настройка.НастройкаКомпоновщикаСтрокой)) Тогда		
		//	Продолжить;
		//КонецЕсли; 
		//
		//Попытка
		//	НастройкиКомпоновщика = ЗначениеИзСтрокиВнутр(Настройка.НастройкаКомпоновщикаСтрокой);
		//Исключение			
		//	ЗаписьЖурналаРегистрации("КлеверенсСофтТерминалыСбораДанных.Регламентный обмен справочниками", УровеньЖурналаРегистрации.Ошибка, , , "Не удалось получить настройки справочника [" + Настройка.ИмяТаблицы + "]");
		//	Продолжить;
		//КонецПопытки; 						
		
		Попытка
		    ГлЯдро_ВыгрузитьТаблицуНаСерверSMARTS(Настройка.ИмяТаблицы, НастройкиКомпоновщика);									
			ЗаписьЖурналаРегистрации("КлеверенсСофтТерминалыСбораДанных.Регламентный обмен справочниками", УровеньЖурналаРегистрации.Информация, , , "Справочник [" + Настройка.ИмяТаблицы + "] успешно выгружен на сервер Mobile SMARTS");
		Исключение			
			ЗаписьЖурналаРегистрации("КлеверенсСофтТерминалыСбораДанных.Регламентный обмен справочниками", УровеньЖурналаРегистрации.Ошибка, , , "Не удалось выгрузить справочник [" + Настройка.ИмяТаблицы + "] на сервер Mobile SMARTS");
			Продолжить;
		КонецПопытки; 		
			
	КонецЦикла; 
	
	ЗаписьЖурналаРегистрации("КлеверенсСофтТерминалыСбораДанных.Регламентный обмен справочниками", УровеньЖурналаРегистрации.Информация, , , "Завершена выгрузка справочников на сервер Mobile SMARTS");
	
	Возврат Истина;
	
КонецФункции
 
Функция ГлЯдро_ВыполнитьОбменДокументамиНаСервереSMARTSПоРегламенту() Экспорт

	// если сервер недоступен, то нам здесь делать нечего
	Если НЕ КомЯдро_ПодключитьсяКСерверуSMARTS() Тогда
		ЗаписьЖурналаРегистрации("КлеверенсСофтТерминалыСбораДанных.Регламентный обмен документами", УровеньЖурналаРегистрации.Ошибка, , , "Не удалось подключиться к серверу Mobile SMARTS");
		Возврат Ложь;
	КонецЕсли;	
	
	Если НЕ НастройкиИнициализированы Тогда
		ГлЯдро_Инициализация();
	КонецЕсли;				
	
	Если НЕ НастройкиИнициализированы Тогда
		ЗаписьЖурналаРегистрации("КлеверенсСофтТерминалыСбораДанных.Регламентный обмен документами", УровеньЖурналаРегистрации.Ошибка, , , "Не удалось получить настройки базы Mobile SMARTS");	
		Возврат Ложь;
	КонецЕсли;	
	
	// общие данные для загрузки и выгрузки	
	ID_БазыMS 					= ДанныеТекущегоУзла.ID_БазыMS;					
	НастройкиБизнесПроцессов 	= ГлЯдро_ПолучитьИзКэшаНастройкуSMARTS("НастройкиБизнесПроцессов");
	ЗначенияПараметров 			= ГлЯдро_ПолучитьЗначенияГлобальныхПараметров();
	ДокументыMS 				= ГлЯдро_ПолучитьСписокДокументовНаСервереSMARTS(ID_БазыMS);
		
	Если ТипЗнч(НастройкиБизнесПроцессов) <> Тип("ТаблицаЗначений") Тогда
		ЗаписьЖурналаРегистрации("КлеверенсСофтТерминалыСбораДанных.Регламентный обмен документами", УровеньЖурналаРегистрации.Ошибка, , , "Не найдены настройки бизнес-процессов");
		Возврат Ложь;
	КонецЕсли;
	
	Если ТипЗнч(ЗначенияПараметров) <> Тип("ТаблицаЗначений") Тогда
		ЗаписьЖурналаРегистрации("КлеверенсСофтТерминалыСбораДанных.Регламентный обмен документами", УровеньЖурналаРегистрации.Ошибка, , , "Не найдены значения глобальных параметров");
		Возврат Ложь;
	КонецЕсли;			
	
	//- сначала делаем загрузку, чтобы повторно не выгрузить уже выгруженные и находящиеся в работе либо завершенные документы

	//- загрузить документы (аналог метода ЗагрузитьВыбранныеДокументыВБазу1С() в форме обмена документами):
	//	- цикл для каждого документа, где Состояние = Завершен
	//		- подбираем бп
	//		- что делать если нашлось <> 1 бп? продолжить
	//		- если бп не подразумевает загрузку в 1с, то продолжить
	//		- что делать если загружаем не в тот же документ? всегда создавать новый? да
	//		- удалить документ с сервера в случае успешной записи либо оставить в случае ошибки
	
	// ****************************************** +++ загрузка документов из Mobile SMARTS в 1С ******************************************
	
	ЗаписьЖурналаРегистрации("КлеверенсСофтТерминалыСбораДанных.Регламентный обмен документами", УровеньЖурналаРегистрации.Информация, , , "Началась загрузка документов с сервера Mobile SMARTS в 1С");
	
	ДанныеНастроекИзКэша = Новый Структура;
	ДанныеНастроекИзКэша.Вставить("НастройкиДляОбмена", 			НастройкиБизнесПроцессов);
	ДанныеНастроекИзКэша.Вставить("ЗначенияПараметров", 			ЗначенияПараметров);
	ДанныеНастроекИзКэша.Вставить("ПроизвольныеКодыШапки", 			ГлЯдро_ПолучитьИзКэшаНастройкуSMARTS("ПроизвольныеКоды_Загрузка_ШапкаДокумента"));
	ДанныеНастроекИзКэша.Вставить("ПроизвольныеКодыТабличнойЧасти", ГлЯдро_ПолучитьИзКэшаНастройкуSMARTS("ПроизвольныеКоды_Загрузка_ТабличнаяЧастьДокумента"));		
	
	ВыбранныеДокументы = ДокументыMS.НайтиСтроки(Новый Структура("Завершен", Истина));
	Для Каждого ДокументКЗагрузке Из ВыбранныеДокументы Цикл
		
		РезультатПодбораБП = ГлЯдро_ПолучитьНастройкуБизнесПроцесса(ДокументКЗагрузке.НастройкаБизнесПроцесса, ДокументКЗагрузке.ИмяТипаДокумента);
		
		// не найдено подходящей строки БП, либо их количество больше одной
		Если РезультатПодбораБП.Статус = Ложь Тогда			
			Сообщение = "Не удалось подобрать настройку бизнес-процесса для документа """ + ДокументКЗагрузке.Имя + """";
			Сообщить(Сообщение);
			ЗаписьЖурналаРегистрации("КлеверенсСофтТерминалыСбораДанных.Регламентный обмен документами", УровеньЖурналаРегистрации.Ошибка, , , Сообщение);
			Продолжить;									
		КонецЕсли;	
		
		НастройкаБП = РезультатПодбораБП.Данные;		
		Если НЕ ЗначениеЗаполнено(СокрЛП(НастройкаБП.ТипРезультирующегоДокумента1С)) ИЛИ (НастройкаБП.ЗагружатьВТотЖе И НЕ ЗначениеЗаполнено(СокрЛП(НастройкаБП.ТипИсходногоДокумента1С))) Тогда
			Сообщение = "Данный бизнес-процесс не подразумевает загрузку документа в 1С, т.к. у него не заполнен результирующий документ 1С";
			Сообщить(Сообщение);
			ЗаписьЖурналаРегистрации("КлеверенсСофтТерминалыСбораДанных.Регламентный обмен документами", УровеньЖурналаРегистрации.Ошибка, , , Сообщение);
			Продолжить;
		КонецЕсли;	
				
		Если НЕ РезультатПодбораБП.Данные.ЗагружатьВТотЖе Тогда			
			ДокументДляЗаполнения = Документы[РезультатПодбораБП.Данные.ТипРезультирующегоДокумента1С].ПустаяСсылка();
		Иначе
			ДокументДляЗаполнения = Неопределено;	
		КонецЕсли;				
				
		СтруктураДанныхДокументаMS = СтруктураМетаданных.ДокументыMS[ДокументКЗагрузке.ИмяТипаДокумента];		
		
		РезультатЗаписи = ГлЯдро_СформироватьИЗаписатьДокументВБазу1С_ПоID(ДокументКЗагрузке.Ид, СтруктураДанныхДокументаMS, ДокументКЗагрузке.НастройкаБизнесПроцесса, ДанныеНастроекИзКэша, ID_БазыMS, РезультатПодбораБП.Данные, ДокументДляЗаполнения);		
			
		Если РезультатЗаписи.Статус = Ложь Тогда
			Сообщить(РезультатЗаписи.Сообщение);
			ЗаписьЖурналаРегистрации("КлеверенсСофтТерминалыСбораДанных.Регламентный обмен документами", УровеньЖурналаРегистрации.Ошибка, , , РезультатЗаписи.Сообщение);
		Иначе			
			РезультатЗаписи.Данные.Комментарий = РезультатЗаписи.Данные.Комментарий + " комментарий отсечения ";
			
			// запись и проведение документа в 1С. Сделано по аналогии с онлайн-записью			
			РезультатЗаписи = ГлЯдро_ЗаписатьИПровестиДокумент1С(РезультатЗаписи, ДокументКЗагрузке.НастройкаБизнесПроцесса, ДокументКЗагрузке.ИмяТипаДокумента, ДокументКЗагрузке.Имя);
			ЗаписьЖурналаРегистрации("КлеверенсСофтТерминалыСбораДанных.Регламентный обмен документами", УровеньЖурналаРегистрации.Информация, , , РезультатЗаписи.Сообщение);
			
			// Удаление опционально. Сделать отдельный флаг для этой опции
			//РезультатУдаления = ГлЯдро_УдалитьДокументНаСервереSMARTS(ДокументКЗагрузке.Ид, ID_БазыMS);
			//Сообщение = РезультатУдаления.Сообщение + " [" + ДокументКЗагрузке.Имя + "]";
			//Сообщить(Сообщение);			
			//ЗаписьЖурналаРегистрации("КлеверенсСофтТерминалыСбораДанных.Регламентный обмен документами", УровеньЖурналаРегистрации.Информация, , , Сообщение);
		КонецЕсли;
		
	КонецЦикла;	
	
	ЗаписьЖурналаРегистрации("КлеверенсСофтТерминалыСбораДанных.Регламентный обмен документами", УровеньЖурналаРегистрации.Информация, , , "Завершена загрузка документов с сервера Mobile SMARTS в 1С");
	
	// ****************************************** --- загрузка документов из Mobile SMARTS в 1С ******************************************		
	
	// ****************************************** +++ выгрузка документов из 1С в Mobile SMARTS ******************************************
	
	ЗаписьЖурналаРегистрации("КлеверенсСофтТерминалыСбораДанных.Регламентный обмен документами", УровеньЖурналаРегистрации.Информация, , , "Началась выгрузка документов из 1С на сервер Mobile SMARTS");
	
	//- выгрузить документы - как тут отбирать, какие выгружать? по комментарию отсечения???	
	//- получить из настроек таблицу отборов (глобальную или узловую) для регламентного обмена, для каждой строки:
	//		- получить программную скд, накладывать на неё настройки компоновщика + комментарий отсечения
	//		- скомпоновать скд, выгрузить ссылки на документы
	//		- подобрать БП для выгрузки
	//		- если их количество <> 1, то сообщение в лог и продолжить;
	// 		- из каждого документа 1С создать документ SMARTS по правилам обмена из найденного бп
	//		- выгрузить документ SMARTS на сервер		
	
	СтруктураНастроек = Новый Структура;
	СтруктураНастроек.Вставить("БизнесПроцессы", НастройкиБизнесПроцессов);
	СтруктураНастроек.Вставить("ПараметрыУзлов", ЗначенияПараметров);
	
	НастройкиОтборов = ГлЯдро_ПолучитьИзКэшаНастройкуSMARTS("НастройкиОтборовУзлов_Автообмен");
	
	Если ТипЗнч(НастройкиОтборов) <> Тип("ТаблицаЗначений") Тогда
		НастройкиОтборов = ГлЯдро_ПолучитьНастройкуНаСервереSMARTS("НастройкиОтборовУзлов_Автообмен");
	КонецЕсли;
	
	Если ТипЗнч(НастройкиОтборов) <> Тип("ТаблицаЗначений") Тогда
		ЗаписьЖурналаРегистрации("КлеверенсСофтТерминалыСбораДанных.Регламентный обмен документами", УровеньЖурналаРегистрации.Ошибка, , , "Не найдены настройки отборов документов для регламентного обмена");
		Возврат Ложь;
	КонецЕсли;
	
	СтруктураНастроек.Вставить("НастройкиОтборов", НастройкиОтборов);	
	
	ОтобранныеДокументы = ГлЯдро_ПолучитьСписокДокументов1С(СтруктураНастроек);			
	
	Если ТипЗнч(ОтобранныеДокументы) <> Тип("ТаблицаЗначений") Тогда
		ЗаписьЖурналаРегистрации("КлеверенсСофтТерминалыСбораДанных.Регламентный обмен документами", УровеньЖурналаРегистрации.Ошибка, , , "Не найдены документы для выгрузки на сервер Mobile SMARTS");
		Возврат Ложь;
	КонецЕсли;					
	
	ДанныеНастроекИзКэша = Новый Структура;		
	ДанныеНастроекИзКэша.Вставить("ПроизвольныеКодыШапки", 			ГлЯдро_ПолучитьИзКэшаНастройкуSMARTS("ПроизвольныеКоды_Выгрузка_ШапкаДокумента"));
	ДанныеНастроекИзКэша.Вставить("ПроизвольныеКодыТабличнойЧасти", ГлЯдро_ПолучитьИзКэшаНастройкуSMARTS("ПроизвольныеКоды_Выгрузка_ТабличнаяЧастьДокумента"));			
	
	ДокументыКВыгрузке = ОтобранныеДокументы.ВыгрузитьКолонку("Ссылка");
	
	Для Каждого Документ1С Из ДокументыКВыгрузке Цикл
		
		Если Найти(ВРег(СокрЛП(Документ1С.Комментарий)), ВРег(СокрЛП("комментарий отсечения"))) Тогда
			Продолжить;		
		ИначеЕсли ДокументыMS.Найти(Строка(Документ1С), "Имя") <> Неопределено Тогда // этот документ уже выгружен в MS	
			Продолжить;
		КонецЕсли;			
				
		// Вставить интерактивную форму выбора БП если их больше 1	
		МетаданныеДокумента1С = Документ1С.Метаданные();
		СтруктураОтбора = Новый Структура("ТипИсходногоДокумента1С, Используется", СокрЛП(МетаданныеДокумента1С.Имя), Истина); 
		НайденныеСтроки = НастройкиБизнесПроцессов.НайтиСтроки(СтруктураОтбора);
		
		Если НЕ НайденныеСтроки.Количество() Тогда
			
			Сообщение = "Не удалось подобрать настройку бизнес-процесса для документа """ + СокрЛП(Документ1С) + """";
			Сообщить(Сообщение);		
			ЗаписьЖурналаРегистрации("КлеверенсСофтТерминалыСбораДанных.Регламентный обмен документами", УровеньЖурналаРегистрации.Ошибка, , , Сообщение);			
			Продолжить;		
			
		ИначеЕсли НайденныеСтроки.Количество() = 1 Тогда
			
			ID_БизнесПроцесса = НайденныеСтроки[0].ID_БизнесПроцесса;
			
		ИначеЕсли НайденныеСтроки.Количество() > 1 Тогда
			
			Сообщение = "Слишком много настроек бизнес-процесса для документа """ + СокрЛП(Документ1С) + """";
			Сообщить(Сообщение);		
			ЗаписьЖурналаРегистрации("КлеверенсСофтТерминалыСбораДанных.Регламентный обмен документами", УровеньЖурналаРегистрации.Ошибка, , , Сообщение);			
			Продолжить;
		КонецЕсли;		
		
		Отбор = Новый Структура;
		
		Отбор.Вставить("Используется", Истина);
		Отбор.Вставить("ТипИсходногоДокумента1С", ГлЯдро_ПолучитьТипДокументаПоСсылке(Документ1С));
		Отбор.Вставить("ID_БизнесПроцесса", ID_БизнесПроцесса);
		
		ДанныеНастроекИзКэша.Вставить("СписокБизнесПроцессов",  ГлЯдро_ПолучитьИзКэшаЗначениеТабличнойНастройкиSMARTS("НастройкиБизнесПроцессов", Отбор, ""));
		
		ГлЯдро_СформироватьИЗаписатьДокументВБазуSMARTS(Документ1С, ДанныеНастроекИзКэша, ID_БизнесПроцесса, ID_БазыMS);				
		
		ЗаписьЖурналаРегистрации("КлеверенсСофтТерминалыСбораДанных.Регламентный обмен документами", УровеньЖурналаРегистрации.Информация, , , "Документ """ + СокрЛП(Документ1С) + """ выгружен из 1С на сервер Mobile SMARTS");
		
	КонецЦикла;
		
	ЗаписьЖурналаРегистрации("КлеверенсСофтТерминалыСбораДанных.Регламентный обмен документами", УровеньЖурналаРегистрации.Информация, , , "Завершена выгрузка документов из 1С на сервер Mobile SMARTS");
	
	// ****************************************** --- выгрузка документов из 1С в Mobile SMARTS ******************************************

	Возврат Истина;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область ПечатьЦенников

Процедура ГлЯдро_ПечатьЦенников(ДанныеДляПечати) Экспорт
	
	Если ИнтеграционнаяОбработкаПодключена Тогда
		Выполнить("ИнтеграционнаяОбработка.ПечатьЦенников(ДанныеДляПечати)");
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

